{"ast":null,"code":"import CodeNode from './CodeNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nclass FunctionNode extends CodeNode {\n  constructor() {\n    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let includes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let language = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    super(code, includes, language);\n    this.keywords = {};\n  }\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n    return nodeFunction;\n  }\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n    if (name !== '') {\n      // use a custom property name\n\n      nodeCode.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n    nodeCode.code = code + '\\n';\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n}\nexport default FunctionNode;\nconst nativeFn = function (code) {\n  let includes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let language = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  for (let i = 0; i < includes.length; i++) {\n    const include = includes[i];\n\n    // TSL Function: glslFn, wgslFn\n\n    if (typeof include === 'function') {\n      includes[i] = include.functionNode;\n    }\n  }\n  const functionNode = nodeObject(new FunctionNode(code, includes, language));\n  const fn = function () {\n    return functionNode.call(...arguments);\n  };\n  fn.functionNode = functionNode;\n  return fn;\n};\nexport const glslFn = (code, includes) => nativeFn(code, includes, 'glsl');\nexport const wgslFn = (code, includes) => nativeFn(code, includes, 'wgsl');\nexport const func = (code, includes) => {\n  // @deprecated, r154\n\n  console.warn('TSL: func() is deprecated. Use nativeFn(), wgslFn() or glslFn() instead.');\n  return nodeObject(new FunctionNode(code, includes));\n};\naddNodeClass('FunctionNode', FunctionNode);","map":{"version":3,"names":["CodeNode","addNodeClass","nodeObject","FunctionNode","constructor","code","arguments","length","undefined","includes","language","keywords","getNodeType","builder","getNodeFunction","type","getInputs","inputs","nodeData","getDataFromNode","nodeFunction","parser","parseFunction","generate","output","name","nodeCode","getCodeFromNode","propertyName","getPropertyName","getCode","keywordsProperties","Object","keys","property","propertyRegExp","RegExp","nodeProperty","build","replace","format","nativeFn","i","include","functionNode","fn","call","glslFn","wgslFn","func","console","warn"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/code/FunctionNode.js"],"sourcesContent":["import CodeNode from './CodeNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\n\nclass FunctionNode extends CodeNode {\n\n\tconstructor( code = '', includes = [], language = '' ) {\n\n\t\tsuper( code, includes, language );\n\n\t\tthis.keywords = {};\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).type;\n\n\t}\n\n\tgetInputs( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).inputs;\n\n\t}\n\n\tgetNodeFunction( builder ) {\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\tlet nodeFunction = nodeData.nodeFunction;\n\n\t\tif ( nodeFunction === undefined ) {\n\n\t\t\tnodeFunction = builder.parser.parseFunction( this.code );\n\n\t\t\tnodeData.nodeFunction = nodeFunction;\n\n\t\t}\n\n\t\treturn nodeFunction;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tsuper.generate( builder );\n\n\t\tconst nodeFunction = this.getNodeFunction( builder );\n\n\t\tconst name = nodeFunction.name;\n\t\tconst type = nodeFunction.type;\n\n\t\tconst nodeCode = builder.getCodeFromNode( this, type );\n\n\t\tif ( name !== '' ) {\n\n\t\t\t// use a custom property name\n\n\t\t\tnodeCode.name = name;\n\n\t\t}\n\n\t\tconst propertyName = builder.getPropertyName( nodeCode );\n\n\t\tlet code = this.getNodeFunction( builder ).getCode( propertyName );\n\n\t\tconst keywords = this.keywords;\n\t\tconst keywordsProperties = Object.keys( keywords );\n\n\t\tif ( keywordsProperties.length > 0 ) {\n\n\t\t\tfor ( const property of keywordsProperties ) {\n\n\t\t\t\tconst propertyRegExp = new RegExp( `\\\\b${property}\\\\b`, 'g' );\n\t\t\t\tconst nodeProperty = keywords[ property ].build( builder, 'property' );\n\n\t\t\t\tcode = code.replace( propertyRegExp, nodeProperty );\n\n\t\t\t}\n\n\t\t}\n\n\t\tnodeCode.code = code + '\\n';\n\n\t\tif ( output === 'property' ) {\n\n\t\t\treturn propertyName;\n\n\t\t} else {\n\n\t\t\treturn builder.format( `${ propertyName }()`, type, output );\n\n\t\t}\n\n\t}\n\n}\n\nexport default FunctionNode;\n\nconst nativeFn = ( code, includes = [], language = '' ) => {\n\n\tfor ( let i = 0; i < includes.length; i ++ ) {\n\n\t\tconst include = includes[ i ];\n\n\t\t// TSL Function: glslFn, wgslFn\n\n\t\tif ( typeof include === 'function' ) {\n\n\t\t\tincludes[ i ] = include.functionNode;\n\n\t\t}\n\n\t}\n\n\tconst functionNode = nodeObject( new FunctionNode( code, includes, language ) );\n\n\tconst fn = ( ...params ) => functionNode.call( ...params );\n\tfn.functionNode = functionNode;\n\n\treturn fn;\n\n};\n\nexport const glslFn = ( code, includes ) => nativeFn( code, includes, 'glsl' );\nexport const wgslFn = ( code, includes ) => nativeFn( code, includes, 'wgsl' );\n\nexport const func = ( code, includes ) => { // @deprecated, r154\n\n\tconsole.warn( 'TSL: func() is deprecated. Use nativeFn(), wgslFn() or glslFn() instead.' );\n\n\treturn nodeObject( new FunctionNode( code, includes ) );\n\n};\n\naddNodeClass( 'FunctionNode', FunctionNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}