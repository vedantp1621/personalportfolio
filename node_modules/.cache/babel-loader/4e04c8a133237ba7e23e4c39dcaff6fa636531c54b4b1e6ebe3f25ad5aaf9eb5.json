{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nimport ConvertNode from '../utils/ConvertNode.js';\nimport JoinNode from '../utils/JoinNode.js';\nimport SplitNode from '../utils/SplitNode.js';\nimport SetNode from '../utils/SetNode.js';\nimport ConstNode from '../core/ConstNode.js';\nimport { getValueFromType, getValueType } from '../core/NodeUtils.js';\n\n//\n\nlet currentStack = null;\nconst NodeElements = new Map(); // @TODO: Currently only a few nodes are added, probably also add others\n\nexport function addNodeElement(name, nodeElement) {\n  if (NodeElements.has(name)) {\n    console.warn(`Redefinition of node element ${name}`);\n    return;\n  }\n  if (typeof nodeElement !== 'function') throw new Error(`Node element ${name} is not a function`);\n  NodeElements.set(name, nodeElement);\n}\nconst parseSwizzle = props => props.replace(/r|s/g, 'x').replace(/g|t/g, 'y').replace(/b|p/g, 'z').replace(/a|q/g, 'w');\nconst shaderNodeHandler = {\n  setup(NodeClosure, params) {\n    const inputs = params.shift();\n    return NodeClosure(nodeObjects(inputs), ...params);\n  },\n  get(node, prop, nodeObj) {\n    if (typeof prop === 'string' && node[prop] === undefined) {\n      if (node.isStackNode !== true && prop === 'assign') {\n        return function () {\n          for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n            params[_key] = arguments[_key];\n          }\n          currentStack.assign(nodeObj, ...params);\n          return nodeObj;\n        };\n      } else if (NodeElements.has(prop)) {\n        const nodeElement = NodeElements.get(prop);\n        return node.isStackNode ? function () {\n          return nodeObj.add(nodeElement(...arguments));\n        } : function () {\n          for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            params[_key2] = arguments[_key2];\n          }\n          return nodeElement(nodeObj, ...params);\n        };\n      } else if (prop === 'self') {\n        return node;\n      } else if (prop.endsWith('Assign') && NodeElements.has(prop.slice(0, prop.length - 'Assign'.length))) {\n        const nodeElement = NodeElements.get(prop.slice(0, prop.length - 'Assign'.length));\n        return node.isStackNode ? function () {\n          return nodeObj.assign(arguments.length <= 0 ? undefined : arguments[0], nodeElement(...arguments));\n        } : function () {\n          for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            params[_key3] = arguments[_key3];\n          }\n          return nodeObj.assign(nodeElement(nodeObj, ...params));\n        };\n      } else if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true) {\n        // accessing properties ( swizzle )\n\n        prop = parseSwizzle(prop);\n        return nodeObject(new SplitNode(nodeObj, prop));\n      } else if (/^set[XYZWRGBASTPQ]{1,4}$/.test(prop) === true) {\n        // set properties ( swizzle )\n\n        prop = parseSwizzle(prop.slice(3).toLowerCase());\n\n        // sort to xyzw sequence\n\n        prop = prop.split('').sort().join('');\n        return value => nodeObject(new SetNode(node, prop, value));\n      } else if (prop === 'width' || prop === 'height' || prop === 'depth') {\n        // accessing property\n\n        if (prop === 'width') prop = 'x';else if (prop === 'height') prop = 'y';else if (prop === 'depth') prop = 'z';\n        return nodeObject(new SplitNode(node, prop));\n      } else if (/^\\d+$/.test(prop) === true) {\n        // accessing array\n\n        return nodeObject(new ArrayElementNode(nodeObj, new ConstNode(Number(prop), 'uint')));\n      }\n    }\n    return Reflect.get(node, prop, nodeObj);\n  },\n  set(node, prop, value, nodeObj) {\n    if (typeof prop === 'string' && node[prop] === undefined) {\n      // setting properties\n\n      if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true || prop === 'width' || prop === 'height' || prop === 'depth' || /^\\d+$/.test(prop) === true) {\n        nodeObj[prop].assign(value);\n        return true;\n      }\n    }\n    return Reflect.set(node, prop, value, nodeObj);\n  }\n};\nconst nodeObjectsCacheMap = new WeakMap();\nconst nodeBuilderFunctionsCacheMap = new WeakMap();\nconst ShaderNodeObject = function (obj) {\n  let altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const type = getValueType(obj);\n  if (type === 'node') {\n    let nodeObject = nodeObjectsCacheMap.get(obj);\n    if (nodeObject === undefined) {\n      nodeObject = new Proxy(obj, shaderNodeHandler);\n      nodeObjectsCacheMap.set(obj, nodeObject);\n      nodeObjectsCacheMap.set(nodeObject, nodeObject);\n    }\n    return nodeObject;\n  } else if (altType === null && (type === 'float' || type === 'boolean') || type && type !== 'shader' && type !== 'string') {\n    return nodeObject(getConstNode(obj, altType));\n  } else if (type === 'shader') {\n    return tslFn(obj);\n  }\n  return obj;\n};\nconst ShaderNodeObjects = function (objects) {\n  let altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  for (const name in objects) {\n    objects[name] = nodeObject(objects[name], altType);\n  }\n  return objects;\n};\nconst ShaderNodeArray = function (array) {\n  let altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const len = array.length;\n  for (let i = 0; i < len; i++) {\n    array[i] = nodeObject(array[i], altType);\n  }\n  return array;\n};\nconst ShaderNodeProxy = function (NodeClass) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let factor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let settings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  const assignNode = node => nodeObject(settings !== null ? Object.assign(node, settings) : node);\n  if (scope === null) {\n    return function () {\n      for (var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        params[_key4] = arguments[_key4];\n      }\n      return assignNode(new NodeClass(...nodeArray(params)));\n    };\n  } else if (factor !== null) {\n    factor = nodeObject(factor);\n    return function () {\n      for (var _len5 = arguments.length, params = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        params[_key5] = arguments[_key5];\n      }\n      return assignNode(new NodeClass(scope, ...nodeArray(params), factor));\n    };\n  } else {\n    return function () {\n      for (var _len6 = arguments.length, params = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        params[_key6] = arguments[_key6];\n      }\n      return assignNode(new NodeClass(scope, ...nodeArray(params)));\n    };\n  }\n};\nconst ShaderNodeImmutable = function (NodeClass) {\n  for (var _len7 = arguments.length, params = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n    params[_key7 - 1] = arguments[_key7];\n  }\n  return nodeObject(new NodeClass(...nodeArray(params)));\n};\nclass ShaderCallNodeInternal extends Node {\n  constructor(shaderNode, inputNodes) {\n    super();\n    this.shaderNode = shaderNode;\n    this.inputNodes = inputNodes;\n  }\n  getNodeType(builder) {\n    const {\n      outputNode\n    } = builder.getNodeProperties(this);\n    return outputNode ? outputNode.getNodeType(builder) : super.getNodeType(builder);\n  }\n  call(builder) {\n    const {\n      shaderNode,\n      inputNodes\n    } = this;\n    if (shaderNode.layout) {\n      let functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get(builder.constructor);\n      if (functionNodesCacheMap === undefined) {\n        functionNodesCacheMap = new WeakMap();\n        nodeBuilderFunctionsCacheMap.set(builder.constructor, functionNodesCacheMap);\n      }\n      let functionNode = functionNodesCacheMap.get(shaderNode);\n      if (functionNode === undefined) {\n        functionNode = nodeObject(builder.buildFunctionNode(shaderNode));\n        functionNodesCacheMap.set(shaderNode, functionNode);\n      }\n      if (builder.currentFunctionNode !== null) {\n        builder.currentFunctionNode.includes.push(functionNode);\n      }\n      return nodeObject(functionNode.call(inputNodes));\n    }\n    const jsFunc = shaderNode.jsFunc;\n    const outputNode = inputNodes !== null ? jsFunc(inputNodes, builder.stack, builder) : jsFunc(builder.stack, builder);\n    return nodeObject(outputNode);\n  }\n  setup(builder) {\n    builder.addStack();\n    builder.stack.outputNode = this.call(builder);\n    return builder.removeStack();\n  }\n  generate(builder, output) {\n    const {\n      outputNode\n    } = builder.getNodeProperties(this);\n    if (outputNode === null) {\n      // TSL: It's recommended to use `tslFn` in setup() pass.\n\n      return this.call(builder).build(builder, output);\n    }\n    return super.generate(builder, output);\n  }\n}\nclass ShaderNodeInternal extends Node {\n  constructor(jsFunc) {\n    super();\n    this.jsFunc = jsFunc;\n    this.layout = null;\n  }\n  get isArrayInput() {\n    return /^\\((\\s+)?\\[/.test(this.jsFunc.toString());\n  }\n  setLayout(layout) {\n    this.layout = layout;\n    return this;\n  }\n  call() {\n    let inputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    nodeObjects(inputs);\n    return nodeObject(new ShaderCallNodeInternal(this, inputs));\n  }\n  setup() {\n    return this.call();\n  }\n}\nconst bools = [false, true];\nconst uints = [0, 1, 2, 3];\nconst ints = [-1, -2];\nconst floats = [0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / (Math.PI * 2), Math.PI / 2];\nconst boolsCacheMap = new Map();\nfor (const bool of bools) boolsCacheMap.set(bool, new ConstNode(bool));\nconst uintsCacheMap = new Map();\nfor (const uint of uints) uintsCacheMap.set(uint, new ConstNode(uint, 'uint'));\nconst intsCacheMap = new Map([...uintsCacheMap].map(el => new ConstNode(el.value, 'int')));\nfor (const int of ints) intsCacheMap.set(int, new ConstNode(int, 'int'));\nconst floatsCacheMap = new Map([...intsCacheMap].map(el => new ConstNode(el.value)));\nfor (const float of floats) floatsCacheMap.set(float, new ConstNode(float));\nfor (const float of floats) floatsCacheMap.set(-float, new ConstNode(-float));\nconst cacheMaps = {\n  bool: boolsCacheMap,\n  uint: uintsCacheMap,\n  ints: intsCacheMap,\n  float: floatsCacheMap\n};\nconst constNodesCacheMap = new Map([...boolsCacheMap, ...floatsCacheMap]);\nconst getConstNode = (value, type) => {\n  if (constNodesCacheMap.has(value)) {\n    return constNodesCacheMap.get(value);\n  } else if (value.isNode === true) {\n    return value;\n  } else {\n    return new ConstNode(value, type);\n  }\n};\nconst safeGetNodeType = node => {\n  try {\n    return node.getNodeType();\n  } catch (_) {\n    return undefined;\n  }\n};\nconst ConvertType = function (type) {\n  let cacheMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return function () {\n    for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      params[_key8] = arguments[_key8];\n    }\n    if (params.length === 0 || !['bool', 'float', 'int', 'uint'].includes(type) && params.every(param => typeof param !== 'object')) {\n      params = [getValueFromType(type, ...params)];\n    }\n    if (params.length === 1 && cacheMap !== null && cacheMap.has(params[0])) {\n      return nodeObject(cacheMap.get(params[0]));\n    }\n    if (params.length === 1) {\n      const node = getConstNode(params[0], type);\n      if (safeGetNodeType(node) === type) return nodeObject(node);\n      return nodeObject(new ConvertNode(node, type));\n    }\n    const nodes = params.map(param => getConstNode(param));\n    return nodeObject(new JoinNode(nodes, type));\n  };\n};\n\n// exports\n\n// utils\n\nexport const getConstNodeType = value => value !== undefined && value !== null ? value.nodeType || value.convertTo || (typeof value === 'string' ? value : null) : null;\n\n// shader node base\n\nexport function ShaderNode(jsFunc) {\n  return new Proxy(new ShaderNodeInternal(jsFunc), shaderNodeHandler);\n}\nexport const nodeObject = function (val) {\n  let altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (/* new */ShaderNodeObject(val, altType)\n  );\n};\nexport const nodeObjects = function (val) {\n  let altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return new ShaderNodeObjects(val, altType);\n};\nexport const nodeArray = function (val) {\n  let altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return new ShaderNodeArray(val, altType);\n};\nexport const nodeProxy = function () {\n  for (var _len9 = arguments.length, params = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    params[_key9] = arguments[_key9];\n  }\n  return new ShaderNodeProxy(...params);\n};\nexport const nodeImmutable = function () {\n  for (var _len10 = arguments.length, params = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    params[_key10] = arguments[_key10];\n  }\n  return new ShaderNodeImmutable(...params);\n};\nexport const shader = jsFunc => {\n  // @deprecated, r154\n\n  console.warn('TSL: shader() is deprecated. Use tslFn() instead.');\n  return new ShaderNode(jsFunc);\n};\nexport const tslFn = jsFunc => {\n  const shaderNode = new ShaderNode(jsFunc);\n  const fn = function () {\n    let inputs;\n    for (var _len11 = arguments.length, params = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      params[_key11] = arguments[_key11];\n    }\n    nodeObjects(params);\n    if (params[0] && params[0].isNode) {\n      inputs = [...params];\n    } else {\n      inputs = params[0];\n    }\n    return shaderNode.call(inputs);\n  };\n  fn.shaderNode = shaderNode;\n  fn.setLayout = layout => {\n    shaderNode.setLayout(layout);\n    return fn;\n  };\n  return fn;\n};\naddNodeClass('ShaderNode', ShaderNode);\n\n//\n\nexport const setCurrentStack = stack => {\n  if (currentStack === stack) {\n\n    //throw new Error( 'Stack already defined.' );\n  }\n  currentStack = stack;\n};\nexport const getCurrentStack = () => currentStack;\nexport const If = function () {\n  return currentStack.if(...arguments);\n};\nexport function append(node) {\n  if (currentStack) currentStack.add(node);\n  return node;\n}\naddNodeElement('append', append);\n\n// types\n// @TODO: Maybe export from ConstNode.js?\n\nexport const color = new ConvertType('color');\nexport const float = new ConvertType('float', cacheMaps.float);\nexport const int = new ConvertType('int', cacheMaps.int);\nexport const uint = new ConvertType('uint', cacheMaps.uint);\nexport const bool = new ConvertType('bool', cacheMaps.bool);\nexport const vec2 = new ConvertType('vec2');\nexport const ivec2 = new ConvertType('ivec2');\nexport const uvec2 = new ConvertType('uvec2');\nexport const bvec2 = new ConvertType('bvec2');\nexport const vec3 = new ConvertType('vec3');\nexport const ivec3 = new ConvertType('ivec3');\nexport const uvec3 = new ConvertType('uvec3');\nexport const bvec3 = new ConvertType('bvec3');\nexport const vec4 = new ConvertType('vec4');\nexport const ivec4 = new ConvertType('ivec4');\nexport const uvec4 = new ConvertType('uvec4');\nexport const bvec4 = new ConvertType('bvec4');\nexport const mat2 = new ConvertType('mat2');\nexport const imat2 = new ConvertType('imat2');\nexport const umat2 = new ConvertType('umat2');\nexport const bmat2 = new ConvertType('bmat2');\nexport const mat3 = new ConvertType('mat3');\nexport const imat3 = new ConvertType('imat3');\nexport const umat3 = new ConvertType('umat3');\nexport const bmat3 = new ConvertType('bmat3');\nexport const mat4 = new ConvertType('mat4');\nexport const imat4 = new ConvertType('imat4');\nexport const umat4 = new ConvertType('umat4');\nexport const bmat4 = new ConvertType('bmat4');\nexport const string = function () {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return nodeObject(new ConstNode(value, 'string'));\n};\nexport const arrayBuffer = value => nodeObject(new ConstNode(value, 'ArrayBuffer'));\naddNodeElement('color', color);\naddNodeElement('float', float);\naddNodeElement('int', int);\naddNodeElement('uint', uint);\naddNodeElement('bool', bool);\naddNodeElement('vec2', vec2);\naddNodeElement('ivec2', ivec2);\naddNodeElement('uvec2', uvec2);\naddNodeElement('bvec2', bvec2);\naddNodeElement('vec3', vec3);\naddNodeElement('ivec3', ivec3);\naddNodeElement('uvec3', uvec3);\naddNodeElement('bvec3', bvec3);\naddNodeElement('vec4', vec4);\naddNodeElement('ivec4', ivec4);\naddNodeElement('uvec4', uvec4);\naddNodeElement('bvec4', bvec4);\naddNodeElement('mat2', mat2);\naddNodeElement('imat2', imat2);\naddNodeElement('umat2', umat2);\naddNodeElement('bmat2', bmat2);\naddNodeElement('mat3', mat3);\naddNodeElement('imat3', imat3);\naddNodeElement('umat3', umat3);\naddNodeElement('bmat3', bmat3);\naddNodeElement('mat4', mat4);\naddNodeElement('imat4', imat4);\naddNodeElement('umat4', umat4);\naddNodeElement('bmat4', bmat4);\naddNodeElement('string', string);\naddNodeElement('arrayBuffer', arrayBuffer);\n\n// basic nodes\n// HACK - we cannot export them from the corresponding files because of the cyclic dependency\nexport const element = nodeProxy(ArrayElementNode);\nexport const convert = (node, types) => nodeObject(new ConvertNode(nodeObject(node), types));\nexport const split = (node, channels) => nodeObject(new SplitNode(nodeObject(node), channels));\naddNodeElement('element', element);\naddNodeElement('convert', convert);","map":{"version":3,"names":["Node","addNodeClass","ArrayElementNode","ConvertNode","JoinNode","SplitNode","SetNode","ConstNode","getValueFromType","getValueType","currentStack","NodeElements","Map","addNodeElement","name","nodeElement","has","console","warn","Error","set","parseSwizzle","props","replace","shaderNodeHandler","setup","NodeClosure","params","inputs","shift","nodeObjects","get","node","prop","nodeObj","undefined","isStackNode","_len","arguments","length","Array","_key","assign","add","_len2","_key2","endsWith","slice","_len3","_key3","test","nodeObject","toLowerCase","split","sort","join","value","Number","Reflect","nodeObjectsCacheMap","WeakMap","nodeBuilderFunctionsCacheMap","ShaderNodeObject","obj","altType","type","Proxy","getConstNode","tslFn","ShaderNodeObjects","objects","ShaderNodeArray","array","len","i","ShaderNodeProxy","NodeClass","scope","factor","settings","assignNode","Object","_len4","_key4","nodeArray","_len5","_key5","_len6","_key6","ShaderNodeImmutable","_len7","_key7","ShaderCallNodeInternal","constructor","shaderNode","inputNodes","getNodeType","builder","outputNode","getNodeProperties","call","layout","functionNodesCacheMap","functionNode","buildFunctionNode","currentFunctionNode","includes","push","jsFunc","stack","addStack","removeStack","generate","output","build","ShaderNodeInternal","isArrayInput","toString","setLayout","bools","uints","ints","floats","Math","PI","boolsCacheMap","bool","uintsCacheMap","uint","intsCacheMap","map","el","int","floatsCacheMap","float","cacheMaps","constNodesCacheMap","isNode","safeGetNodeType","_","ConvertType","cacheMap","_len8","_key8","every","param","nodes","getConstNodeType","nodeType","convertTo","ShaderNode","val","nodeProxy","_len9","_key9","nodeImmutable","_len10","_key10","shader","fn","_len11","_key11","setCurrentStack","getCurrentStack","If","if","append","color","vec2","ivec2","uvec2","bvec2","vec3","ivec3","uvec3","bvec3","vec4","ivec4","uvec4","bvec4","mat2","imat2","umat2","bmat2","mat3","imat3","umat3","bmat3","mat4","imat4","umat4","bmat4","string","arrayBuffer","element","convert","types","channels"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/shadernode/ShaderNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nimport ConvertNode from '../utils/ConvertNode.js';\nimport JoinNode from '../utils/JoinNode.js';\nimport SplitNode from '../utils/SplitNode.js';\nimport SetNode from '../utils/SetNode.js';\nimport ConstNode from '../core/ConstNode.js';\nimport { getValueFromType, getValueType } from '../core/NodeUtils.js';\n\n//\n\nlet currentStack = null;\n\nconst NodeElements = new Map(); // @TODO: Currently only a few nodes are added, probably also add others\n\nexport function addNodeElement( name, nodeElement ) {\n\n\tif ( NodeElements.has( name ) ) {\n\n\t\tconsole.warn( `Redefinition of node element ${ name }` );\n\t\treturn;\n\n\t}\n\n\tif ( typeof nodeElement !== 'function' ) throw new Error( `Node element ${ name } is not a function` );\n\n\tNodeElements.set( name, nodeElement );\n\n}\n\nconst parseSwizzle = ( props ) => props.replace( /r|s/g, 'x' ).replace( /g|t/g, 'y' ).replace( /b|p/g, 'z' ).replace( /a|q/g, 'w' );\n\nconst shaderNodeHandler = {\n\n\tsetup( NodeClosure, params ) {\n\n\t\tconst inputs = params.shift();\n\n\t\treturn NodeClosure( nodeObjects( inputs ), ...params );\n\n\t},\n\n\tget( node, prop, nodeObj ) {\n\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\n\n\t\t\tif ( node.isStackNode !== true && prop === 'assign' ) {\n\n\t\t\t\treturn ( ...params ) => {\n\n\t\t\t\t\tcurrentStack.assign( nodeObj, ...params );\n\n\t\t\t\t\treturn nodeObj;\n\n\t\t\t\t};\n\n\t\t\t} else if ( NodeElements.has( prop ) ) {\n\n\t\t\t\tconst nodeElement = NodeElements.get( prop );\n\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.add( nodeElement( ...params ) ) : ( ...params ) => nodeElement( nodeObj, ...params );\n\n\t\t\t} else if ( prop === 'self' ) {\n\n\t\t\t\treturn node;\n\n\t\t\t} else if ( prop.endsWith( 'Assign' ) && NodeElements.has( prop.slice( 0, prop.length - 'Assign'.length ) ) ) {\n\n\t\t\t\tconst nodeElement = NodeElements.get( prop.slice( 0, prop.length - 'Assign'.length ) );\n\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.assign( params[ 0 ], nodeElement( ...params ) ) : ( ...params ) => nodeObj.assign( nodeElement( nodeObj, ...params ) );\n\n\t\t\t} else if ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true ) {\n\n\t\t\t\t// accessing properties ( swizzle )\n\n\t\t\t\tprop = parseSwizzle( prop );\n\n\t\t\t\treturn nodeObject( new SplitNode( nodeObj, prop ) );\n\n\t\t\t} else if ( /^set[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\n\n\t\t\t\t// set properties ( swizzle )\n\n\t\t\t\tprop = parseSwizzle( prop.slice( 3 ).toLowerCase() );\n\n\t\t\t\t// sort to xyzw sequence\n\n\t\t\t\tprop = prop.split( '' ).sort().join( '' );\n\n\t\t\t\treturn ( value ) => nodeObject( new SetNode( node, prop, value ) );\n\n\t\t\t} else if ( prop === 'width' || prop === 'height' || prop === 'depth' ) {\n\n\t\t\t\t// accessing property\n\n\t\t\t\tif ( prop === 'width' ) prop = 'x';\n\t\t\t\telse if ( prop === 'height' ) prop = 'y';\n\t\t\t\telse if ( prop === 'depth' ) prop = 'z';\n\n\t\t\t\treturn nodeObject( new SplitNode( node, prop ) );\n\n\t\t\t} else if ( /^\\d+$/.test( prop ) === true ) {\n\n\t\t\t\t// accessing array\n\n\t\t\t\treturn nodeObject( new ArrayElementNode( nodeObj, new ConstNode( Number( prop ), 'uint' ) ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Reflect.get( node, prop, nodeObj );\n\n\t},\n\n\tset( node, prop, value, nodeObj ) {\n\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\n\n\t\t\t// setting properties\n\n\t\t\tif ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true || prop === 'width' || prop === 'height' || prop === 'depth' || /^\\d+$/.test( prop ) === true ) {\n\n\t\t\t\tnodeObj[ prop ].assign( value );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Reflect.set( node, prop, value, nodeObj );\n\n\t}\n\n};\n\nconst nodeObjectsCacheMap = new WeakMap();\nconst nodeBuilderFunctionsCacheMap = new WeakMap();\n\nconst ShaderNodeObject = function ( obj, altType = null ) {\n\n\tconst type = getValueType( obj );\n\n\tif ( type === 'node' ) {\n\n\t\tlet nodeObject = nodeObjectsCacheMap.get( obj );\n\n\t\tif ( nodeObject === undefined ) {\n\n\t\t\tnodeObject = new Proxy( obj, shaderNodeHandler );\n\n\t\t\tnodeObjectsCacheMap.set( obj, nodeObject );\n\t\t\tnodeObjectsCacheMap.set( nodeObject, nodeObject );\n\n\t\t}\n\n\t\treturn nodeObject;\n\n\t} else if ( ( altType === null && ( type === 'float' || type === 'boolean' ) ) || ( type && type !== 'shader' && type !== 'string' ) ) {\n\n\t\treturn nodeObject( getConstNode( obj, altType ) );\n\n\t} else if ( type === 'shader' ) {\n\n\t\treturn tslFn( obj );\n\n\t}\n\n\treturn obj;\n\n};\n\nconst ShaderNodeObjects = function ( objects, altType = null ) {\n\n\tfor ( const name in objects ) {\n\n\t\tobjects[ name ] = nodeObject( objects[ name ], altType );\n\n\t}\n\n\treturn objects;\n\n};\n\nconst ShaderNodeArray = function ( array, altType = null ) {\n\n\tconst len = array.length;\n\n\tfor ( let i = 0; i < len; i ++ ) {\n\n\t\tarray[ i ] = nodeObject( array[ i ], altType );\n\n\t}\n\n\treturn array;\n\n};\n\nconst ShaderNodeProxy = function ( NodeClass, scope = null, factor = null, settings = null ) {\n\n\tconst assignNode = ( node ) => nodeObject( settings !== null ? Object.assign( node, settings ) : node );\n\n\tif ( scope === null ) {\n\n\t\treturn ( ...params ) => {\n\n\t\t\treturn assignNode( new NodeClass( ...nodeArray( params ) ) );\n\n\t\t};\n\n\t} else if ( factor !== null ) {\n\n\t\tfactor = nodeObject( factor );\n\n\t\treturn ( ...params ) => {\n\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ), factor ) );\n\n\t\t};\n\n\t} else {\n\n\t\treturn ( ...params ) => {\n\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ) ) );\n\n\t\t};\n\n\t}\n\n};\n\nconst ShaderNodeImmutable = function ( NodeClass, ...params ) {\n\n\treturn nodeObject( new NodeClass( ...nodeArray( params ) ) );\n\n};\n\nclass ShaderCallNodeInternal extends Node {\n\n\tconstructor( shaderNode, inputNodes ) {\n\n\t\tsuper();\n\n\t\tthis.shaderNode = shaderNode;\n\t\tthis.inputNodes = inputNodes;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst { outputNode } = builder.getNodeProperties( this );\n\n\t\treturn outputNode ? outputNode.getNodeType( builder ) : super.getNodeType( builder );\n\n\t}\n\n\tcall( builder ) {\n\n\t\tconst { shaderNode, inputNodes } = this;\n\n\t\tif ( shaderNode.layout ) {\n\n\t\t\tlet functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get( builder.constructor );\n\n\t\t\tif ( functionNodesCacheMap === undefined ) {\n\n\t\t\t\tfunctionNodesCacheMap = new WeakMap();\n\n\t\t\t\tnodeBuilderFunctionsCacheMap.set( builder.constructor, functionNodesCacheMap );\n\n\t\t\t}\n\n\t\t\tlet functionNode = functionNodesCacheMap.get( shaderNode );\n\n\t\t\tif ( functionNode === undefined ) {\n\n\t\t\t\tfunctionNode = nodeObject( builder.buildFunctionNode( shaderNode ) );\n\n\t\t\t\tfunctionNodesCacheMap.set( shaderNode, functionNode );\n\n\t\t\t}\n\n\t\t\tif ( builder.currentFunctionNode !== null ) {\n\n\t\t\t\tbuilder.currentFunctionNode.includes.push( functionNode );\n\n\t\t\t}\n\n\t\t\treturn nodeObject( functionNode.call( inputNodes ) );\n\n\t\t}\n\n\t\tconst jsFunc = shaderNode.jsFunc;\n\t\tconst outputNode = inputNodes !== null ? jsFunc( inputNodes, builder.stack, builder ) : jsFunc( builder.stack, builder );\n\n\t\treturn nodeObject( outputNode );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tbuilder.addStack();\n\n\t\tbuilder.stack.outputNode = this.call( builder );\n\n\t\treturn builder.removeStack();\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst { outputNode } = builder.getNodeProperties( this );\n\n\t\tif ( outputNode === null ) {\n\n\t\t\t// TSL: It's recommended to use `tslFn` in setup() pass.\n\n\t\t\treturn this.call( builder ).build( builder, output );\n\n\t\t}\n\n\t\treturn super.generate( builder, output );\n\n\t}\n\n}\n\nclass ShaderNodeInternal extends Node {\n\n\tconstructor( jsFunc ) {\n\n\t\tsuper();\n\n\t\tthis.jsFunc = jsFunc;\n\t\tthis.layout = null;\n\n\t}\n\n\tget isArrayInput() {\n\n\t\treturn /^\\((\\s+)?\\[/.test( this.jsFunc.toString() );\n\n\t}\n\n\tsetLayout( layout ) {\n\n\t\tthis.layout = layout;\n\n\t\treturn this;\n\n\t}\n\n\tcall( inputs = null ) {\n\n\t\tnodeObjects( inputs );\n\n\t\treturn nodeObject( new ShaderCallNodeInternal( this, inputs ) );\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.call();\n\n\t}\n\n}\n\nconst bools = [ false, true ];\nconst uints = [ 0, 1, 2, 3 ];\nconst ints = [ - 1, - 2 ];\nconst floats = [ 0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / ( Math.PI * 2 ), Math.PI / 2 ];\n\nconst boolsCacheMap = new Map();\nfor ( const bool of bools ) boolsCacheMap.set( bool, new ConstNode( bool ) );\n\nconst uintsCacheMap = new Map();\nfor ( const uint of uints ) uintsCacheMap.set( uint, new ConstNode( uint, 'uint' ) );\n\nconst intsCacheMap = new Map( [ ...uintsCacheMap ].map( el => new ConstNode( el.value, 'int' ) ) );\nfor ( const int of ints ) intsCacheMap.set( int, new ConstNode( int, 'int' ) );\n\nconst floatsCacheMap = new Map( [ ...intsCacheMap ].map( el => new ConstNode( el.value ) ) );\nfor ( const float of floats ) floatsCacheMap.set( float, new ConstNode( float ) );\nfor ( const float of floats ) floatsCacheMap.set( - float, new ConstNode( - float ) );\n\nconst cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };\n\nconst constNodesCacheMap = new Map( [ ...boolsCacheMap, ...floatsCacheMap ] );\n\nconst getConstNode = ( value, type ) => {\n\n\tif ( constNodesCacheMap.has( value ) ) {\n\n\t\treturn constNodesCacheMap.get( value );\n\n\t} else if ( value.isNode === true ) {\n\n\t\treturn value;\n\n\t} else {\n\n\t\treturn new ConstNode( value, type );\n\n\t}\n\n};\n\nconst safeGetNodeType = ( node ) => {\n\n\ttry {\n\n\t\treturn node.getNodeType();\n\n\t} catch ( _ ) {\n\n\t\treturn undefined;\n\n\t}\n\n};\n\nconst ConvertType = function ( type, cacheMap = null ) {\n\n\treturn ( ...params ) => {\n\n\t\tif ( params.length === 0 || ( ! [ 'bool', 'float', 'int', 'uint' ].includes( type ) && params.every( param => typeof param !== 'object' ) ) ) {\n\n\t\t\tparams = [ getValueFromType( type, ...params ) ];\n\n\t\t}\n\n\t\tif ( params.length === 1 && cacheMap !== null && cacheMap.has( params[ 0 ] ) ) {\n\n\t\t\treturn nodeObject( cacheMap.get( params[ 0 ] ) );\n\n\t\t}\n\n\t\tif ( params.length === 1 ) {\n\n\t\t\tconst node = getConstNode( params[ 0 ], type );\n\t\t\tif ( safeGetNodeType( node ) === type ) return nodeObject( node );\n\t\t\treturn nodeObject( new ConvertNode( node, type ) );\n\n\t\t}\n\n\t\tconst nodes = params.map( param => getConstNode( param ) );\n\t\treturn nodeObject( new JoinNode( nodes, type ) );\n\n\t};\n\n};\n\n// exports\n\n// utils\n\nexport const getConstNodeType = ( value ) => ( value !== undefined && value !== null ) ? ( value.nodeType || value.convertTo || ( typeof value === 'string' ? value : null ) ) : null;\n\n// shader node base\n\nexport function ShaderNode( jsFunc ) {\n\n\treturn new Proxy( new ShaderNodeInternal( jsFunc ), shaderNodeHandler );\n\n}\n\nexport const nodeObject = ( val, altType = null ) => /* new */ ShaderNodeObject( val, altType );\nexport const nodeObjects = ( val, altType = null ) => new ShaderNodeObjects( val, altType );\nexport const nodeArray = ( val, altType = null ) => new ShaderNodeArray( val, altType );\nexport const nodeProxy = ( ...params ) => new ShaderNodeProxy( ...params );\nexport const nodeImmutable = ( ...params ) => new ShaderNodeImmutable( ...params );\n\nexport const shader = ( jsFunc ) => { // @deprecated, r154\n\n\tconsole.warn( 'TSL: shader() is deprecated. Use tslFn() instead.' );\n\n\treturn new ShaderNode( jsFunc );\n\n};\n\nexport const tslFn = ( jsFunc ) => {\n\n\tconst shaderNode = new ShaderNode( jsFunc );\n\n\tconst fn = ( ...params ) => {\n\n\t\tlet inputs;\n\n\t\tnodeObjects( params );\n\n\t\tif ( params[ 0 ] && params[ 0 ].isNode ) {\n\n\t\t\tinputs = [ ...params ];\n\n\t\t} else {\n\n\t\t\tinputs = params[ 0 ];\n\n\t\t}\n\n\t\treturn shaderNode.call( inputs );\n\n\t};\n\n\tfn.shaderNode = shaderNode;\n\tfn.setLayout = ( layout ) => {\n\n\t\tshaderNode.setLayout( layout );\n\n\t\treturn fn;\n\n\t};\n\n\treturn fn;\n\n};\n\naddNodeClass( 'ShaderNode', ShaderNode );\n\n//\n\nexport const setCurrentStack = ( stack ) => {\n\n\tif ( currentStack === stack ) {\n\n\t\t//throw new Error( 'Stack already defined.' );\n\n\t}\n\n\tcurrentStack = stack;\n\n};\n\nexport const getCurrentStack = () => currentStack;\n\nexport const If = ( ...params ) => currentStack.if( ...params );\n\nexport function append( node ) {\n\n\tif ( currentStack ) currentStack.add( node );\n\n\treturn node;\n\n}\n\naddNodeElement( 'append', append );\n\n// types\n// @TODO: Maybe export from ConstNode.js?\n\nexport const color = new ConvertType( 'color' );\n\nexport const float = new ConvertType( 'float', cacheMaps.float );\nexport const int = new ConvertType( 'int', cacheMaps.int );\nexport const uint = new ConvertType( 'uint', cacheMaps.uint );\nexport const bool = new ConvertType( 'bool', cacheMaps.bool );\n\nexport const vec2 = new ConvertType( 'vec2' );\nexport const ivec2 = new ConvertType( 'ivec2' );\nexport const uvec2 = new ConvertType( 'uvec2' );\nexport const bvec2 = new ConvertType( 'bvec2' );\n\nexport const vec3 = new ConvertType( 'vec3' );\nexport const ivec3 = new ConvertType( 'ivec3' );\nexport const uvec3 = new ConvertType( 'uvec3' );\nexport const bvec3 = new ConvertType( 'bvec3' );\n\nexport const vec4 = new ConvertType( 'vec4' );\nexport const ivec4 = new ConvertType( 'ivec4' );\nexport const uvec4 = new ConvertType( 'uvec4' );\nexport const bvec4 = new ConvertType( 'bvec4' );\n\nexport const mat2 = new ConvertType( 'mat2' );\nexport const imat2 = new ConvertType( 'imat2' );\nexport const umat2 = new ConvertType( 'umat2' );\nexport const bmat2 = new ConvertType( 'bmat2' );\n\nexport const mat3 = new ConvertType( 'mat3' );\nexport const imat3 = new ConvertType( 'imat3' );\nexport const umat3 = new ConvertType( 'umat3' );\nexport const bmat3 = new ConvertType( 'bmat3' );\n\nexport const mat4 = new ConvertType( 'mat4' );\nexport const imat4 = new ConvertType( 'imat4' );\nexport const umat4 = new ConvertType( 'umat4' );\nexport const bmat4 = new ConvertType( 'bmat4' );\n\nexport const string = ( value = '' ) => nodeObject( new ConstNode( value, 'string' ) );\nexport const arrayBuffer = ( value ) => nodeObject( new ConstNode( value, 'ArrayBuffer' ) );\n\naddNodeElement( 'color', color );\naddNodeElement( 'float', float );\naddNodeElement( 'int', int );\naddNodeElement( 'uint', uint );\naddNodeElement( 'bool', bool );\naddNodeElement( 'vec2', vec2 );\naddNodeElement( 'ivec2', ivec2 );\naddNodeElement( 'uvec2', uvec2 );\naddNodeElement( 'bvec2', bvec2 );\naddNodeElement( 'vec3', vec3 );\naddNodeElement( 'ivec3', ivec3 );\naddNodeElement( 'uvec3', uvec3 );\naddNodeElement( 'bvec3', bvec3 );\naddNodeElement( 'vec4', vec4 );\naddNodeElement( 'ivec4', ivec4 );\naddNodeElement( 'uvec4', uvec4 );\naddNodeElement( 'bvec4', bvec4 );\naddNodeElement( 'mat2', mat2 );\naddNodeElement( 'imat2', imat2 );\naddNodeElement( 'umat2', umat2 );\naddNodeElement( 'bmat2', bmat2 );\naddNodeElement( 'mat3', mat3 );\naddNodeElement( 'imat3', imat3 );\naddNodeElement( 'umat3', umat3 );\naddNodeElement( 'bmat3', bmat3 );\naddNodeElement( 'mat4', mat4 );\naddNodeElement( 'imat4', imat4 );\naddNodeElement( 'umat4', umat4 );\naddNodeElement( 'bmat4', bmat4 );\naddNodeElement( 'string', string );\naddNodeElement( 'arrayBuffer', arrayBuffer );\n\n// basic nodes\n// HACK - we cannot export them from the corresponding files because of the cyclic dependency\nexport const element = nodeProxy( ArrayElementNode );\nexport const convert = ( node, types ) => nodeObject( new ConvertNode( nodeObject( node ), types ) );\nexport const split = ( node, channels ) => nodeObject( new SplitNode( nodeObject( node ), channels ) );\n\naddNodeElement( 'element', element );\naddNodeElement( 'convert', convert );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}