{"ast":null,"code":"import { addNodeClass } from '../core/Node.js';\nimport TextureNode from './TextureNode.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\nclass TextureStoreNode extends TextureNode {\n  constructor(value, uvNode) {\n    let storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(value, uvNode);\n    this.storeNode = storeNode;\n    this.isStoreTextureNode = true;\n  }\n  getInputType( /*builder*/\n  ) {\n    return 'storageTexture';\n  }\n  setup(builder) {\n    super.setup(builder);\n    const properties = builder.getNodeProperties(this);\n    properties.storeNode = this.storeNode;\n  }\n  generate(builder, output) {\n    let snippet;\n    if (this.storeNode !== null) {\n      snippet = this.generateStore(builder);\n    } else {\n      snippet = super.generate(builder, output);\n    }\n    return snippet;\n  }\n  generateStore(builder) {\n    const properties = builder.getNodeProperties(this);\n    const {\n      uvNode,\n      storeNode\n    } = properties;\n    const textureProperty = super.generate(builder, 'property');\n    const uvSnippet = uvNode.build(builder, 'uvec2');\n    const storeSnippet = storeNode.build(builder, 'vec4');\n    const snippet = builder.generateTextureStore(builder, textureProperty, uvSnippet, storeSnippet);\n    builder.addLineFlowCode(snippet);\n  }\n}\nexport default TextureStoreNode;\nconst textureStoreBase = nodeProxy(TextureStoreNode);\nexport const textureStore = (value, uvNode, storeNode) => {\n  const node = textureStoreBase(value, uvNode, storeNode);\n  if (storeNode !== null) node.append();\n  return node;\n};\naddNodeClass('TextureStoreNode', TextureStoreNode);","map":{"version":3,"names":["addNodeClass","TextureNode","nodeProxy","TextureStoreNode","constructor","value","uvNode","storeNode","arguments","length","undefined","isStoreTextureNode","getInputType","setup","builder","properties","getNodeProperties","generate","output","snippet","generateStore","textureProperty","uvSnippet","build","storeSnippet","generateTextureStore","addLineFlowCode","textureStoreBase","textureStore","node","append"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/accessors/TextureStoreNode.js"],"sourcesContent":["import { addNodeClass } from '../core/Node.js';\nimport TextureNode from './TextureNode.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\n\nclass TextureStoreNode extends TextureNode {\n\n\tconstructor( value, uvNode, storeNode = null ) {\n\n\t\tsuper( value, uvNode );\n\n\t\tthis.storeNode = storeNode;\n\n\t\tthis.isStoreTextureNode = true;\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'storageTexture';\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.storeNode = this.storeNode;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet snippet;\n\n\t\tif ( this.storeNode !== null ) {\n\n\t\t\tsnippet = this.generateStore( builder );\n\n\t\t} else {\n\n\t\t\tsnippet = super.generate( builder, output );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgenerateStore( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\n\t\tconst { uvNode, storeNode } = properties;\n\n\t\tconst textureProperty = super.generate( builder, 'property' );\n\t\tconst uvSnippet = uvNode.build( builder, 'uvec2' );\n\t\tconst storeSnippet = storeNode.build( builder, 'vec4' );\n\n\t\tconst snippet = builder.generateTextureStore( builder, textureProperty, uvSnippet, storeSnippet );\n\n\t\tbuilder.addLineFlowCode( snippet );\n\n\t}\n\n}\n\nexport default TextureStoreNode;\n\nconst textureStoreBase = nodeProxy( TextureStoreNode );\n\nexport const textureStore = ( value, uvNode, storeNode ) => {\n\n\tconst node = textureStoreBase( value, uvNode, storeNode );\n\n\tif ( storeNode !== null ) node.append();\n\n\treturn node;\n\n};\n\naddNodeClass( 'TextureStoreNode', TextureStoreNode );\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,MAAMC,gBAAgB,SAASF,WAAW,CAAC;EAE1CG,WAAWA,CAAEC,KAAK,EAAEC,MAAM,EAAqB;IAAA,IAAnBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAE3C,KAAK,CAAEH,KAAK,EAAEC,MAAO,CAAC;IAEtB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAE1B,IAAI,CAACI,kBAAkB,GAAG,IAAI;EAE/B;EAEAC,YAAYA,CAAA,CAAE;EAAA,EAAc;IAE3B,OAAO,gBAAgB;EAExB;EAEAC,KAAKA,CAAEC,OAAO,EAAG;IAEhB,KAAK,CAACD,KAAK,CAAEC,OAAQ,CAAC;IAEtB,MAAMC,UAAU,GAAGD,OAAO,CAACE,iBAAiB,CAAE,IAAK,CAAC;IACpDD,UAAU,CAACR,SAAS,GAAG,IAAI,CAACA,SAAS;EAEtC;EAEAU,QAAQA,CAAEH,OAAO,EAAEI,MAAM,EAAG;IAE3B,IAAIC,OAAO;IAEX,IAAK,IAAI,CAACZ,SAAS,KAAK,IAAI,EAAG;MAE9BY,OAAO,GAAG,IAAI,CAACC,aAAa,CAAEN,OAAQ,CAAC;IAExC,CAAC,MAAM;MAENK,OAAO,GAAG,KAAK,CAACF,QAAQ,CAAEH,OAAO,EAAEI,MAAO,CAAC;IAE5C;IAEA,OAAOC,OAAO;EAEf;EAEAC,aAAaA,CAAEN,OAAO,EAAG;IAExB,MAAMC,UAAU,GAAGD,OAAO,CAACE,iBAAiB,CAAE,IAAK,CAAC;IAEpD,MAAM;MAAEV,MAAM;MAAEC;IAAU,CAAC,GAAGQ,UAAU;IAExC,MAAMM,eAAe,GAAG,KAAK,CAACJ,QAAQ,CAAEH,OAAO,EAAE,UAAW,CAAC;IAC7D,MAAMQ,SAAS,GAAGhB,MAAM,CAACiB,KAAK,CAAET,OAAO,EAAE,OAAQ,CAAC;IAClD,MAAMU,YAAY,GAAGjB,SAAS,CAACgB,KAAK,CAAET,OAAO,EAAE,MAAO,CAAC;IAEvD,MAAMK,OAAO,GAAGL,OAAO,CAACW,oBAAoB,CAAEX,OAAO,EAAEO,eAAe,EAAEC,SAAS,EAAEE,YAAa,CAAC;IAEjGV,OAAO,CAACY,eAAe,CAAEP,OAAQ,CAAC;EAEnC;AAED;AAEA,eAAehB,gBAAgB;AAE/B,MAAMwB,gBAAgB,GAAGzB,SAAS,CAAEC,gBAAiB,CAAC;AAEtD,OAAO,MAAMyB,YAAY,GAAGA,CAAEvB,KAAK,EAAEC,MAAM,EAAEC,SAAS,KAAM;EAE3D,MAAMsB,IAAI,GAAGF,gBAAgB,CAAEtB,KAAK,EAAEC,MAAM,EAAEC,SAAU,CAAC;EAEzD,IAAKA,SAAS,KAAK,IAAI,EAAGsB,IAAI,CAACC,MAAM,CAAC,CAAC;EAEvC,OAAOD,IAAI;AAEZ,CAAC;AAED7B,YAAY,CAAE,kBAAkB,EAAEG,gBAAiB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}