{"ast":null,"code":"import Node, { addNodeClass } from './Node.js';\nimport { varying } from './VaryingNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass IndexNode extends Node {\n  constructor(scope) {\n    super('uint');\n    this.scope = scope;\n    this.isInstanceIndexNode = true;\n  }\n  generate(builder) {\n    const nodeType = this.getNodeType(builder);\n    const scope = this.scope;\n    let propertyName;\n    if (scope === IndexNode.VERTEX) {\n      propertyName = builder.getVertexIndex();\n    } else if (scope === IndexNode.INSTANCE) {\n      propertyName = builder.getInstanceIndex();\n    } else {\n      throw new Error('THREE.IndexNode: Unknown scope: ' + scope);\n    }\n    let output;\n    if (builder.shaderStage === 'vertex' || builder.shaderStage === 'compute') {\n      output = propertyName;\n    } else {\n      const nodeVarying = varying(this);\n      output = nodeVarying.build(builder, nodeType);\n    }\n    return output;\n  }\n}\nIndexNode.VERTEX = 'vertex';\nIndexNode.INSTANCE = 'instance';\nexport default IndexNode;\nexport const vertexIndex = nodeImmutable(IndexNode, IndexNode.VERTEX);\nexport const instanceIndex = nodeImmutable(IndexNode, IndexNode.INSTANCE);\naddNodeClass('IndexNode', IndexNode);","map":{"version":3,"names":["Node","addNodeClass","varying","nodeImmutable","IndexNode","constructor","scope","isInstanceIndexNode","generate","builder","nodeType","getNodeType","propertyName","VERTEX","getVertexIndex","INSTANCE","getInstanceIndex","Error","output","shaderStage","nodeVarying","build","vertexIndex","instanceIndex"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/core/IndexNode.js"],"sourcesContent":["import Node, { addNodeClass } from './Node.js';\nimport { varying } from './VaryingNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\n\nclass IndexNode extends Node {\n\n\tconstructor( scope ) {\n\n\t\tsuper( 'uint' );\n\n\t\tthis.scope = scope;\n\n\t\tthis.isInstanceIndexNode = true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst nodeType = this.getNodeType( builder );\n\t\tconst scope = this.scope;\n\n\t\tlet propertyName;\n\n\t\tif ( scope === IndexNode.VERTEX ) {\n\n\t\t\tpropertyName = builder.getVertexIndex();\n\n\t\t} else if ( scope === IndexNode.INSTANCE ) {\n\n\t\t\tpropertyName = builder.getInstanceIndex();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.IndexNode: Unknown scope: ' + scope );\n\n\t\t}\n\n\t\tlet output;\n\n\t\tif ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {\n\n\t\t\toutput = propertyName;\n\n\t\t} else {\n\n\t\t\tconst nodeVarying = varying( this );\n\n\t\t\toutput = nodeVarying.build( builder, nodeType );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nIndexNode.VERTEX = 'vertex';\nIndexNode.INSTANCE = 'instance';\n\nexport default IndexNode;\n\nexport const vertexIndex = nodeImmutable( IndexNode, IndexNode.VERTEX );\nexport const instanceIndex = nodeImmutable( IndexNode, IndexNode.INSTANCE );\n\naddNodeClass( 'IndexNode', IndexNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,WAAW;AAC9C,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,aAAa,QAAQ,6BAA6B;AAE3D,MAAMC,SAAS,SAASJ,IAAI,CAAC;EAE5BK,WAAWA,CAAEC,KAAK,EAAG;IAEpB,KAAK,CAAE,MAAO,CAAC;IAEf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACC,mBAAmB,GAAG,IAAI;EAEhC;EAEAC,QAAQA,CAAEC,OAAO,EAAG;IAEnB,MAAMC,QAAQ,GAAG,IAAI,CAACC,WAAW,CAAEF,OAAQ,CAAC;IAC5C,MAAMH,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAIM,YAAY;IAEhB,IAAKN,KAAK,KAAKF,SAAS,CAACS,MAAM,EAAG;MAEjCD,YAAY,GAAGH,OAAO,CAACK,cAAc,CAAC,CAAC;IAExC,CAAC,MAAM,IAAKR,KAAK,KAAKF,SAAS,CAACW,QAAQ,EAAG;MAE1CH,YAAY,GAAGH,OAAO,CAACO,gBAAgB,CAAC,CAAC;IAE1C,CAAC,MAAM;MAEN,MAAM,IAAIC,KAAK,CAAE,kCAAkC,GAAGX,KAAM,CAAC;IAE9D;IAEA,IAAIY,MAAM;IAEV,IAAKT,OAAO,CAACU,WAAW,KAAK,QAAQ,IAAIV,OAAO,CAACU,WAAW,KAAK,SAAS,EAAG;MAE5ED,MAAM,GAAGN,YAAY;IAEtB,CAAC,MAAM;MAEN,MAAMQ,WAAW,GAAGlB,OAAO,CAAE,IAAK,CAAC;MAEnCgB,MAAM,GAAGE,WAAW,CAACC,KAAK,CAAEZ,OAAO,EAAEC,QAAS,CAAC;IAEhD;IAEA,OAAOQ,MAAM;EAEd;AAED;AAEAd,SAAS,CAACS,MAAM,GAAG,QAAQ;AAC3BT,SAAS,CAACW,QAAQ,GAAG,UAAU;AAE/B,eAAeX,SAAS;AAExB,OAAO,MAAMkB,WAAW,GAAGnB,aAAa,CAAEC,SAAS,EAAEA,SAAS,CAACS,MAAO,CAAC;AACvE,OAAO,MAAMU,aAAa,GAAGpB,aAAa,CAAEC,SAAS,EAAEA,SAAS,CAACW,QAAS,CAAC;AAE3Ed,YAAY,CAAE,WAAW,EAAEG,SAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}