{"ast":null,"code":"import _classCallCheck from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node, { addNodeClass } from './Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nvar VarNode = /*#__PURE__*/function (_Node) {\n  _inherits(VarNode, _Node);\n  var _super = _createSuper(VarNode);\n  function VarNode(node) {\n    var _this;\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    _classCallCheck(this, VarNode);\n    _this = _super.call(this);\n    _this.node = node;\n    _this.name = name;\n    _this.isVarNode = true;\n    return _this;\n  }\n  _createClass(VarNode, [{\n    key: \"isGlobal\",\n    value: function isGlobal() {\n      return true;\n    }\n  }, {\n    key: \"getHash\",\n    value: function getHash(builder) {\n      return this.name || _get(_getPrototypeOf(VarNode.prototype), \"getHash\", this).call(this, builder);\n    }\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      return this.node.getNodeType(builder);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var node = this.node,\n        name = this.name;\n      var nodeVar = builder.getVarFromNode(this, name, builder.getVectorType(this.getNodeType(builder)));\n      var propertyName = builder.getPropertyName(nodeVar);\n      var snippet = node.build(builder, nodeVar.type);\n      builder.addLineFlowCode(\"\".concat(propertyName, \" = \").concat(snippet));\n      return propertyName;\n    }\n  }]);\n  return VarNode;\n}(Node);\nexport default VarNode;\nexport var temp = nodeProxy(VarNode);\naddNodeElement('temp', temp); // @TODO: Will be removed in the future\naddNodeElement('toVar', function () {\n  return temp.apply(void 0, arguments).append();\n});\naddNodeClass('VarNode', VarNode);","map":{"version":3,"names":["Node","addNodeClass","addNodeElement","nodeProxy","VarNode","_Node","_inherits","_super","_createSuper","node","_this","name","arguments","length","undefined","_classCallCheck","call","isVarNode","_createClass","key","value","isGlobal","getHash","builder","_get","_getPrototypeOf","prototype","getNodeType","generate","nodeVar","getVarFromNode","getVectorType","propertyName","getPropertyName","snippet","build","type","addLineFlowCode","concat","temp","apply","append"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/core/VarNode.js"],"sourcesContent":["import Node, { addNodeClass } from './Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\n\nclass VarNode extends Node {\n\n\tconstructor( node, name = null ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.name = name;\n\n\t\tthis.isVarNode = true;\n\n\t}\n\n\tisGlobal() {\n\n\t\treturn true;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { node, name } = this;\n\n\t\tconst nodeVar = builder.getVarFromNode( this, name, builder.getVectorType( this.getNodeType( builder ) ) );\n\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\tconst snippet = node.build( builder, nodeVar.type );\n\n\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\n\n\t\treturn propertyName;\n\n\t}\n\n}\n\nexport default VarNode;\n\nexport const temp = nodeProxy( VarNode );\n\naddNodeElement( 'temp', temp ); // @TODO: Will be removed in the future\naddNodeElement( 'toVar', ( ...params ) => temp( ...params ).append() );\n\naddNodeClass( 'VarNode', VarNode );\n"],"mappings":";;;;;;AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,WAAW;AAC9C,SAASC,cAAc,EAAEC,SAAS,QAAQ,6BAA6B;AAAC,IAElEC,OAAO,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,OAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,OAAA;EAEZ,SAAAA,QAAaK,IAAI,EAAgB;IAAA,IAAAC,KAAA;IAAA,IAAdC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAAAG,eAAA,OAAAX,OAAA;IAE7BM,KAAA,GAAAH,MAAA,CAAAS,IAAA;IAEAN,KAAA,CAAKD,IAAI,GAAGA,IAAI;IAChBC,KAAA,CAAKC,IAAI,GAAGA,IAAI;IAEhBD,KAAA,CAAKO,SAAS,GAAG,IAAI;IAAC,OAAAP,KAAA;EAEvB;EAACQ,YAAA,CAAAd,OAAA;IAAAe,GAAA;IAAAC,KAAA,EAED,SAAAC,SAAA,EAAW;MAEV,OAAO,IAAI;IAEZ;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAED,SAAAE,QAASC,OAAO,EAAG;MAElB,OAAO,IAAI,CAACZ,IAAI,IAAAa,IAAA,CAAAC,eAAA,CAAArB,OAAA,CAAAsB,SAAA,oBAAAV,IAAA,OAAmBO,OAAO,CAAE;IAE7C;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAO,YAAaJ,OAAO,EAAG;MAEtB,OAAO,IAAI,CAACd,IAAI,CAACkB,WAAW,CAAEJ,OAAQ,CAAC;IAExC;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAQ,SAAUL,OAAO,EAAG;MAEnB,IAAQd,IAAI,GAAW,IAAI,CAAnBA,IAAI;QAAEE,IAAI,GAAK,IAAI,CAAbA,IAAI;MAElB,IAAMkB,OAAO,GAAGN,OAAO,CAACO,cAAc,CAAE,IAAI,EAAEnB,IAAI,EAAEY,OAAO,CAACQ,aAAa,CAAE,IAAI,CAACJ,WAAW,CAAEJ,OAAQ,CAAE,CAAE,CAAC;MAE1G,IAAMS,YAAY,GAAGT,OAAO,CAACU,eAAe,CAAEJ,OAAQ,CAAC;MAEvD,IAAMK,OAAO,GAAGzB,IAAI,CAAC0B,KAAK,CAAEZ,OAAO,EAAEM,OAAO,CAACO,IAAK,CAAC;MAEnDb,OAAO,CAACc,eAAe,IAAAC,MAAA,CAAKN,YAAY,SAAAM,MAAA,CAAMJ,OAAO,CAAG,CAAC;MAEzD,OAAOF,YAAY;IAEpB;EAAC;EAAA,OAAA5B,OAAA;AAAA,EA7CoBJ,IAAI;AAiD1B,eAAeI,OAAO;AAEtB,OAAO,IAAMmC,IAAI,GAAGpC,SAAS,CAAEC,OAAQ,CAAC;AAExCF,cAAc,CAAE,MAAM,EAAEqC,IAAK,CAAC,CAAC,CAAC;AAChCrC,cAAc,CAAE,OAAO,EAAE;EAAA,OAAiBqC,IAAI,CAAAC,KAAA,SAAA5B,SAAY,CAAC,CAAC6B,MAAM,CAAC,CAAC;AAAA,CAAC,CAAC;AAEtExC,YAAY,CAAE,SAAS,EAAEG,OAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}