{"ast":null,"code":"import _classCallCheck from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { nodeImmutable, vec2 } from '../shadernode/ShaderNode.js';\nimport { Vector2, Vector4 } from 'three';\nvar resolution, viewportResult;\nvar ViewportNode = /*#__PURE__*/function (_Node) {\n  _inherits(ViewportNode, _Node);\n  var _super = _createSuper(ViewportNode);\n  function ViewportNode(scope) {\n    var _this;\n    _classCallCheck(this, ViewportNode);\n    _this = _super.call(this);\n    _this.scope = scope;\n    _this.isViewportNode = true;\n    return _this;\n  }\n  _createClass(ViewportNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType() {\n      return this.scope === ViewportNode.VIEWPORT ? 'vec4' : 'vec2';\n    }\n  }, {\n    key: \"getUpdateType\",\n    value: function getUpdateType() {\n      var updateType = NodeUpdateType.NONE;\n      if (this.scope === ViewportNode.RESOLUTION || this.scope === ViewportNode.VIEWPORT) {\n        updateType = NodeUpdateType.FRAME;\n      }\n      this.updateType = updateType;\n      return updateType;\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref) {\n      var renderer = _ref.renderer;\n      if (this.scope === ViewportNode.VIEWPORT) {\n        renderer.getViewport(viewportResult);\n      } else {\n        renderer.getDrawingBufferSize(resolution);\n      }\n    }\n  }, {\n    key: \"setup\",\n    value: function setup( /*builder*/\n    ) {\n      var scope = this.scope;\n      var output = null;\n      if (scope === ViewportNode.RESOLUTION) {\n        output = uniform(resolution || (resolution = new Vector2()));\n      } else if (scope === ViewportNode.VIEWPORT) {\n        output = uniform(viewportResult || (viewportResult = new Vector4()));\n      } else {\n        output = viewportCoordinate.div(viewportResolution);\n        var outX = output.x;\n        var outY = output.y;\n        if (/bottom/i.test(scope)) outY = outY.oneMinus();\n        if (/right/i.test(scope)) outX = outX.oneMinus();\n        output = vec2(outX, outY);\n      }\n      return output;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      if (this.scope === ViewportNode.COORDINATE) {\n        var coord = builder.getFragCoord();\n        if (builder.isFlipY()) {\n          // follow webgpu standards\n\n          var _resolution = builder.getNodeProperties(viewportResolution).outputNode.build(builder);\n          coord = \"\".concat(builder.getType('vec2'), \"( \").concat(coord, \".x, \").concat(_resolution, \".y - \").concat(coord, \".y )\");\n        }\n        return coord;\n      }\n      return _get(_getPrototypeOf(ViewportNode.prototype), \"generate\", this).call(this, builder);\n    }\n  }]);\n  return ViewportNode;\n}(Node);\nViewportNode.COORDINATE = 'coordinate';\nViewportNode.RESOLUTION = 'resolution';\nViewportNode.VIEWPORT = 'viewport';\nViewportNode.TOP_LEFT = 'topLeft';\nViewportNode.BOTTOM_LEFT = 'bottomLeft';\nViewportNode.TOP_RIGHT = 'topRight';\nViewportNode.BOTTOM_RIGHT = 'bottomRight';\nexport default ViewportNode;\nexport var viewportCoordinate = nodeImmutable(ViewportNode, ViewportNode.COORDINATE);\nexport var viewportResolution = nodeImmutable(ViewportNode, ViewportNode.RESOLUTION);\nexport var viewport = nodeImmutable(ViewportNode, ViewportNode.VIEWPORT);\nexport var viewportTopLeft = nodeImmutable(ViewportNode, ViewportNode.TOP_LEFT);\nexport var viewportBottomLeft = nodeImmutable(ViewportNode, ViewportNode.BOTTOM_LEFT);\nexport var viewportTopRight = nodeImmutable(ViewportNode, ViewportNode.TOP_RIGHT);\nexport var viewportBottomRight = nodeImmutable(ViewportNode, ViewportNode.BOTTOM_RIGHT);\naddNodeClass('ViewportNode', ViewportNode);","map":{"version":3,"names":["Node","addNodeClass","NodeUpdateType","uniform","nodeImmutable","vec2","Vector2","Vector4","resolution","viewportResult","ViewportNode","_Node","_inherits","_super","_createSuper","scope","_this","_classCallCheck","call","isViewportNode","_createClass","key","value","getNodeType","VIEWPORT","getUpdateType","updateType","NONE","RESOLUTION","FRAME","update","_ref","renderer","getViewport","getDrawingBufferSize","setup","output","viewportCoordinate","div","viewportResolution","outX","x","outY","y","test","oneMinus","generate","builder","COORDINATE","coord","getFragCoord","isFlipY","getNodeProperties","outputNode","build","concat","getType","_get","_getPrototypeOf","prototype","TOP_LEFT","BOTTOM_LEFT","TOP_RIGHT","BOTTOM_RIGHT","viewport","viewportTopLeft","viewportBottomLeft","viewportTopRight","viewportBottomRight"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/display/ViewportNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { nodeImmutable, vec2 } from '../shadernode/ShaderNode.js';\n\nimport { Vector2, Vector4 } from 'three';\n\nlet resolution, viewportResult;\n\nclass ViewportNode extends Node {\n\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t\tthis.isViewportNode = true;\n\n\t}\n\n\tgetNodeType() {\n\n\t\treturn this.scope === ViewportNode.VIEWPORT ? 'vec4' : 'vec2';\n\n\t}\n\n\tgetUpdateType() {\n\n\t\tlet updateType = NodeUpdateType.NONE;\n\n\t\tif ( this.scope === ViewportNode.RESOLUTION || this.scope === ViewportNode.VIEWPORT ) {\n\n\t\t\tupdateType = NodeUpdateType.FRAME;\n\n\t\t}\n\n\t\tthis.updateType = updateType;\n\n\t\treturn updateType;\n\n\t}\n\n\tupdate( { renderer } ) {\n\n\t\tif ( this.scope === ViewportNode.VIEWPORT ) {\n\n\t\t\trenderer.getViewport( viewportResult );\n\n\t\t} else {\n\n\t\t\trenderer.getDrawingBufferSize( resolution );\n\n\t\t}\n\n\t}\n\n\tsetup( /*builder*/ ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet output = null;\n\n\t\tif ( scope === ViewportNode.RESOLUTION ) {\n\n\t\t\toutput = uniform( resolution || ( resolution = new Vector2() ) );\n\n\t\t} else if ( scope === ViewportNode.VIEWPORT ) {\n\n\t\t\toutput = uniform( viewportResult || ( viewportResult = new Vector4() ) );\n\n\t\t} else {\n\n\t\t\toutput = viewportCoordinate.div( viewportResolution );\n\n\t\t\tlet outX = output.x;\n\t\t\tlet outY = output.y;\n\n\t\t\tif ( /bottom/i.test( scope ) ) outY = outY.oneMinus();\n\t\t\tif ( /right/i.test( scope ) ) outX = outX.oneMinus();\n\n\t\t\toutput = vec2( outX, outY );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tif ( this.scope === ViewportNode.COORDINATE ) {\n\n\t\t\tlet coord = builder.getFragCoord();\n\n\t\t\tif ( builder.isFlipY() ) {\n\n\t\t\t\t// follow webgpu standards\n\n\t\t\t\tconst resolution = builder.getNodeProperties( viewportResolution ).outputNode.build( builder );\n\n\t\t\t\tcoord = `${ builder.getType( 'vec2' ) }( ${ coord }.x, ${ resolution }.y - ${ coord }.y )`;\n\n\t\t\t}\n\n\t\t\treturn coord;\n\n\t\t}\n\n\t\treturn super.generate( builder );\n\n\t}\n\n}\n\nViewportNode.COORDINATE = 'coordinate';\nViewportNode.RESOLUTION = 'resolution';\nViewportNode.VIEWPORT = 'viewport';\nViewportNode.TOP_LEFT = 'topLeft';\nViewportNode.BOTTOM_LEFT = 'bottomLeft';\nViewportNode.TOP_RIGHT = 'topRight';\nViewportNode.BOTTOM_RIGHT = 'bottomRight';\n\nexport default ViewportNode;\n\nexport const viewportCoordinate = nodeImmutable( ViewportNode, ViewportNode.COORDINATE );\nexport const viewportResolution = nodeImmutable( ViewportNode, ViewportNode.RESOLUTION );\nexport const viewport = nodeImmutable( ViewportNode, ViewportNode.VIEWPORT );\nexport const viewportTopLeft = nodeImmutable( ViewportNode, ViewportNode.TOP_LEFT );\nexport const viewportBottomLeft = nodeImmutable( ViewportNode, ViewportNode.BOTTOM_LEFT );\nexport const viewportTopRight = nodeImmutable( ViewportNode, ViewportNode.TOP_RIGHT );\nexport const viewportBottomRight = nodeImmutable( ViewportNode, ViewportNode.BOTTOM_RIGHT );\n\naddNodeClass( 'ViewportNode', ViewportNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}