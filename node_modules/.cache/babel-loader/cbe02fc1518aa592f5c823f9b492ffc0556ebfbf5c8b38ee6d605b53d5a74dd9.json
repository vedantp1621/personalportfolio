{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Material, ShaderMaterial, NoColorSpace, LinearSRGBColorSpace } from 'three';\nimport { getNodeChildren, getCacheKey } from '../core/NodeUtils.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { output, diffuseColor } from '../core/PropertyNode.js';\nimport { materialAlphaTest, materialColor, materialOpacity, materialEmissive, materialNormal } from '../accessors/MaterialNode.js';\nimport { modelViewProjection } from '../accessors/ModelViewProjectionNode.js';\nimport { transformedNormalView } from '../accessors/NormalNode.js';\nimport { instance } from '../accessors/InstanceNode.js';\nimport { positionLocal, positionView } from '../accessors/PositionNode.js';\nimport { skinning } from '../accessors/SkinningNode.js';\nimport { morph } from '../accessors/MorphNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { cubeTexture } from '../accessors/CubeTextureNode.js';\nimport { lightsNode } from '../lighting/LightsNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { float, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport AONode from '../lighting/AONode.js';\nimport { lightingContext } from '../lighting/LightingContextNode.js';\nimport EnvironmentNode from '../lighting/EnvironmentNode.js';\nimport { depthPixel } from '../display/ViewportDepthNode.js';\nimport { cameraLogDepth } from '../accessors/CameraNode.js';\nvar NodeMaterials = new Map();\nvar NodeMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(NodeMaterial, _ShaderMaterial);\n  var _super = _createSuper(NodeMaterial);\n  function NodeMaterial() {\n    var _this;\n    _classCallCheck(this, NodeMaterial);\n    _this = _super.call(this);\n    _this.isNodeMaterial = true;\n    _this.type = _this.constructor.type;\n    _this.forceSinglePass = false;\n    _this.fog = true;\n    _this.lights = true;\n    _this.normals = true;\n    _this.colorSpaced = true;\n    _this.lightsNode = null;\n    _this.envNode = null;\n    _this.colorNode = null;\n    _this.normalNode = null;\n    _this.opacityNode = null;\n    _this.backdropNode = null;\n    _this.backdropAlphaNode = null;\n    _this.alphaTestNode = null;\n    _this.positionNode = null;\n    _this.depthNode = null;\n    _this.shadowNode = null;\n    _this.outputNode = null;\n    _this.fragmentNode = null;\n    _this.vertexNode = null;\n    return _this;\n  }\n  _createClass(NodeMaterial, [{\n    key: \"customProgramCacheKey\",\n    value: function customProgramCacheKey() {\n      return this.type + getCacheKey(this);\n    }\n  }, {\n    key: \"build\",\n    value: function build(builder) {\n      this.setup(builder);\n    }\n  }, {\n    key: \"setup\",\n    value: function setup(builder) {\n      // < VERTEX STAGE >\n\n      builder.addStack();\n      builder.stack.outputNode = this.vertexNode || this.setupPosition(builder);\n      builder.addFlow('vertex', builder.removeStack());\n\n      // < FRAGMENT STAGE >\n\n      builder.addStack();\n      var resultNode;\n      if (this.fragmentNode === null) {\n        if (this.depthWrite === true) this.setupDepth(builder);\n        if (this.normals === true) this.setupNormal(builder);\n        this.setupDiffuseColor(builder);\n        this.setupVariants(builder);\n        var outgoingLightNode = this.setupLighting(builder);\n        resultNode = this.setupOutput(builder, vec4(outgoingLightNode, diffuseColor.a));\n\n        // OUTPUT NODE\n\n        output.assign(resultNode);\n\n        //\n\n        if (this.outputNode !== null) resultNode = this.outputNode;\n      } else {\n        resultNode = this.setupOutput(builder, this.fragmentNode);\n      }\n      builder.stack.outputNode = resultNode;\n      builder.addFlow('fragment', builder.removeStack());\n    }\n  }, {\n    key: \"setupDepth\",\n    value: function setupDepth(builder) {\n      var renderer = builder.renderer;\n\n      // Depth\n\n      var depthNode = this.depthNode;\n      if (depthNode === null && renderer.logarithmicDepthBuffer === true) {\n        var fragDepth = modelViewProjection().w.add(1);\n        depthNode = fragDepth.log2().mul(cameraLogDepth).mul(0.5);\n      }\n      if (depthNode !== null) {\n        depthPixel.assign(depthNode).append();\n      }\n    }\n  }, {\n    key: \"setupPosition\",\n    value: function setupPosition(builder) {\n      var object = builder.object;\n      var geometry = object.geometry;\n      builder.addStack();\n\n      // Vertex\n\n      if (geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color) {\n        morph(object).append();\n      }\n      if (object.isSkinnedMesh === true) {\n        skinning(object).append();\n      }\n      if (object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true && builder.isAvailable('instance') === true) {\n        instance(object).append();\n      }\n      if (this.positionNode !== null) {\n        positionLocal.assign(this.positionNode);\n      }\n      var mvp = modelViewProjection();\n      builder.context.vertex = builder.removeStack();\n      builder.context.mvp = mvp;\n      return mvp;\n    }\n  }, {\n    key: \"setupDiffuseColor\",\n    value: function setupDiffuseColor(_ref) {\n      var geometry = _ref.geometry;\n      var colorNode = this.colorNode ? vec4(this.colorNode) : materialColor;\n\n      // VERTEX COLORS\n\n      if (this.vertexColors === true && geometry.hasAttribute('color')) {\n        colorNode = vec4(colorNode.xyz.mul(attribute('color', 'vec3')), colorNode.a);\n      }\n\n      // COLOR\n\n      diffuseColor.assign(colorNode);\n\n      // OPACITY\n\n      var opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;\n      diffuseColor.a.assign(diffuseColor.a.mul(opacityNode));\n\n      // ALPHA TEST\n\n      if (this.alphaTestNode !== null || this.alphaTest > 0) {\n        var alphaTestNode = this.alphaTestNode !== null ? float(this.alphaTestNode) : materialAlphaTest;\n        diffuseColor.a.lessThanEqual(alphaTestNode).discard();\n      }\n    }\n  }, {\n    key: \"setupVariants\",\n    value: function setupVariants( /*builder*/\n    ) {\n\n      // Interface function.\n    }\n  }, {\n    key: \"setupNormal\",\n    value: function setupNormal() {\n      // NORMAL VIEW\n\n      if (this.flatShading === true) {\n        var normalNode = positionView.dFdx().cross(positionView.dFdy()).normalize();\n        transformedNormalView.assign(normalNode);\n      } else {\n        var _normalNode = this.normalNode ? vec3(this.normalNode) : materialNormal;\n        transformedNormalView.assign(_normalNode);\n      }\n    }\n  }, {\n    key: \"getEnvNode\",\n    value: function getEnvNode(builder) {\n      var node = null;\n      if (this.envNode) {\n        node = this.envNode;\n      } else if (this.envMap) {\n        node = this.envMap.isCubeTexture ? cubeTexture(this.envMap) : texture(this.envMap);\n      } else if (builder.environmentNode) {\n        node = builder.environmentNode;\n      }\n      return node;\n    }\n  }, {\n    key: \"setupLights\",\n    value: function setupLights(builder) {\n      var envNode = this.getEnvNode(builder);\n\n      //\n\n      var materialLightsNode = [];\n      if (envNode) {\n        materialLightsNode.push(new EnvironmentNode(envNode));\n      }\n      if (builder.material.aoMap) {\n        materialLightsNode.push(new AONode(texture(builder.material.aoMap)));\n      }\n      var lightsN = this.lightsNode || builder.lightsNode;\n      if (materialLightsNode.length > 0) {\n        lightsN = lightsNode([].concat(_toConsumableArray(lightsN.lightNodes), materialLightsNode));\n      }\n      return lightsN;\n    }\n  }, {\n    key: \"setupLightingModel\",\n    value: function setupLightingModel( /*builder*/\n    ) {\n\n      // Interface function.\n    }\n  }, {\n    key: \"setupLighting\",\n    value: function setupLighting(builder) {\n      var material = builder.material;\n      var backdropNode = this.backdropNode,\n        backdropAlphaNode = this.backdropAlphaNode,\n        emissiveNode = this.emissiveNode;\n\n      // OUTGOING LIGHT\n\n      var lights = this.lights === true || this.lightsNode !== null;\n      var lightsNode = lights ? this.setupLights(builder) : null;\n      var outgoingLightNode = diffuseColor.rgb;\n      if (lightsNode && lightsNode.hasLight !== false) {\n        var lightingModel = this.setupLightingModel(builder);\n        outgoingLightNode = lightingContext(lightsNode, lightingModel, backdropNode, backdropAlphaNode);\n      } else if (backdropNode !== null) {\n        outgoingLightNode = vec3(backdropAlphaNode !== null ? mix(outgoingLightNode, backdropNode, backdropAlphaNode) : backdropNode);\n      }\n\n      // EMISSIVE\n\n      if (emissiveNode && emissiveNode.isNode === true || material.emissive && material.emissive.isColor === true) {\n        outgoingLightNode = outgoingLightNode.add(vec3(emissiveNode ? emissiveNode : materialEmissive));\n      }\n      return outgoingLightNode;\n    }\n  }, {\n    key: \"setupOutput\",\n    value: function setupOutput(builder, outputNode) {\n      var renderer = builder.renderer;\n\n      // TONE MAPPING\n\n      var toneMappingNode = builder.toneMappingNode;\n      if (this.toneMapped === true && toneMappingNode) {\n        outputNode = vec4(toneMappingNode.context({\n          color: outputNode.rgb\n        }), outputNode.a);\n      }\n\n      // FOG\n\n      if (this.fog === true) {\n        var fogNode = builder.fogNode;\n        if (fogNode) outputNode = vec4(fogNode.mixAssign(outputNode.rgb), outputNode.a);\n      }\n\n      // ENCODING\n\n      if (this.colorSpaced === true) {\n        var outputColorSpace = renderer.currentColorSpace;\n        if (outputColorSpace !== LinearSRGBColorSpace && outputColorSpace !== NoColorSpace) {\n          outputNode = outputNode.linearToColorSpace(outputColorSpace);\n        }\n      }\n      return outputNode;\n    }\n  }, {\n    key: \"setDefaultValues\",\n    value: function setDefaultValues(material) {\n      // This approach is to reuse the native refreshUniforms*\n      // and turn available the use of features like transmission and environment in core\n\n      for (var property in material) {\n        var value = material[property];\n        if (this[property] === undefined) {\n          this[property] = value;\n          if (value && value.clone) this[property] = value.clone();\n        }\n      }\n      Object.assign(this.defines, material.defines);\n      var descriptors = Object.getOwnPropertyDescriptors(material.constructor.prototype);\n      for (var key in descriptors) {\n        if (Object.getOwnPropertyDescriptor(this.constructor.prototype, key) === undefined && descriptors[key].get !== undefined) {\n          Object.defineProperty(this.constructor.prototype, key, descriptors[key]);\n        }\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(meta) {\n      var isRoot = meta === undefined || typeof meta === 'string';\n      if (isRoot) {\n        meta = {\n          textures: {},\n          images: {},\n          nodes: {}\n        };\n      }\n      var data = Material.prototype.toJSON.call(this, meta);\n      var nodeChildren = getNodeChildren(this);\n      data.inputNodes = {};\n      var _iterator = _createForOfIteratorHelper(nodeChildren),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _step.value,\n            property = _step$value.property,\n            childNode = _step$value.childNode;\n          data.inputNodes[property] = childNode.toJSON(meta).uuid;\n        }\n\n        // TODO: Copied from Object3D.toJSON\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      function extractFromCache(cache) {\n        var values = [];\n        for (var key in cache) {\n          var _data = cache[key];\n          delete _data.metadata;\n          values.push(_data);\n        }\n        return values;\n      }\n      if (isRoot) {\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n        var nodes = extractFromCache(meta.nodes);\n        if (textures.length > 0) data.textures = textures;\n        if (images.length > 0) data.images = images;\n        if (nodes.length > 0) data.nodes = nodes;\n      }\n      return data;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      this.lightsNode = source.lightsNode;\n      this.envNode = source.envNode;\n      this.colorNode = source.colorNode;\n      this.normalNode = source.normalNode;\n      this.opacityNode = source.opacityNode;\n      this.backdropNode = source.backdropNode;\n      this.backdropAlphaNode = source.backdropAlphaNode;\n      this.alphaTestNode = source.alphaTestNode;\n      this.positionNode = source.positionNode;\n      this.depthNode = source.depthNode;\n      this.shadowNode = source.shadowNode;\n      this.outputNode = source.outputNode;\n      this.fragmentNode = source.fragmentNode;\n      this.vertexNode = source.vertexNode;\n      return _get(_getPrototypeOf(NodeMaterial.prototype), \"copy\", this).call(this, source);\n    }\n  }], [{\n    key: \"fromMaterial\",\n    value: function fromMaterial(material) {\n      if (material.isNodeMaterial === true) {\n        // is already a node material\n\n        return material;\n      }\n      var type = material.type.replace('Material', 'NodeMaterial');\n      var nodeMaterial = createNodeMaterialFromType(type);\n      if (nodeMaterial === undefined) {\n        throw new Error(\"NodeMaterial: Material \\\"\".concat(material.type, \"\\\" is not compatible.\"));\n      }\n      for (var key in material) {\n        nodeMaterial[key] = material[key];\n      }\n      return nodeMaterial;\n    }\n  }]);\n  return NodeMaterial;\n}(ShaderMaterial);\nexport default NodeMaterial;\nexport function addNodeMaterial(type, nodeMaterial) {\n  if (typeof nodeMaterial !== 'function' || !type) throw new Error(\"Node material \".concat(type, \" is not a class\"));\n  if (NodeMaterials.has(type)) {\n    console.warn(\"Redefinition of node material \".concat(type));\n    return;\n  }\n  NodeMaterials.set(type, nodeMaterial);\n  nodeMaterial.type = type;\n}\nexport function createNodeMaterialFromType(type) {\n  var Material = NodeMaterials.get(type);\n  if (Material !== undefined) {\n    return new Material();\n  }\n}\naddNodeMaterial('NodeMaterial', NodeMaterial);","map":{"version":3,"names":["Material","ShaderMaterial","NoColorSpace","LinearSRGBColorSpace","getNodeChildren","getCacheKey","attribute","output","diffuseColor","materialAlphaTest","materialColor","materialOpacity","materialEmissive","materialNormal","modelViewProjection","transformedNormalView","instance","positionLocal","positionView","skinning","morph","texture","cubeTexture","lightsNode","mix","float","vec3","vec4","AONode","lightingContext","EnvironmentNode","depthPixel","cameraLogDepth","NodeMaterials","Map","NodeMaterial","_ShaderMaterial","_inherits","_super","_createSuper","_this","_classCallCheck","call","isNodeMaterial","type","constructor","forceSinglePass","fog","lights","normals","colorSpaced","envNode","colorNode","normalNode","opacityNode","backdropNode","backdropAlphaNode","alphaTestNode","positionNode","depthNode","shadowNode","outputNode","fragmentNode","vertexNode","_createClass","key","value","customProgramCacheKey","build","builder","setup","addStack","stack","setupPosition","addFlow","removeStack","resultNode","depthWrite","setupDepth","setupNormal","setupDiffuseColor","setupVariants","outgoingLightNode","setupLighting","setupOutput","a","assign","renderer","logarithmicDepthBuffer","fragDepth","w","add","log2","mul","append","object","geometry","morphAttributes","position","normal","color","isSkinnedMesh","instanceMatrix","isInstancedBufferAttribute","isAvailable","mvp","context","vertex","_ref","vertexColors","hasAttribute","xyz","alphaTest","lessThanEqual","discard","flatShading","dFdx","cross","dFdy","normalize","getEnvNode","node","envMap","isCubeTexture","environmentNode","setupLights","materialLightsNode","push","material","aoMap","lightsN","length","concat","_toConsumableArray","lightNodes","setupLightingModel","emissiveNode","rgb","hasLight","lightingModel","isNode","emissive","isColor","toneMappingNode","toneMapped","fogNode","mixAssign","outputColorSpace","currentColorSpace","linearToColorSpace","setDefaultValues","property","undefined","clone","Object","defines","descriptors","getOwnPropertyDescriptors","prototype","getOwnPropertyDescriptor","get","defineProperty","toJSON","meta","isRoot","textures","images","nodes","data","nodeChildren","inputNodes","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","childNode","uuid","err","e","f","extractFromCache","cache","values","metadata","copy","source","_get","_getPrototypeOf","fromMaterial","replace","nodeMaterial","createNodeMaterialFromType","Error","addNodeMaterial","has","console","warn","set"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/materials/NodeMaterial.js"],"sourcesContent":["import { Material, ShaderMaterial, NoColorSpace, LinearSRGBColorSpace } from 'three';\nimport { getNodeChildren, getCacheKey } from '../core/NodeUtils.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { output, diffuseColor } from '../core/PropertyNode.js';\nimport { materialAlphaTest, materialColor, materialOpacity, materialEmissive, materialNormal } from '../accessors/MaterialNode.js';\nimport { modelViewProjection } from '../accessors/ModelViewProjectionNode.js';\nimport { transformedNormalView } from '../accessors/NormalNode.js';\nimport { instance } from '../accessors/InstanceNode.js';\nimport { positionLocal, positionView } from '../accessors/PositionNode.js';\nimport { skinning } from '../accessors/SkinningNode.js';\nimport { morph } from '../accessors/MorphNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { cubeTexture } from '../accessors/CubeTextureNode.js';\nimport { lightsNode } from '../lighting/LightsNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { float, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport AONode from '../lighting/AONode.js';\nimport { lightingContext } from '../lighting/LightingContextNode.js';\nimport EnvironmentNode from '../lighting/EnvironmentNode.js';\nimport { depthPixel } from '../display/ViewportDepthNode.js';\nimport { cameraLogDepth } from '../accessors/CameraNode.js';\n\nconst NodeMaterials = new Map();\n\nclass NodeMaterial extends ShaderMaterial {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isNodeMaterial = true;\n\n\t\tthis.type = this.constructor.type;\n\n\t\tthis.forceSinglePass = false;\n\n\t\tthis.fog = true;\n\t\tthis.lights = true;\n\t\tthis.normals = true;\n\n\t\tthis.colorSpaced = true;\n\n\t\tthis.lightsNode = null;\n\t\tthis.envNode = null;\n\n\t\tthis.colorNode = null;\n\t\tthis.normalNode = null;\n\t\tthis.opacityNode = null;\n\t\tthis.backdropNode = null;\n\t\tthis.backdropAlphaNode = null;\n\t\tthis.alphaTestNode = null;\n\n\t\tthis.positionNode = null;\n\n\t\tthis.depthNode = null;\n\t\tthis.shadowNode = null;\n\n\t\tthis.outputNode = null;\n\n\t\tthis.fragmentNode = null;\n\t\tthis.vertexNode = null;\n\n\t}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.type + getCacheKey( this );\n\n\t}\n\n\tbuild( builder ) {\n\n\t\tthis.setup( builder );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\t// < VERTEX STAGE >\n\n\t\tbuilder.addStack();\n\n\t\tbuilder.stack.outputNode = this.vertexNode || this.setupPosition( builder );\n\n\t\tbuilder.addFlow( 'vertex', builder.removeStack() );\n\n\t\t// < FRAGMENT STAGE >\n\n\t\tbuilder.addStack();\n\n\t\tlet resultNode;\n\n\t\tif ( this.fragmentNode === null ) {\n\n\t\t\tif ( this.depthWrite === true ) this.setupDepth( builder );\n\n\t\t\tif ( this.normals === true ) this.setupNormal( builder );\n\n\t\t\tthis.setupDiffuseColor( builder );\n\t\t\tthis.setupVariants( builder );\n\n\t\t\tconst outgoingLightNode = this.setupLighting( builder );\n\n\t\t\tresultNode = this.setupOutput( builder, vec4( outgoingLightNode, diffuseColor.a ) );\n\n\t\t\t// OUTPUT NODE\n\n\t\t\toutput.assign( resultNode );\n\n\t\t\t//\n\n\t\t\tif ( this.outputNode !== null ) resultNode = this.outputNode;\n\n\t\t} else {\n\n\t\t\tresultNode = this.setupOutput( builder, this.fragmentNode );\n\n\t\t}\n\n\t\tbuilder.stack.outputNode = resultNode;\n\n\t\tbuilder.addFlow( 'fragment', builder.removeStack() );\n\n\t}\n\n\tsetupDepth( builder ) {\n\n\t\tconst { renderer } = builder;\n\n\t\t// Depth\n\n\t\tlet depthNode = this.depthNode;\n\n\t\tif ( depthNode === null && renderer.logarithmicDepthBuffer === true ) {\n\n\t\t\tconst fragDepth = modelViewProjection().w.add( 1 );\n\n\t\t\tdepthNode = fragDepth.log2().mul( cameraLogDepth ).mul( 0.5 );\n\n\t\t}\n\n\t\tif ( depthNode !== null ) {\n\n\t\t\tdepthPixel.assign( depthNode ).append();\n\n\t\t}\n\n\t}\n\n\tsetupPosition( builder ) {\n\n\t\tconst { object } = builder;\n\t\tconst geometry = object.geometry;\n\n\t\tbuilder.addStack();\n\n\t\t// Vertex\n\n\t\tif ( geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color ) {\n\n\t\t\tmorph( object ).append();\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\tskinning( object ).append();\n\n\t\t}\n\n\t\tif ( ( object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true ) && builder.isAvailable( 'instance' ) === true ) {\n\n\t\t\tinstance( object ).append();\n\n\t\t}\n\n\t\tif ( this.positionNode !== null ) {\n\n\t\t\tpositionLocal.assign( this.positionNode );\n\n\t\t}\n\n\t\tconst mvp = modelViewProjection();\n\n\t\tbuilder.context.vertex = builder.removeStack();\n\t\tbuilder.context.mvp = mvp;\n\n\t\treturn mvp;\n\n\t}\n\n\tsetupDiffuseColor( { geometry } ) {\n\n\t\tlet colorNode = this.colorNode ? vec4( this.colorNode ) : materialColor;\n\n\t\t// VERTEX COLORS\n\n\t\tif ( this.vertexColors === true && geometry.hasAttribute( 'color' ) ) {\n\n\t\t\tcolorNode = vec4( colorNode.xyz.mul( attribute( 'color', 'vec3' ) ), colorNode.a );\n\n\t\t}\n\n\t\t// COLOR\n\n\t\tdiffuseColor.assign( colorNode );\n\n\t\t// OPACITY\n\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\n\t\tdiffuseColor.a.assign( diffuseColor.a.mul( opacityNode ) );\n\n\t\t// ALPHA TEST\n\n\t\tif ( this.alphaTestNode !== null || this.alphaTest > 0 ) {\n\n\t\t\tconst alphaTestNode = this.alphaTestNode !== null ? float( this.alphaTestNode ) : materialAlphaTest;\n\n\t\t\tdiffuseColor.a.lessThanEqual( alphaTestNode ).discard();\n\n\t\t}\n\n\t}\n\n\tsetupVariants( /*builder*/ ) {\n\n\t\t// Interface function.\n\n\t}\n\n\tsetupNormal() {\n\n\t\t// NORMAL VIEW\n\n\t\tif ( this.flatShading === true ) {\n\n\t\t\tconst normalNode = positionView.dFdx().cross( positionView.dFdy() ).normalize();\n\n\t\t\ttransformedNormalView.assign( normalNode );\n\n\t\t} else {\n\n\t\t\tconst normalNode = this.normalNode ? vec3( this.normalNode ) : materialNormal;\n\n\t\t\ttransformedNormalView.assign( normalNode );\n\n\t\t}\n\n\t}\n\n\tgetEnvNode( builder ) {\n\n\t\tlet node = null;\n\n\t\tif ( this.envNode ) {\n\n\t\t\tnode = this.envNode;\n\n\t\t} else if ( this.envMap ) {\n\n\t\t\tnode = this.envMap.isCubeTexture ? cubeTexture( this.envMap ) : texture( this.envMap );\n\n\t\t} else if ( builder.environmentNode ) {\n\n\t\t\tnode = builder.environmentNode;\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tsetupLights( builder ) {\n\n\t\tconst envNode = this.getEnvNode( builder );\n\n\t\t//\n\n\t\tconst materialLightsNode = [];\n\n\t\tif ( envNode ) {\n\n\t\t\tmaterialLightsNode.push( new EnvironmentNode( envNode ) );\n\n\t\t}\n\n\t\tif ( builder.material.aoMap ) {\n\n\t\t\tmaterialLightsNode.push( new AONode( texture( builder.material.aoMap ) ) );\n\n\t\t}\n\n\t\tlet lightsN = this.lightsNode || builder.lightsNode;\n\n\t\tif ( materialLightsNode.length > 0 ) {\n\n\t\t\tlightsN = lightsNode( [ ...lightsN.lightNodes, ...materialLightsNode ] );\n\n\t\t}\n\n\t\treturn lightsN;\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\t// Interface function.\n\n\t}\n\n\tsetupLighting( builder ) {\n\n\t\tconst { material } = builder;\n\t\tconst { backdropNode, backdropAlphaNode, emissiveNode } = this;\n\n\t\t// OUTGOING LIGHT\n\n\t\tconst lights = this.lights === true || this.lightsNode !== null;\n\n\t\tconst lightsNode = lights ? this.setupLights( builder ) : null;\n\n\t\tlet outgoingLightNode = diffuseColor.rgb;\n\n\t\tif ( lightsNode && lightsNode.hasLight !== false ) {\n\n\t\t\tconst lightingModel = this.setupLightingModel( builder );\n\n\t\t\toutgoingLightNode = lightingContext( lightsNode, lightingModel, backdropNode, backdropAlphaNode );\n\n\t\t} else if ( backdropNode !== null ) {\n\n\t\t\toutgoingLightNode = vec3( backdropAlphaNode !== null ? mix( outgoingLightNode, backdropNode, backdropAlphaNode ) : backdropNode );\n\n\t\t}\n\n\t\t// EMISSIVE\n\n\t\tif ( ( emissiveNode && emissiveNode.isNode === true ) || ( material.emissive && material.emissive.isColor === true ) ) {\n\n\t\t\toutgoingLightNode = outgoingLightNode.add( vec3( emissiveNode ? emissiveNode : materialEmissive ) );\n\n\t\t}\n\n\t\treturn outgoingLightNode;\n\n\t}\n\n\tsetupOutput( builder, outputNode ) {\n\n\t\tconst renderer = builder.renderer;\n\n\t\t// TONE MAPPING\n\n\t\tconst toneMappingNode = builder.toneMappingNode;\n\n\t\tif ( this.toneMapped === true && toneMappingNode ) {\n\n\t\t\toutputNode = vec4( toneMappingNode.context( { color: outputNode.rgb } ), outputNode.a );\n\n\t\t}\n\n\t\t// FOG\n\n\t\tif ( this.fog === true ) {\n\n\t\t\tconst fogNode = builder.fogNode;\n\n\t\t\tif ( fogNode ) outputNode = vec4( fogNode.mixAssign( outputNode.rgb ), outputNode.a );\n\n\t\t}\n\n\t\t// ENCODING\n\n\t\tif ( this.colorSpaced === true ) {\n\n\t\t\tconst outputColorSpace = renderer.currentColorSpace;\n\n\t\t\tif ( outputColorSpace !== LinearSRGBColorSpace && outputColorSpace !== NoColorSpace ) {\n\n\t\t\t\toutputNode = outputNode.linearToColorSpace( outputColorSpace );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n\tsetDefaultValues( material ) {\n\n\t\t// This approach is to reuse the native refreshUniforms*\n\t\t// and turn available the use of features like transmission and environment in core\n\n\t\tfor ( const property in material ) {\n\n\t\t\tconst value = material[ property ];\n\n\t\t\tif ( this[ property ] === undefined ) {\n\n\t\t\t\tthis[ property ] = value;\n\n\t\t\t\tif ( value && value.clone ) this[ property ] = value.clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tObject.assign( this.defines, material.defines );\n\n\t\tconst descriptors = Object.getOwnPropertyDescriptors( material.constructor.prototype );\n\n\t\tfor ( const key in descriptors ) {\n\n\t\t\tif ( Object.getOwnPropertyDescriptor( this.constructor.prototype, key ) === undefined &&\n\t\t\t     descriptors[ key ].get !== undefined ) {\n\n\t\t\t\tObject.defineProperty( this.constructor.prototype, key, descriptors[ key ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = Material.prototype.toJSON.call( this, meta );\n\t\tconst nodeChildren = getNodeChildren( this );\n\n\t\tdata.inputNodes = {};\n\n\t\tfor ( const { property, childNode } of nodeChildren ) {\n\n\t\t\tdata.inputNodes[ property ] = childNode.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.lightsNode = source.lightsNode;\n\t\tthis.envNode = source.envNode;\n\n\t\tthis.colorNode = source.colorNode;\n\t\tthis.normalNode = source.normalNode;\n\t\tthis.opacityNode = source.opacityNode;\n\t\tthis.backdropNode = source.backdropNode;\n\t\tthis.backdropAlphaNode = source.backdropAlphaNode;\n\t\tthis.alphaTestNode = source.alphaTestNode;\n\n\t\tthis.positionNode = source.positionNode;\n\n\t\tthis.depthNode = source.depthNode;\n\t\tthis.shadowNode = source.shadowNode;\n\n\t\tthis.outputNode = source.outputNode;\n\n\t\tthis.fragmentNode = source.fragmentNode;\n\t\tthis.vertexNode = source.vertexNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n\tstatic fromMaterial( material ) {\n\n\t\tif ( material.isNodeMaterial === true ) { // is already a node material\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tconst type = material.type.replace( 'Material', 'NodeMaterial' );\n\n\t\tconst nodeMaterial = createNodeMaterialFromType( type );\n\n\t\tif ( nodeMaterial === undefined ) {\n\n\t\t\tthrow new Error( `NodeMaterial: Material \"${ material.type }\" is not compatible.` );\n\n\t\t}\n\n\t\tfor ( const key in material ) {\n\n\t\t\tnodeMaterial[ key ] = material[ key ];\n\n\t\t}\n\n\t\treturn nodeMaterial;\n\n\t}\n\n}\n\nexport default NodeMaterial;\n\nexport function addNodeMaterial( type, nodeMaterial ) {\n\n\tif ( typeof nodeMaterial !== 'function' || ! type ) throw new Error( `Node material ${ type } is not a class` );\n\tif ( NodeMaterials.has( type ) ) {\n\n\t\tconsole.warn( `Redefinition of node material ${ type }` );\n\t\treturn;\n\n\t}\n\n\tNodeMaterials.set( type, nodeMaterial );\n\tnodeMaterial.type = type;\n\n}\n\nexport function createNodeMaterialFromType( type ) {\n\n\tconst Material = NodeMaterials.get( type );\n\n\tif ( Material !== undefined ) {\n\n\t\treturn new Material();\n\n\t}\n\n}\n\naddNodeMaterial( 'NodeMaterial', NodeMaterial );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}