{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { add } from '../math/OperatorNode.js';\nimport { normalLocal } from '../accessors/NormalNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { addNodeElement, nodeProxy, float, vec3 } from '../shadernode/ShaderNode.js';\nclass TriplanarTexturesNode extends Node {\n  constructor(textureXNode) {\n    let textureYNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let textureZNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let scaleNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : float(1);\n    let positionNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : positionLocal;\n    let normalNode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : normalLocal;\n    super('vec4');\n    this.textureXNode = textureXNode;\n    this.textureYNode = textureYNode;\n    this.textureZNode = textureZNode;\n    this.scaleNode = scaleNode;\n    this.positionNode = positionNode;\n    this.normalNode = normalNode;\n  }\n  setup() {\n    const {\n      textureXNode,\n      textureYNode,\n      textureZNode,\n      scaleNode,\n      positionNode,\n      normalNode\n    } = this;\n\n    // Ref: https://github.com/keijiro/StandardTriplanar\n\n    // Blending factor of triplanar mapping\n    let bf = normalNode.abs().normalize();\n    bf = bf.div(bf.dot(vec3(1.0)));\n\n    // Triplanar mapping\n    const tx = positionNode.yz.mul(scaleNode);\n    const ty = positionNode.zx.mul(scaleNode);\n    const tz = positionNode.xy.mul(scaleNode);\n\n    // Base color\n    const textureX = textureXNode.value;\n    const textureY = textureYNode !== null ? textureYNode.value : textureX;\n    const textureZ = textureZNode !== null ? textureZNode.value : textureX;\n    const cx = texture(textureX, tx).mul(bf.x);\n    const cy = texture(textureY, ty).mul(bf.y);\n    const cz = texture(textureZ, tz).mul(bf.z);\n    return add(cx, cy, cz);\n  }\n}\nexport default TriplanarTexturesNode;\nexport const triplanarTextures = nodeProxy(TriplanarTexturesNode);\nexport const triplanarTexture = function () {\n  return triplanarTextures(...arguments);\n};\naddNodeElement('triplanarTexture', triplanarTexture);\naddNodeClass('TriplanarTexturesNode', TriplanarTexturesNode);","map":{"version":3,"names":["Node","addNodeClass","add","normalLocal","positionLocal","texture","addNodeElement","nodeProxy","float","vec3","TriplanarTexturesNode","constructor","textureXNode","textureYNode","arguments","length","undefined","textureZNode","scaleNode","positionNode","normalNode","setup","bf","abs","normalize","div","dot","tx","yz","mul","ty","zx","tz","xy","textureX","value","textureY","textureZ","cx","x","cy","y","cz","z","triplanarTextures","triplanarTexture"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/utils/TriplanarTexturesNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { add } from '../math/OperatorNode.js';\nimport { normalLocal } from '../accessors/NormalNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { addNodeElement, nodeProxy, float, vec3 } from '../shadernode/ShaderNode.js';\n\nclass TriplanarTexturesNode extends Node {\n\n\tconstructor( textureXNode, textureYNode = null, textureZNode = null, scaleNode = float( 1 ), positionNode = positionLocal, normalNode = normalLocal ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.textureXNode = textureXNode;\n\t\tthis.textureYNode = textureYNode;\n\t\tthis.textureZNode = textureZNode;\n\n\t\tthis.scaleNode = scaleNode;\n\n\t\tthis.positionNode = positionNode;\n\t\tthis.normalNode = normalNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { textureXNode, textureYNode, textureZNode, scaleNode, positionNode, normalNode } = this;\n\n\t\t// Ref: https://github.com/keijiro/StandardTriplanar\n\n\t\t// Blending factor of triplanar mapping\n\t\tlet bf = normalNode.abs().normalize();\n\t\tbf = bf.div( bf.dot( vec3( 1.0 ) ) );\n\n\t\t// Triplanar mapping\n\t\tconst tx = positionNode.yz.mul( scaleNode );\n\t\tconst ty = positionNode.zx.mul( scaleNode );\n\t\tconst tz = positionNode.xy.mul( scaleNode );\n\n\t\t// Base color\n\t\tconst textureX = textureXNode.value;\n\t\tconst textureY = textureYNode !== null ? textureYNode.value : textureX;\n\t\tconst textureZ = textureZNode !== null ? textureZNode.value : textureX;\n\n\t\tconst cx = texture( textureX, tx ).mul( bf.x );\n\t\tconst cy = texture( textureY, ty ).mul( bf.y );\n\t\tconst cz = texture( textureZ, tz ).mul( bf.z );\n\n\t\treturn add( cx, cy, cz );\n\n\t}\n\n}\n\nexport default TriplanarTexturesNode;\n\nexport const triplanarTextures = nodeProxy( TriplanarTexturesNode );\nexport const triplanarTexture = ( ...params ) => triplanarTextures( ...params );\n\naddNodeElement( 'triplanarTexture', triplanarTexture );\n\naddNodeClass( 'TriplanarTexturesNode', TriplanarTexturesNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}