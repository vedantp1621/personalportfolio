{"ast":null,"code":"import Node, { addNodeClass } from './Node.js';\nimport { nodeImmutable, nodeObject } from '../shadernode/ShaderNode.js';\nclass PropertyNode extends Node {\n  constructor(nodeType) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let varying = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super(nodeType);\n    this.name = name;\n    this.varying = varying;\n    this.isPropertyNode = true;\n  }\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n  isGlobal( /*builder*/\n  ) {\n    return true;\n  }\n  generate(builder) {\n    let nodeVar;\n    if (this.varying === true) {\n      nodeVar = builder.getVaryingFromNode(this, this.name);\n      nodeVar.needsInterpolation = true;\n    } else {\n      nodeVar = builder.getVarFromNode(this, this.name);\n    }\n    return builder.getPropertyName(nodeVar);\n  }\n}\nexport default PropertyNode;\nexport const property = (type, name) => nodeObject(new PropertyNode(type, name));\nexport const varyingProperty = (type, name) => nodeObject(new PropertyNode(type, name, true));\nexport const diffuseColor = nodeImmutable(PropertyNode, 'vec4', 'DiffuseColor');\nexport const roughness = nodeImmutable(PropertyNode, 'float', 'Roughness');\nexport const metalness = nodeImmutable(PropertyNode, 'float', 'Metalness');\nexport const clearcoat = nodeImmutable(PropertyNode, 'float', 'Clearcoat');\nexport const clearcoatRoughness = nodeImmutable(PropertyNode, 'float', 'ClearcoatRoughness');\nexport const sheen = nodeImmutable(PropertyNode, 'vec3', 'Sheen');\nexport const sheenRoughness = nodeImmutable(PropertyNode, 'float', 'SheenRoughness');\nexport const iridescence = nodeImmutable(PropertyNode, 'float', 'Iridescence');\nexport const iridescenceIOR = nodeImmutable(PropertyNode, 'float', 'IridescenceIOR');\nexport const iridescenceThickness = nodeImmutable(PropertyNode, 'float', 'IridescenceThickness');\nexport const specularColor = nodeImmutable(PropertyNode, 'color', 'SpecularColor');\nexport const shininess = nodeImmutable(PropertyNode, 'float', 'Shininess');\nexport const output = nodeImmutable(PropertyNode, 'vec4', 'Output');\nexport const dashSize = nodeImmutable(PropertyNode, 'float', 'dashSize');\nexport const gapSize = nodeImmutable(PropertyNode, 'float', 'gapSize');\nexport const pointWidth = nodeImmutable(PropertyNode, 'float', 'pointWidth');\naddNodeClass('PropertyNode', PropertyNode);","map":{"version":3,"names":["Node","addNodeClass","nodeImmutable","nodeObject","PropertyNode","constructor","nodeType","name","arguments","length","undefined","varying","isPropertyNode","getHash","builder","isGlobal","generate","nodeVar","getVaryingFromNode","needsInterpolation","getVarFromNode","getPropertyName","property","type","varyingProperty","diffuseColor","roughness","metalness","clearcoat","clearcoatRoughness","sheen","sheenRoughness","iridescence","iridescenceIOR","iridescenceThickness","specularColor","shininess","output","dashSize","gapSize","pointWidth"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/core/PropertyNode.js"],"sourcesContent":["import Node, { addNodeClass } from './Node.js';\nimport { nodeImmutable, nodeObject } from '../shadernode/ShaderNode.js';\n\nclass PropertyNode extends Node {\n\n\tconstructor( nodeType, name = null, varying = false ) {\n\n\t\tsuper( nodeType );\n\n\t\tthis.name = name;\n\t\tthis.varying = varying;\n\n\t\tthis.isPropertyNode = true;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\tisGlobal( /*builder*/ ) {\n\n\t\treturn true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tlet nodeVar;\n\n\t\tif ( this.varying === true ) {\n\n\t\t\tnodeVar = builder.getVaryingFromNode( this, this.name );\n\t\t\tnodeVar.needsInterpolation = true;\n\n\t\t} else {\n\n\t\t\tnodeVar = builder.getVarFromNode( this, this.name );\n\n\t\t}\n\n\t\treturn builder.getPropertyName( nodeVar );\n\n\t}\n\n}\n\nexport default PropertyNode;\n\nexport const property = ( type, name ) => nodeObject( new PropertyNode( type, name ) );\nexport const varyingProperty = ( type, name ) => nodeObject( new PropertyNode( type, name, true ) );\n\nexport const diffuseColor = nodeImmutable( PropertyNode, 'vec4', 'DiffuseColor' );\nexport const roughness = nodeImmutable( PropertyNode, 'float', 'Roughness' );\nexport const metalness = nodeImmutable( PropertyNode, 'float', 'Metalness' );\nexport const clearcoat = nodeImmutable( PropertyNode, 'float', 'Clearcoat' );\nexport const clearcoatRoughness = nodeImmutable( PropertyNode, 'float', 'ClearcoatRoughness' );\nexport const sheen = nodeImmutable( PropertyNode, 'vec3', 'Sheen' );\nexport const sheenRoughness = nodeImmutable( PropertyNode, 'float', 'SheenRoughness' );\nexport const iridescence = nodeImmutable( PropertyNode, 'float', 'Iridescence' );\nexport const iridescenceIOR = nodeImmutable( PropertyNode, 'float', 'IridescenceIOR' );\nexport const iridescenceThickness = nodeImmutable( PropertyNode, 'float', 'IridescenceThickness' );\nexport const specularColor = nodeImmutable( PropertyNode, 'color', 'SpecularColor' );\nexport const shininess = nodeImmutable( PropertyNode, 'float', 'Shininess' );\nexport const output = nodeImmutable( PropertyNode, 'vec4', 'Output' );\nexport const dashSize = nodeImmutable( PropertyNode, 'float', 'dashSize' );\nexport const gapSize = nodeImmutable( PropertyNode, 'float', 'gapSize' );\nexport const pointWidth = nodeImmutable( PropertyNode, 'float', 'pointWidth' );\n\naddNodeClass( 'PropertyNode', PropertyNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}