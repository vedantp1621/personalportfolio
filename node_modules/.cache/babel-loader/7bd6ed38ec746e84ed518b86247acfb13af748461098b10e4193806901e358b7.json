{"ast":null,"code":"import _classCallCheck from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { temp } from '../core/VarNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { property, varyingProperty } from '../core/PropertyNode.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialColor, materialLineScale, materialLineDashSize, materialLineGapSize, materialLineDashOffset, materialLineWidth } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix } from '../accessors/ModelNode.js';\nimport { positionGeometry } from '../accessors/PositionNode.js';\nimport { mix, smoothstep } from '../math/MathNode.js';\nimport { tslFn, float, vec2, vec3, vec4, If } from '../shadernode/ShaderNode.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { viewport } from '../display/ViewportNode.js';\nimport { dashSize, gapSize } from '../core/PropertyNode.js';\nimport { LineDashedMaterial } from 'three';\nvar defaultValues = new LineDashedMaterial();\nvar Line2NodeMaterial = /*#__PURE__*/function (_NodeMaterial) {\n  _inherits(Line2NodeMaterial, _NodeMaterial);\n  var _super = _createSuper(Line2NodeMaterial);\n  function Line2NodeMaterial() {\n    var _this;\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Line2NodeMaterial);\n    _this = _super.call(this);\n    _this.normals = false;\n    _this.lights = false;\n    _this.setDefaultValues(defaultValues);\n    _this.useAlphaToCoverage = true;\n    _this.useColor = params.vertexColors;\n    _this.useDash = params.dashed;\n    _this.useWorldUnits = false;\n    _this.dashOffset = 0;\n    _this.lineWidth = 1;\n    _this.lineColorNode = null;\n    _this.offsetNode = null;\n    _this.dashScaleNode = null;\n    _this.dashSizeNode = null;\n    _this.gapSizeNode = null;\n    _this.setupShaders();\n    _this.setValues(params);\n    return _this;\n  }\n  _createClass(Line2NodeMaterial, [{\n    key: \"setupShaders\",\n    value: function setupShaders() {\n      var _this2 = this;\n      var useAlphaToCoverage = this.alphaToCoverage;\n      var useColor = this.useColor;\n      var useDash = this.dashed;\n      var useWorldUnits = this.worldUnits;\n      var trimSegment = tslFn(function (_ref) {\n        var start = _ref.start,\n          end = _ref.end;\n        var a = cameraProjectionMatrix.element(2).element(2); // 3nd entry in 3th column\n        var b = cameraProjectionMatrix.element(3).element(2); // 3nd entry in 4th column\n        var nearEstimate = b.mul(-0.5).div(a);\n        var alpha = nearEstimate.sub(start.z).div(end.z.sub(start.z));\n        return vec4(mix(start.xyz, end.xyz, alpha), end.w);\n      });\n      this.vertexNode = tslFn(function () {\n        varyingProperty('vec2', 'vUv').assign(uv());\n        var instanceStart = attribute('instanceStart');\n        var instanceEnd = attribute('instanceEnd');\n\n        // camera space\n\n        var start = property('vec4', 'start');\n        var end = property('vec4', 'end');\n        start.assign(modelViewMatrix.mul(vec4(instanceStart, 1.0))); // force assignment into correct place in flow\n        end.assign(modelViewMatrix.mul(vec4(instanceEnd, 1.0)));\n        if (useWorldUnits) {\n          varyingProperty('vec3', 'worldStart').assign(start.xyz);\n          varyingProperty('vec3', 'worldEnd').assign(end.xyz);\n        }\n        var aspect = viewport.z.div(viewport.w);\n\n        // special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n        // clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n        // but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n        // perhaps there is a more elegant solution -- WestLangley\n\n        var perspective = cameraProjectionMatrix.element(2).element(3).equal(-1.0); // 4th entry in the 3rd column\n\n        If(perspective, function () {\n          If(start.z.lessThan(0.0).and(end.z.greaterThan(0.0)), function () {\n            end.assign(trimSegment({\n              start: start,\n              end: end\n            }));\n          }).elseif(end.z.lessThan(0.0).and(start.z.greaterThanEqual(0.0)), function () {\n            start.assign(trimSegment({\n              start: end,\n              end: start\n            }));\n          });\n        });\n\n        // clip space\n        var clipStart = cameraProjectionMatrix.mul(start);\n        var clipEnd = cameraProjectionMatrix.mul(end);\n\n        // ndc space\n        var ndcStart = clipStart.xyz.div(clipStart.w);\n        var ndcEnd = clipEnd.xyz.div(clipEnd.w);\n\n        // direction\n        var dir = ndcEnd.xy.sub(ndcStart.xy).temp();\n\n        // account for clip-space aspect ratio\n        dir.x.assign(dir.x.mul(aspect));\n        dir.assign(dir.normalize());\n        var clip = temp(vec4());\n        if (useWorldUnits) {\n          // get the offset direction as perpendicular to the view vector\n\n          var worldDir = end.xyz.sub(start.xyz).normalize();\n          var tmpFwd = mix(start.xyz, end.xyz, 0.5).normalize();\n          var worldUp = worldDir.cross(tmpFwd).normalize();\n          var worldFwd = worldDir.cross(worldUp);\n          var worldPos = varyingProperty('vec4', 'worldPos');\n          worldPos.assign(positionGeometry.y.lessThan(0.5).cond(start, end));\n\n          // height offset\n          var hw = materialLineWidth.mul(0.5);\n          worldPos.addAssign(vec4(positionGeometry.x.lessThan(0.0).cond(worldUp.mul(hw), worldUp.mul(hw).negate()), 0));\n\n          // don't extend the line if we're rendering dashes because we\n          // won't be rendering the endcaps\n          if (!useDash) {\n            // cap extension\n            worldPos.addAssign(vec4(positionGeometry.y.lessThan(0.5).cond(worldDir.mul(hw).negate(), worldDir.mul(hw)), 0));\n\n            // add width to the box\n            worldPos.addAssign(vec4(worldFwd.mul(hw), 0));\n\n            // endcaps\n            If(positionGeometry.y.greaterThan(1.0).or(positionGeometry.y.lessThan(0.0)), function () {\n              worldPos.subAssign(vec4(worldFwd.mul(2.0).mul(hw), 0));\n            });\n          }\n\n          // project the worldpos\n          clip.assign(cameraProjectionMatrix.mul(worldPos));\n\n          // shift the depth of the projected points so the line\n          // segments overlap neatly\n          var clipPose = temp(vec3());\n          clipPose.assign(positionGeometry.y.lessThan(0.5).cond(ndcStart, ndcEnd));\n          clip.z.assign(clipPose.z.mul(clip.w));\n        } else {\n          var offset = property('vec2', 'offset');\n          offset.assign(vec2(dir.y, dir.x.negate()));\n\n          // undo aspect ratio adjustment\n          dir.x.assign(dir.x.div(aspect));\n          offset.x.assign(offset.x.div(aspect));\n\n          // sign flip\n          offset.assign(positionGeometry.x.lessThan(0.0).cond(offset.negate(), offset));\n\n          // endcaps\n          If(positionGeometry.y.lessThan(0.0), function () {\n            offset.assign(offset.sub(dir));\n          }).elseif(positionGeometry.y.greaterThan(1.0), function () {\n            offset.assign(offset.add(dir));\n          });\n\n          // adjust for linewidth\n          offset.assign(offset.mul(materialLineWidth));\n\n          // adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n          offset.assign(offset.div(viewport.w));\n\n          // select end\n          clip.assign(positionGeometry.y.lessThan(0.5).cond(clipStart, clipEnd));\n\n          // back to clip space\n          offset.assign(offset.mul(clip.w));\n          clip.assign(clip.add(vec4(offset, 0, 0)));\n        }\n        return clip;\n      })();\n      var closestLineToLine = tslFn(function (_ref2) {\n        var p1 = _ref2.p1,\n          p2 = _ref2.p2,\n          p3 = _ref2.p3,\n          p4 = _ref2.p4;\n        var p13 = p1.sub(p3);\n        var p43 = p4.sub(p3);\n        var p21 = p2.sub(p1);\n        var d1343 = p13.dot(p43);\n        var d4321 = p43.dot(p21);\n        var d1321 = p13.dot(p21);\n        var d4343 = p43.dot(p43);\n        var d2121 = p21.dot(p21);\n        var denom = d2121.mul(d4343).sub(d4321.mul(d4321));\n        var numer = d1343.mul(d4321).sub(d1321.mul(d4343));\n        var mua = numer.div(denom).clamp();\n        var mub = d1343.add(d4321.mul(mua)).div(d4343).clamp();\n        return vec2(mua, mub);\n      });\n      this.fragmentNode = tslFn(function () {\n        var vUv = varyingProperty('vec2', 'vUv');\n        if (useDash) {\n          var offsetNode = _this2.offsetNode ? float(_this2.offsetNodeNode) : materialLineDashOffset;\n          var dashScaleNode = _this2.dashScaleNode ? float(_this2.dashScaleNode) : materialLineScale;\n          var dashSizeNode = _this2.dashSizeNode ? float(_this2.dashSizeNode) : materialLineDashSize;\n          var gapSizeNode = _this2.dashSizeNode ? float(_this2.dashGapNode) : materialLineGapSize;\n          dashSize.assign(dashSizeNode);\n          gapSize.assign(gapSizeNode);\n          var instanceDistanceStart = attribute('instanceDistanceStart');\n          var instanceDistanceEnd = attribute('instanceDistanceEnd');\n          var lineDistance = positionGeometry.y.lessThan(0.5).cond(dashScaleNode.mul(instanceDistanceStart), materialLineScale.mul(instanceDistanceEnd));\n          var vLineDistance = varying(lineDistance.add(materialLineDashOffset));\n          var vLineDistanceOffset = offsetNode ? vLineDistance.add(offsetNode) : vLineDistance;\n          vUv.y.lessThan(-1.0).or(vUv.y.greaterThan(1.0)).discard(); // discard endcaps\n          vLineDistanceOffset.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard(); // todo - FIX\n        }\n\n        // force assignment into correct place in flow\n        var alpha = property('float', 'alpha');\n        alpha.assign(1);\n        if (useWorldUnits) {\n          var worldStart = varyingProperty('vec3', 'worldStart');\n          var worldEnd = varyingProperty('vec3', 'worldEnd');\n\n          // Find the closest points on the view ray and the line segment\n          var rayEnd = varyingProperty('vec4', 'worldPos').xyz.normalize().mul(1e5);\n          var lineDir = worldEnd.sub(worldStart);\n          var params = closestLineToLine({\n            p1: worldStart,\n            p2: worldEnd,\n            p3: vec3(0.0, 0.0, 0.0),\n            p4: rayEnd\n          });\n          var p1 = worldStart.add(lineDir.mul(params.x));\n          var p2 = rayEnd.mul(params.y);\n          var delta = p1.sub(p2);\n          var len = delta.length();\n          var norm = len.div(materialLineWidth);\n          if (!useDash) {\n            if (useAlphaToCoverage) {\n              var dnorm = norm.fwidth();\n              alpha.assign(smoothstep(dnorm.negate().add(0.5), dnorm.add(0.5), norm).oneMinus());\n            } else {\n              norm.greaterThan(0.5).discard();\n            }\n          }\n        } else {\n          // round endcaps\n\n          if (useAlphaToCoverage) {\n            var a = vUv.x;\n            var b = vUv.y.greaterThan(0.0).cond(vUv.y.sub(1.0), vUv.y.add(1.0));\n            var len2 = a.mul(a).add(b.mul(b));\n\n            // force assignment out of following 'if' statement - to avoid uniform control flow errors\n            var dlen = property('float', 'dlen');\n            dlen.assign(len2.fwidth());\n            If(vUv.y.abs().greaterThan(1.0), function () {\n              alpha.assign(smoothstep(dlen.oneMinus(), dlen.add(1), len2).oneMinus());\n            });\n          } else {\n            If(vUv.y.abs().greaterThan(1.0), function () {\n              var a = vUv.x;\n              var b = vUv.y.greaterThan(0.0).cond(vUv.y.sub(1.0), vUv.y.add(1.0));\n              var len2 = a.mul(a).add(b.mul(b));\n              len2.greaterThan(1.0).discard();\n            });\n          }\n        }\n        var lineColorNode;\n        if (_this2.lineColorNode) {\n          lineColorNode = _this2.lineColorNode;\n        } else {\n          if (useColor) {\n            var instanceColorStart = attribute('instanceColorStart');\n            var instanceColorEnd = attribute('instanceColorEnd');\n            var instanceColor = positionGeometry.y.lessThan(0.5).cond(instanceColorStart, instanceColorEnd);\n            lineColorNode = instanceColor.mul(materialColor);\n          } else {\n            lineColorNode = materialColor;\n          }\n        }\n        return vec4(lineColorNode, alpha);\n      })();\n      this.needsUpdate = true;\n    }\n  }, {\n    key: \"worldUnits\",\n    get: function get() {\n      return this.useWorldUnits;\n    },\n    set: function set(value) {\n      if (this.useWorldUnits !== value) {\n        this.useWorldUnits = value;\n        this.setupShaders();\n      }\n    }\n  }, {\n    key: \"dashed\",\n    get: function get() {\n      return this.useDash;\n    },\n    set: function set(value) {\n      if (this.useDash !== value) {\n        this.useDash = value;\n        this.setupShaders();\n      }\n    }\n  }, {\n    key: \"alphaToCoverage\",\n    get: function get() {\n      return this.useAlphaToCoverage;\n    },\n    set: function set(value) {\n      if (this.useAlphaToCoverage !== value) {\n        this.useAlphaToCoverage = value;\n        this.setupShaders();\n      }\n    }\n  }]);\n  return Line2NodeMaterial;\n}(NodeMaterial);\nexport default Line2NodeMaterial;\naddNodeMaterial('Line2NodeMaterial', Line2NodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","temp","varying","property","varyingProperty","attribute","cameraProjectionMatrix","materialColor","materialLineScale","materialLineDashSize","materialLineGapSize","materialLineDashOffset","materialLineWidth","modelViewMatrix","positionGeometry","mix","smoothstep","tslFn","float","vec2","vec3","vec4","If","uv","viewport","dashSize","gapSize","LineDashedMaterial","defaultValues","Line2NodeMaterial","_NodeMaterial","_inherits","_super","_createSuper","_this","params","arguments","length","undefined","_classCallCheck","call","normals","lights","setDefaultValues","useAlphaToCoverage","useColor","vertexColors","useDash","dashed","useWorldUnits","dashOffset","lineWidth","lineColorNode","offsetNode","dashScaleNode","dashSizeNode","gapSizeNode","setupShaders","setValues","_createClass","key","value","_this2","alphaToCoverage","worldUnits","trimSegment","_ref","start","end","a","element","b","nearEstimate","mul","div","alpha","sub","z","xyz","w","vertexNode","assign","instanceStart","instanceEnd","aspect","perspective","equal","lessThan","and","greaterThan","elseif","greaterThanEqual","clipStart","clipEnd","ndcStart","ndcEnd","dir","xy","x","normalize","clip","worldDir","tmpFwd","worldUp","cross","worldFwd","worldPos","y","cond","hw","addAssign","negate","or","subAssign","clipPose","offset","add","closestLineToLine","_ref2","p1","p2","p3","p4","p13","p43","p21","d1343","dot","d4321","d1321","d4343","d2121","denom","numer","mua","clamp","mub","fragmentNode","vUv","offsetNodeNode","dashGapNode","instanceDistanceStart","instanceDistanceEnd","lineDistance","vLineDistance","vLineDistanceOffset","discard","mod","worldStart","worldEnd","rayEnd","lineDir","delta","len","norm","dnorm","fwidth","oneMinus","len2","dlen","abs","instanceColorStart","instanceColorEnd","instanceColor","needsUpdate","get","set"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/materials/Line2NodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { temp } from '../core/VarNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { property, varyingProperty } from '../core/PropertyNode.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialColor, materialLineScale, materialLineDashSize, materialLineGapSize, materialLineDashOffset, materialLineWidth } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix } from '../accessors/ModelNode.js';\nimport { positionGeometry } from '../accessors/PositionNode.js';\nimport { mix, smoothstep } from '../math/MathNode.js';\nimport { tslFn, float, vec2, vec3, vec4, If } from '../shadernode/ShaderNode.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { viewport } from '../display/ViewportNode.js';\nimport { dashSize, gapSize } from '../core/PropertyNode.js';\n\nimport { LineDashedMaterial } from 'three';\n\nconst defaultValues = new LineDashedMaterial();\n\nclass Line2NodeMaterial extends NodeMaterial {\n\n\tconstructor( params = {} ) {\n\n\t\tsuper();\n\n\t\tthis.normals = false;\n\t\tthis.lights = false;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.useAlphaToCoverage = true;\n\t\tthis.useColor = params.vertexColors;\n\t\tthis.useDash = params.dashed;\n\t\tthis.useWorldUnits = false;\n\n\t\tthis.dashOffset = 0;\n\t\tthis.lineWidth = 1;\n\n\t\tthis.lineColorNode = null;\n\n\t\tthis.offsetNode = null;\n\t\tthis.dashScaleNode = null;\n\t\tthis.dashSizeNode = null;\n\t\tthis.gapSizeNode = null;\n\n\t\tthis.setupShaders();\n\n\t\tthis.setValues( params );\n\n\t}\n\n\tsetupShaders() {\n\n\t\tconst useAlphaToCoverage = this.alphaToCoverage;\n\t\tconst useColor = this.useColor;\n\t\tconst useDash = this.dashed;\n\t\tconst useWorldUnits = this.worldUnits;\n\n\t\tconst trimSegment = tslFn( ( { start, end } ) => {\n\n\t\t\tconst a = cameraProjectionMatrix.element( 2 ).element( 2 ); // 3nd entry in 3th column\n\t\t\tconst b = cameraProjectionMatrix.element( 3 ).element( 2 ); // 3nd entry in 4th column\n\t\t\tconst nearEstimate = b.mul( - 0.5 ).div( a );\n\n\t\t\tconst alpha = nearEstimate.sub( start.z ).div( end.z.sub( start.z ) );\n\n\t\t\treturn vec4( mix( start.xyz, end.xyz, alpha ), end.w );\n\n\t\t} );\n\n\t\tthis.vertexNode = tslFn( () => {\n\n\t\t\tvaryingProperty( 'vec2', 'vUv' ).assign( uv() );\n\n\t\t\tconst instanceStart = attribute( 'instanceStart' );\n\t\t\tconst instanceEnd = attribute( 'instanceEnd' );\n\n\t\t\t// camera space\n\n\t\t\tconst start = property( 'vec4', 'start' );\n\t\t\tconst end = property( 'vec4', 'end' );\n\n\t\t\tstart.assign( modelViewMatrix.mul( vec4( instanceStart, 1.0 ) ) ); // force assignment into correct place in flow\n\t\t\tend.assign( modelViewMatrix.mul( vec4( instanceEnd, 1.0 ) ) );\n\n\t\t\tif ( useWorldUnits ) {\n\n\t\t\t\tvaryingProperty( 'vec3', 'worldStart' ).assign( start.xyz );\n\t\t\t\tvaryingProperty( 'vec3', 'worldEnd' ).assign( end.xyz );\n\n\t\t\t}\n\n\t\t\tconst aspect = viewport.z.div( viewport.w );\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tconst perspective = cameraProjectionMatrix.element( 2 ).element( 3 ).equal( - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tIf( perspective, () => {\n\n\t\t\t\tIf( start.z.lessThan( 0.0 ).and( end.z.greaterThan( 0.0 ) ), () => {\n\n\t\t\t\t\tend.assign( trimSegment( { start: start, end: end } ) );\n\n\t\t\t\t} ).elseif( end.z.lessThan( 0.0 ).and( start.z.greaterThanEqual( 0.0 ) ), () => {\n\n\t\t\t\t\tstart.assign( trimSegment( { start: end, end: start } ) );\n\n\t\t\t \t} );\n\n\t\t\t} );\n\n\t\t\t// clip space\n\t\t\tconst clipStart = cameraProjectionMatrix.mul( start );\n\t\t\tconst clipEnd = cameraProjectionMatrix.mul( end );\n\n\t\t\t// ndc space\n\t\t\tconst ndcStart = clipStart.xyz.div( clipStart.w );\n\t\t\tconst ndcEnd = clipEnd.xyz.div( clipEnd.w );\n\n\t\t\t// direction\n\t\t\tconst dir = ndcEnd.xy.sub( ndcStart.xy ).temp();\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x.assign( dir.x.mul( aspect ) );\n\t\t\tdir.assign( dir.normalize() );\n\n\t\t\tconst clip = temp( vec4() );\n\n\t\t\tif ( useWorldUnits ) {\n\n\t\t\t\t// get the offset direction as perpendicular to the view vector\n\n\t\t\t\tconst worldDir = end.xyz.sub( start.xyz ).normalize();\n\t\t\t\tconst tmpFwd = mix( start.xyz, end.xyz, 0.5 ).normalize();\n\t\t\t\tconst worldUp = worldDir.cross( tmpFwd ).normalize();\n\t\t\t\tconst worldFwd = worldDir.cross( worldUp );\n\n\t\t\t\tconst worldPos = varyingProperty( 'vec4', 'worldPos' );\n\n\t\t\t\tworldPos.assign( positionGeometry.y.lessThan( 0.5 ).cond( start, end) );\n\n\t\t\t\t// height offset\n\t\t\t\tconst hw = materialLineWidth.mul( 0.5 );\n\t\t\t\tworldPos.addAssign( vec4( positionGeometry.x.lessThan( 0.0 ).cond( worldUp.mul( hw ), worldUp.mul( hw ).negate() ), 0 ) );\n\n\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t// won't be rendering the endcaps\n\t\t\t\tif ( ! useDash ) {\n\n\t\t\t\t\t// cap extension\n\t\t\t\t\tworldPos.addAssign( vec4( positionGeometry.y.lessThan( 0.5 ).cond( worldDir.mul( hw ).negate(), worldDir.mul( hw ) ), 0 ) );\n\n\t\t\t\t\t// add width to the box\n\t\t\t\t\tworldPos.addAssign( vec4( worldFwd.mul( hw ), 0 ) );\n\n\t\t\t\t\t// endcaps\n\t\t\t\t\tIf( positionGeometry.y.greaterThan( 1.0 ).or( positionGeometry.y.lessThan( 0.0 ) ), () => {\n\n\t\t\t\t\t\tworldPos.subAssign( vec4( worldFwd.mul( 2.0 ).mul( hw ), 0 ) );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\t// project the worldpos\n\t\t\t\tclip.assign( cameraProjectionMatrix.mul( worldPos ) );\n\n\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t// segments overlap neatly\n\t\t\t\tconst clipPose = temp( vec3() );\n\n\t\t\t\tclipPose.assign( positionGeometry.y.lessThan( 0.5 ).cond( ndcStart, ndcEnd ) );\n\t\t\t\tclip.z.assign( clipPose.z.mul( clip.w ) );\n\n\t\t\t} else {\n\n\t\t\t\tconst offset = property( 'vec2', 'offset' );\n\n\t\t\t\toffset.assign( vec2( dir.y, dir.x.negate() ) );\n\n\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\tdir.x.assign( dir.x.div( aspect ) );\n\t\t\t\toffset.x.assign( offset.x.div( aspect ) );\n\n\t\t\t\t// sign flip\n\t\t\t\toffset.assign( positionGeometry.x.lessThan( 0.0 ).cond( offset.negate(), offset ) );\n\n\t\t\t\t// endcaps\n\t\t\t\tIf( positionGeometry.y.lessThan( 0.0 ), () => {\n\n\t\t\t\t\toffset.assign( offset.sub( dir ) );\n\n\t\t\t\t} ).elseif( positionGeometry.y.greaterThan( 1.0 ), () => {\n\n\t\t\t\t\toffset.assign( offset.add( dir ) );\n\n\t\t\t\t} );\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset.assign( offset.mul( materialLineWidth ) );\n\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\toffset.assign( offset.div( viewport.w ) );\n\n\t\t\t\t// select end\n\t\t\t\tclip.assign( positionGeometry.y.lessThan( 0.5 ).cond( clipStart, clipEnd ) );\n\n\t\t\t\t// back to clip space\n\t\t\t\toffset.assign( offset.mul( clip.w ) );\n\n\t\t\t\tclip.assign( clip.add( vec4( offset, 0, 0 ) ) );\n\n\t\t\t}\n\n\t\t\treturn clip;\n\n\t\t} )();\n\n\t\tconst closestLineToLine = tslFn( ( { p1, p2, p3, p4 } ) => {\n\n\t\t\tconst p13 = p1.sub( p3 );\n\t\t\tconst p43 = p4.sub( p3 );\n\n\t\t\tconst p21 = p2.sub( p1 );\n\n\t\t\tconst d1343 = p13.dot( p43 );\n\t\t\tconst d4321 = p43.dot( p21 );\n\t\t\tconst d1321 = p13.dot( p21 );\n\t\t\tconst d4343 = p43.dot( p43 );\n\t\t\tconst d2121 = p21.dot( p21 );\n\n\t\t\tconst denom = d2121.mul( d4343 ).sub( d4321.mul( d4321 ) );\n\t\t\tconst numer = d1343.mul( d4321 ).sub( d1321.mul( d4343 ) );\n\n\t\t\tconst mua = numer.div( denom ).clamp();\n\t\t\tconst mub = d1343.add( d4321.mul( mua ) ).div( d4343 ).clamp();\n\n\t\t\treturn vec2( mua, mub );\n\n\t\t} );\n\n\t\tthis.fragmentNode = tslFn( () => {\n\n\t\t\tconst vUv = varyingProperty( 'vec2', 'vUv' );\n\n\t\t\tif ( useDash ) {\n\n\t\t\t\tconst offsetNode = this.offsetNode ? float( this.offsetNodeNode ) : materialLineDashOffset;\n\t\t\t\tconst dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;\n\t\t\t\tconst dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;\n\t\t\t\tconst gapSizeNode = this.dashSizeNode ? float( this.dashGapNode ) : materialLineGapSize;\n\n\t\t\t\tdashSize.assign( dashSizeNode );\n\t\t\t\tgapSize.assign( gapSizeNode );\n\n\t\t\t\tconst instanceDistanceStart = attribute( 'instanceDistanceStart' );\n\t\t\t\tconst instanceDistanceEnd = attribute( 'instanceDistanceEnd' );\n\n\t\t\t\tconst lineDistance = positionGeometry.y.lessThan( 0.5 ).cond( dashScaleNode.mul( instanceDistanceStart ), materialLineScale.mul( instanceDistanceEnd ) );\n\n\t\t\t\tconst vLineDistance = varying( lineDistance.add( materialLineDashOffset ) );\n\t\t\t\tconst vLineDistanceOffset = offsetNode ? vLineDistance.add( offsetNode ) : vLineDistance;\n\n\t\t\t\tvUv.y.lessThan( - 1.0 ).or( vUv.y.greaterThan( 1.0 ) ).discard(); // discard endcaps\n\t\t\t\tvLineDistanceOffset.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard(); // todo - FIX\n\n\t\t\t}\n\n\t\t\t // force assignment into correct place in flow\n\t\t\tconst alpha = property( 'float', 'alpha' );\n\t\t\talpha.assign( 1 );\n\n\t\t\tif ( useWorldUnits ) {\n\n\t\t\t\tconst worldStart = varyingProperty( 'vec3', 'worldStart' );\n\t\t\t\tconst worldEnd = varyingProperty( 'vec3', 'worldEnd' );\n\n\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\tconst rayEnd = varyingProperty( 'vec4', 'worldPos' ).xyz.normalize().mul( 1e5 );\n\t\t\t\tconst lineDir = worldEnd.sub( worldStart );\n\t\t\t\tconst params = closestLineToLine( { p1: worldStart, p2: worldEnd, p3: vec3( 0.0, 0.0, 0.0 ), p4: rayEnd } );\n\n\t\t\t\tconst p1 = worldStart.add( lineDir.mul( params.x ) );\n\t\t\t\tconst p2 = rayEnd.mul( params.y );\n\t\t\t\tconst delta = p1.sub( p2 );\n\t\t\t\tconst len = delta.length();\n\t\t\t\tconst norm = len.div( materialLineWidth );\n\n\t\t\t\tif ( ! useDash ) {\n\n\t\t\t\t\tif ( useAlphaToCoverage ) {\n\n\t\t\t\t\t\tconst dnorm = norm.fwidth();\n\t\t\t\t\t\talpha.assign( smoothstep( dnorm.negate().add( 0.5 ), dnorm.add( 0.5 ), norm ).oneMinus() );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnorm.greaterThan( 0.5 ).discard();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// round endcaps\n\n\t\t\t\tif ( useAlphaToCoverage ) {\n\n\t\t\t\t\tconst a = vUv.x;\n\t\t\t\t\tconst b = vUv.y.greaterThan( 0.0 ).cond( vUv.y.sub( 1.0 ), vUv.y.add( 1.0 ) );\n\n\t\t\t\t\tconst len2 = a.mul( a ).add( b.mul( b ) );\n\n\t\t\t\t\t// force assignment out of following 'if' statement - to avoid uniform control flow errors\n\t\t\t\t\tconst dlen = property( 'float', 'dlen' );\n\t\t\t\t\tdlen.assign( len2.fwidth() );\n\n\t\t\t\t\tIf( vUv.y.abs().greaterThan( 1.0 ), () => {\n\n\t\t\t\t\t\talpha.assign( smoothstep( dlen.oneMinus(), dlen.add( 1 ), len2 ).oneMinus() );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tIf( vUv.y.abs().greaterThan( 1.0 ), () => {\n\n\t\t\t\t\t\tconst a = vUv.x;\n\t\t\t\t\t\tconst b = vUv.y.greaterThan( 0.0 ).cond( vUv.y.sub( 1.0 ), vUv.y.add( 1.0 ) );\n\t\t\t\t\t\tconst len2 = a.mul( a ).add( b.mul( b ) );\n\n\t\t\t\t\t\tlen2.greaterThan( 1.0 ).discard();\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet lineColorNode;\n\n\t\t\tif ( this.lineColorNode ) {\n\n\t\t\t\tlineColorNode = this.lineColorNode;\n\n\t\t\t} else {\n\n\t\t\t\tif ( useColor ) {\n\n\t\t\t\t\tconst instanceColorStart = attribute( 'instanceColorStart' );\n\t\t\t\t\tconst instanceColorEnd = attribute( 'instanceColorEnd' );\n\n\t\t\t\t\tconst instanceColor = positionGeometry.y.lessThan( 0.5 ).cond( instanceColorStart, instanceColorEnd );\n\n\t\t\t\t\tlineColorNode = instanceColor.mul( materialColor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlineColorNode = materialColor;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn vec4( lineColorNode, alpha );\n\n\t\t} )();\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\n\tget worldUnits() {\n\n\t\treturn this.useWorldUnits;\n\n\t}\n\n\tset worldUnits( value ) {\n\n\t\tif ( this.useWorldUnits !== value ) {\n\n\t\t\tthis.useWorldUnits = value;\n\t\t\tthis.setupShaders();\n\n\t\t}\n\n\t}\n\n\n\tget dashed() {\n\n\t\treturn this.useDash;\n\n\t}\n\n\tset dashed( value ) {\n\n\t\tif ( this.useDash !== value ) {\n\n\t\t\tthis.useDash = value;\n\t\t\tthis.setupShaders();\n\n\t\t}\n\n\t}\n\n\n\tget alphaToCoverage() {\n\n\t\treturn this.useAlphaToCoverage;\n\n\t}\n\n\tset alphaToCoverage( value ) {\n\n\t\tif ( this.useAlphaToCoverage !== value ) {\n\n\t\t\tthis.useAlphaToCoverage = value;\n\t\t\tthis.setupShaders();\n\n\t\t}\n\n\t}\n\n}\n\nexport default Line2NodeMaterial;\n\naddNodeMaterial( 'Line2NodeMaterial', Line2NodeMaterial );\n"],"mappings":";;;;AAAA,OAAOA,YAAY,IAAIC,eAAe,QAAQ,mBAAmB;AACjE,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,QAAQ,EAAEC,eAAe,QAAQ,yBAAyB;AACnE,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,sBAAsB,QAAQ,4BAA4B;AACnE,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,oBAAoB,EAAEC,mBAAmB,EAAEC,sBAAsB,EAAEC,iBAAiB,QAAQ,8BAA8B;AACrK,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,GAAG,EAAEC,UAAU,QAAQ,qBAAqB;AACrD,SAASC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,EAAE,QAAQ,6BAA6B;AAChF,SAASC,EAAE,QAAQ,wBAAwB;AAC3C,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,QAAQ,EAAEC,OAAO,QAAQ,yBAAyB;AAE3D,SAASC,kBAAkB,QAAQ,OAAO;AAE1C,IAAMC,aAAa,GAAG,IAAID,kBAAkB,CAAC,CAAC;AAAC,IAEzCE,iBAAiB,0BAAAC,aAAA;EAAAC,SAAA,CAAAF,iBAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,iBAAA;EAEtB,SAAAA,kBAAA,EAA2B;IAAA,IAAAK,KAAA;IAAA,IAAdC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAAG,eAAA,OAAAV,iBAAA;IAEvBK,KAAA,GAAAF,MAAA,CAAAQ,IAAA;IAEAN,KAAA,CAAKO,OAAO,GAAG,KAAK;IACpBP,KAAA,CAAKQ,MAAM,GAAG,KAAK;IAEnBR,KAAA,CAAKS,gBAAgB,CAAEf,aAAc,CAAC;IAEtCM,KAAA,CAAKU,kBAAkB,GAAG,IAAI;IAC9BV,KAAA,CAAKW,QAAQ,GAAGV,MAAM,CAACW,YAAY;IACnCZ,KAAA,CAAKa,OAAO,GAAGZ,MAAM,CAACa,MAAM;IAC5Bd,KAAA,CAAKe,aAAa,GAAG,KAAK;IAE1Bf,KAAA,CAAKgB,UAAU,GAAG,CAAC;IACnBhB,KAAA,CAAKiB,SAAS,GAAG,CAAC;IAElBjB,KAAA,CAAKkB,aAAa,GAAG,IAAI;IAEzBlB,KAAA,CAAKmB,UAAU,GAAG,IAAI;IACtBnB,KAAA,CAAKoB,aAAa,GAAG,IAAI;IACzBpB,KAAA,CAAKqB,YAAY,GAAG,IAAI;IACxBrB,KAAA,CAAKsB,WAAW,GAAG,IAAI;IAEvBtB,KAAA,CAAKuB,YAAY,CAAC,CAAC;IAEnBvB,KAAA,CAAKwB,SAAS,CAAEvB,MAAO,CAAC;IAAC,OAAAD,KAAA;EAE1B;EAACyB,YAAA,CAAA9B,iBAAA;IAAA+B,GAAA;IAAAC,KAAA,EAED,SAAAJ,aAAA,EAAe;MAAA,IAAAK,MAAA;MAEd,IAAMlB,kBAAkB,GAAG,IAAI,CAACmB,eAAe;MAC/C,IAAMlB,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAME,OAAO,GAAG,IAAI,CAACC,MAAM;MAC3B,IAAMC,aAAa,GAAG,IAAI,CAACe,UAAU;MAErC,IAAMC,WAAW,GAAGhD,KAAK,CAAE,UAAAiD,IAAA,EAAsB;QAAA,IAAlBC,KAAK,GAAAD,IAAA,CAALC,KAAK;UAAEC,GAAG,GAAAF,IAAA,CAAHE,GAAG;QAExC,IAAMC,CAAC,GAAG/D,sBAAsB,CAACgE,OAAO,CAAE,CAAE,CAAC,CAACA,OAAO,CAAE,CAAE,CAAC,CAAC,CAAC;QAC5D,IAAMC,CAAC,GAAGjE,sBAAsB,CAACgE,OAAO,CAAE,CAAE,CAAC,CAACA,OAAO,CAAE,CAAE,CAAC,CAAC,CAAC;QAC5D,IAAME,YAAY,GAAGD,CAAC,CAACE,GAAG,CAAE,CAAE,GAAI,CAAC,CAACC,GAAG,CAAEL,CAAE,CAAC;QAE5C,IAAMM,KAAK,GAAGH,YAAY,CAACI,GAAG,CAAET,KAAK,CAACU,CAAE,CAAC,CAACH,GAAG,CAAEN,GAAG,CAACS,CAAC,CAACD,GAAG,CAAET,KAAK,CAACU,CAAE,CAAE,CAAC;QAErE,OAAOxD,IAAI,CAAEN,GAAG,CAAEoD,KAAK,CAACW,GAAG,EAAEV,GAAG,CAACU,GAAG,EAAEH,KAAM,CAAC,EAAEP,GAAG,CAACW,CAAE,CAAC;MAEvD,CAAE,CAAC;MAEH,IAAI,CAACC,UAAU,GAAG/D,KAAK,CAAE,YAAM;QAE9Bb,eAAe,CAAE,MAAM,EAAE,KAAM,CAAC,CAAC6E,MAAM,CAAE1D,EAAE,CAAC,CAAE,CAAC;QAE/C,IAAM2D,aAAa,GAAG7E,SAAS,CAAE,eAAgB,CAAC;QAClD,IAAM8E,WAAW,GAAG9E,SAAS,CAAE,aAAc,CAAC;;QAE9C;;QAEA,IAAM8D,KAAK,GAAGhE,QAAQ,CAAE,MAAM,EAAE,OAAQ,CAAC;QACzC,IAAMiE,GAAG,GAAGjE,QAAQ,CAAE,MAAM,EAAE,KAAM,CAAC;QAErCgE,KAAK,CAACc,MAAM,CAAEpE,eAAe,CAAC4D,GAAG,CAAEpD,IAAI,CAAE6D,aAAa,EAAE,GAAI,CAAE,CAAE,CAAC,CAAC,CAAC;QACnEd,GAAG,CAACa,MAAM,CAAEpE,eAAe,CAAC4D,GAAG,CAAEpD,IAAI,CAAE8D,WAAW,EAAE,GAAI,CAAE,CAAE,CAAC;QAE7D,IAAKlC,aAAa,EAAG;UAEpB7C,eAAe,CAAE,MAAM,EAAE,YAAa,CAAC,CAAC6E,MAAM,CAAEd,KAAK,CAACW,GAAI,CAAC;UAC3D1E,eAAe,CAAE,MAAM,EAAE,UAAW,CAAC,CAAC6E,MAAM,CAAEb,GAAG,CAACU,GAAI,CAAC;QAExD;QAEA,IAAMM,MAAM,GAAG5D,QAAQ,CAACqD,CAAC,CAACH,GAAG,CAAElD,QAAQ,CAACuD,CAAE,CAAC;;QAE3C;QACA;QACA;QACA;;QAEA,IAAMM,WAAW,GAAG/E,sBAAsB,CAACgE,OAAO,CAAE,CAAE,CAAC,CAACA,OAAO,CAAE,CAAE,CAAC,CAACgB,KAAK,CAAE,CAAE,GAAI,CAAC,CAAC,CAAC;;QAErFhE,EAAE,CAAE+D,WAAW,EAAE,YAAM;UAEtB/D,EAAE,CAAE6C,KAAK,CAACU,CAAC,CAACU,QAAQ,CAAE,GAAI,CAAC,CAACC,GAAG,CAAEpB,GAAG,CAACS,CAAC,CAACY,WAAW,CAAE,GAAI,CAAE,CAAC,EAAE,YAAM;YAElErB,GAAG,CAACa,MAAM,CAAEhB,WAAW,CAAE;cAAEE,KAAK,EAAEA,KAAK;cAAEC,GAAG,EAAEA;YAAI,CAAE,CAAE,CAAC;UAExD,CAAE,CAAC,CAACsB,MAAM,CAAEtB,GAAG,CAACS,CAAC,CAACU,QAAQ,CAAE,GAAI,CAAC,CAACC,GAAG,CAAErB,KAAK,CAACU,CAAC,CAACc,gBAAgB,CAAE,GAAI,CAAE,CAAC,EAAE,YAAM;YAE/ExB,KAAK,CAACc,MAAM,CAAEhB,WAAW,CAAE;cAAEE,KAAK,EAAEC,GAAG;cAAEA,GAAG,EAAED;YAAM,CAAE,CAAE,CAAC;UAEzD,CAAE,CAAC;QAEL,CAAE,CAAC;;QAEH;QACA,IAAMyB,SAAS,GAAGtF,sBAAsB,CAACmE,GAAG,CAAEN,KAAM,CAAC;QACrD,IAAM0B,OAAO,GAAGvF,sBAAsB,CAACmE,GAAG,CAAEL,GAAI,CAAC;;QAEjD;QACA,IAAM0B,QAAQ,GAAGF,SAAS,CAACd,GAAG,CAACJ,GAAG,CAAEkB,SAAS,CAACb,CAAE,CAAC;QACjD,IAAMgB,MAAM,GAAGF,OAAO,CAACf,GAAG,CAACJ,GAAG,CAAEmB,OAAO,CAACd,CAAE,CAAC;;QAE3C;QACA,IAAMiB,GAAG,GAAGD,MAAM,CAACE,EAAE,CAACrB,GAAG,CAAEkB,QAAQ,CAACG,EAAG,CAAC,CAAChG,IAAI,CAAC,CAAC;;QAE/C;QACA+F,GAAG,CAACE,CAAC,CAACjB,MAAM,CAAEe,GAAG,CAACE,CAAC,CAACzB,GAAG,CAAEW,MAAO,CAAE,CAAC;QACnCY,GAAG,CAACf,MAAM,CAAEe,GAAG,CAACG,SAAS,CAAC,CAAE,CAAC;QAE7B,IAAMC,IAAI,GAAGnG,IAAI,CAAEoB,IAAI,CAAC,CAAE,CAAC;QAE3B,IAAK4B,aAAa,EAAG;UAEpB;;UAEA,IAAMoD,QAAQ,GAAGjC,GAAG,CAACU,GAAG,CAACF,GAAG,CAAET,KAAK,CAACW,GAAI,CAAC,CAACqB,SAAS,CAAC,CAAC;UACrD,IAAMG,MAAM,GAAGvF,GAAG,CAAEoD,KAAK,CAACW,GAAG,EAAEV,GAAG,CAACU,GAAG,EAAE,GAAI,CAAC,CAACqB,SAAS,CAAC,CAAC;UACzD,IAAMI,OAAO,GAAGF,QAAQ,CAACG,KAAK,CAAEF,MAAO,CAAC,CAACH,SAAS,CAAC,CAAC;UACpD,IAAMM,QAAQ,GAAGJ,QAAQ,CAACG,KAAK,CAAED,OAAQ,CAAC;UAE1C,IAAMG,QAAQ,GAAGtG,eAAe,CAAE,MAAM,EAAE,UAAW,CAAC;UAEtDsG,QAAQ,CAACzB,MAAM,CAAEnE,gBAAgB,CAAC6F,CAAC,CAACpB,QAAQ,CAAE,GAAI,CAAC,CAACqB,IAAI,CAAEzC,KAAK,EAAEC,GAAG,CAAE,CAAC;;UAEvE;UACA,IAAMyC,EAAE,GAAGjG,iBAAiB,CAAC6D,GAAG,CAAE,GAAI,CAAC;UACvCiC,QAAQ,CAACI,SAAS,CAAEzF,IAAI,CAAEP,gBAAgB,CAACoF,CAAC,CAACX,QAAQ,CAAE,GAAI,CAAC,CAACqB,IAAI,CAAEL,OAAO,CAAC9B,GAAG,CAAEoC,EAAG,CAAC,EAAEN,OAAO,CAAC9B,GAAG,CAAEoC,EAAG,CAAC,CAACE,MAAM,CAAC,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC;;UAEzH;UACA;UACA,IAAK,CAAEhE,OAAO,EAAG;YAEhB;YACA2D,QAAQ,CAACI,SAAS,CAAEzF,IAAI,CAAEP,gBAAgB,CAAC6F,CAAC,CAACpB,QAAQ,CAAE,GAAI,CAAC,CAACqB,IAAI,CAAEP,QAAQ,CAAC5B,GAAG,CAAEoC,EAAG,CAAC,CAACE,MAAM,CAAC,CAAC,EAAEV,QAAQ,CAAC5B,GAAG,CAAEoC,EAAG,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC;;YAE3H;YACAH,QAAQ,CAACI,SAAS,CAAEzF,IAAI,CAAEoF,QAAQ,CAAChC,GAAG,CAAEoC,EAAG,CAAC,EAAE,CAAE,CAAE,CAAC;;YAEnD;YACAvF,EAAE,CAAER,gBAAgB,CAAC6F,CAAC,CAAClB,WAAW,CAAE,GAAI,CAAC,CAACuB,EAAE,CAAElG,gBAAgB,CAAC6F,CAAC,CAACpB,QAAQ,CAAE,GAAI,CAAE,CAAC,EAAE,YAAM;cAEzFmB,QAAQ,CAACO,SAAS,CAAE5F,IAAI,CAAEoF,QAAQ,CAAChC,GAAG,CAAE,GAAI,CAAC,CAACA,GAAG,CAAEoC,EAAG,CAAC,EAAE,CAAE,CAAE,CAAC;YAE/D,CAAE,CAAC;UAEJ;;UAEA;UACAT,IAAI,CAACnB,MAAM,CAAE3E,sBAAsB,CAACmE,GAAG,CAAEiC,QAAS,CAAE,CAAC;;UAErD;UACA;UACA,IAAMQ,QAAQ,GAAGjH,IAAI,CAAEmB,IAAI,CAAC,CAAE,CAAC;UAE/B8F,QAAQ,CAACjC,MAAM,CAAEnE,gBAAgB,CAAC6F,CAAC,CAACpB,QAAQ,CAAE,GAAI,CAAC,CAACqB,IAAI,CAAEd,QAAQ,EAAEC,MAAO,CAAE,CAAC;UAC9EK,IAAI,CAACvB,CAAC,CAACI,MAAM,CAAEiC,QAAQ,CAACrC,CAAC,CAACJ,GAAG,CAAE2B,IAAI,CAACrB,CAAE,CAAE,CAAC;QAE1C,CAAC,MAAM;UAEN,IAAMoC,MAAM,GAAGhH,QAAQ,CAAE,MAAM,EAAE,QAAS,CAAC;UAE3CgH,MAAM,CAAClC,MAAM,CAAE9D,IAAI,CAAE6E,GAAG,CAACW,CAAC,EAAEX,GAAG,CAACE,CAAC,CAACa,MAAM,CAAC,CAAE,CAAE,CAAC;;UAE9C;UACAf,GAAG,CAACE,CAAC,CAACjB,MAAM,CAAEe,GAAG,CAACE,CAAC,CAACxB,GAAG,CAAEU,MAAO,CAAE,CAAC;UACnC+B,MAAM,CAACjB,CAAC,CAACjB,MAAM,CAAEkC,MAAM,CAACjB,CAAC,CAACxB,GAAG,CAAEU,MAAO,CAAE,CAAC;;UAEzC;UACA+B,MAAM,CAAClC,MAAM,CAAEnE,gBAAgB,CAACoF,CAAC,CAACX,QAAQ,CAAE,GAAI,CAAC,CAACqB,IAAI,CAAEO,MAAM,CAACJ,MAAM,CAAC,CAAC,EAAEI,MAAO,CAAE,CAAC;;UAEnF;UACA7F,EAAE,CAAER,gBAAgB,CAAC6F,CAAC,CAACpB,QAAQ,CAAE,GAAI,CAAC,EAAE,YAAM;YAE7C4B,MAAM,CAAClC,MAAM,CAAEkC,MAAM,CAACvC,GAAG,CAAEoB,GAAI,CAAE,CAAC;UAEnC,CAAE,CAAC,CAACN,MAAM,CAAE5E,gBAAgB,CAAC6F,CAAC,CAAClB,WAAW,CAAE,GAAI,CAAC,EAAE,YAAM;YAExD0B,MAAM,CAAClC,MAAM,CAAEkC,MAAM,CAACC,GAAG,CAAEpB,GAAI,CAAE,CAAC;UAEnC,CAAE,CAAC;;UAEH;UACAmB,MAAM,CAAClC,MAAM,CAAEkC,MAAM,CAAC1C,GAAG,CAAE7D,iBAAkB,CAAE,CAAC;;UAEhD;UACAuG,MAAM,CAAClC,MAAM,CAAEkC,MAAM,CAACzC,GAAG,CAAElD,QAAQ,CAACuD,CAAE,CAAE,CAAC;;UAEzC;UACAqB,IAAI,CAACnB,MAAM,CAAEnE,gBAAgB,CAAC6F,CAAC,CAACpB,QAAQ,CAAE,GAAI,CAAC,CAACqB,IAAI,CAAEhB,SAAS,EAAEC,OAAQ,CAAE,CAAC;;UAE5E;UACAsB,MAAM,CAAClC,MAAM,CAAEkC,MAAM,CAAC1C,GAAG,CAAE2B,IAAI,CAACrB,CAAE,CAAE,CAAC;UAErCqB,IAAI,CAACnB,MAAM,CAAEmB,IAAI,CAACgB,GAAG,CAAE/F,IAAI,CAAE8F,MAAM,EAAE,CAAC,EAAE,CAAE,CAAE,CAAE,CAAC;QAEhD;QAEA,OAAOf,IAAI;MAEZ,CAAE,CAAC,CAAC,CAAC;MAEL,IAAMiB,iBAAiB,GAAGpG,KAAK,CAAE,UAAAqG,KAAA,EAA0B;QAAA,IAAtBC,EAAE,GAAAD,KAAA,CAAFC,EAAE;UAAEC,EAAE,GAAAF,KAAA,CAAFE,EAAE;UAAEC,EAAE,GAAAH,KAAA,CAAFG,EAAE;UAAEC,EAAE,GAAAJ,KAAA,CAAFI,EAAE;QAElD,IAAMC,GAAG,GAAGJ,EAAE,CAAC3C,GAAG,CAAE6C,EAAG,CAAC;QACxB,IAAMG,GAAG,GAAGF,EAAE,CAAC9C,GAAG,CAAE6C,EAAG,CAAC;QAExB,IAAMI,GAAG,GAAGL,EAAE,CAAC5C,GAAG,CAAE2C,EAAG,CAAC;QAExB,IAAMO,KAAK,GAAGH,GAAG,CAACI,GAAG,CAAEH,GAAI,CAAC;QAC5B,IAAMI,KAAK,GAAGJ,GAAG,CAACG,GAAG,CAAEF,GAAI,CAAC;QAC5B,IAAMI,KAAK,GAAGN,GAAG,CAACI,GAAG,CAAEF,GAAI,CAAC;QAC5B,IAAMK,KAAK,GAAGN,GAAG,CAACG,GAAG,CAAEH,GAAI,CAAC;QAC5B,IAAMO,KAAK,GAAGN,GAAG,CAACE,GAAG,CAAEF,GAAI,CAAC;QAE5B,IAAMO,KAAK,GAAGD,KAAK,CAAC1D,GAAG,CAAEyD,KAAM,CAAC,CAACtD,GAAG,CAAEoD,KAAK,CAACvD,GAAG,CAAEuD,KAAM,CAAE,CAAC;QAC1D,IAAMK,KAAK,GAAGP,KAAK,CAACrD,GAAG,CAAEuD,KAAM,CAAC,CAACpD,GAAG,CAAEqD,KAAK,CAACxD,GAAG,CAAEyD,KAAM,CAAE,CAAC;QAE1D,IAAMI,GAAG,GAAGD,KAAK,CAAC3D,GAAG,CAAE0D,KAAM,CAAC,CAACG,KAAK,CAAC,CAAC;QACtC,IAAMC,GAAG,GAAGV,KAAK,CAACV,GAAG,CAAEY,KAAK,CAACvD,GAAG,CAAE6D,GAAI,CAAE,CAAC,CAAC5D,GAAG,CAAEwD,KAAM,CAAC,CAACK,KAAK,CAAC,CAAC;QAE9D,OAAOpH,IAAI,CAAEmH,GAAG,EAAEE,GAAI,CAAC;MAExB,CAAE,CAAC;MAEH,IAAI,CAACC,YAAY,GAAGxH,KAAK,CAAE,YAAM;QAEhC,IAAMyH,GAAG,GAAGtI,eAAe,CAAE,MAAM,EAAE,KAAM,CAAC;QAE5C,IAAK2C,OAAO,EAAG;UAEd,IAAMM,UAAU,GAAGS,MAAI,CAACT,UAAU,GAAGnC,KAAK,CAAE4C,MAAI,CAAC6E,cAAe,CAAC,GAAGhI,sBAAsB;UAC1F,IAAM2C,aAAa,GAAGQ,MAAI,CAACR,aAAa,GAAGpC,KAAK,CAAE4C,MAAI,CAACR,aAAc,CAAC,GAAG9C,iBAAiB;UAC1F,IAAM+C,YAAY,GAAGO,MAAI,CAACP,YAAY,GAAGrC,KAAK,CAAE4C,MAAI,CAACP,YAAa,CAAC,GAAG9C,oBAAoB;UAC1F,IAAM+C,WAAW,GAAGM,MAAI,CAACP,YAAY,GAAGrC,KAAK,CAAE4C,MAAI,CAAC8E,WAAY,CAAC,GAAGlI,mBAAmB;UAEvFe,QAAQ,CAACwD,MAAM,CAAE1B,YAAa,CAAC;UAC/B7B,OAAO,CAACuD,MAAM,CAAEzB,WAAY,CAAC;UAE7B,IAAMqF,qBAAqB,GAAGxI,SAAS,CAAE,uBAAwB,CAAC;UAClE,IAAMyI,mBAAmB,GAAGzI,SAAS,CAAE,qBAAsB,CAAC;UAE9D,IAAM0I,YAAY,GAAGjI,gBAAgB,CAAC6F,CAAC,CAACpB,QAAQ,CAAE,GAAI,CAAC,CAACqB,IAAI,CAAEtD,aAAa,CAACmB,GAAG,CAAEoE,qBAAsB,CAAC,EAAErI,iBAAiB,CAACiE,GAAG,CAAEqE,mBAAoB,CAAE,CAAC;UAExJ,IAAME,aAAa,GAAG9I,OAAO,CAAE6I,YAAY,CAAC3B,GAAG,CAAEzG,sBAAuB,CAAE,CAAC;UAC3E,IAAMsI,mBAAmB,GAAG5F,UAAU,GAAG2F,aAAa,CAAC5B,GAAG,CAAE/D,UAAW,CAAC,GAAG2F,aAAa;UAExFN,GAAG,CAAC/B,CAAC,CAACpB,QAAQ,CAAE,CAAE,GAAI,CAAC,CAACyB,EAAE,CAAE0B,GAAG,CAAC/B,CAAC,CAAClB,WAAW,CAAE,GAAI,CAAE,CAAC,CAACyD,OAAO,CAAC,CAAC,CAAC,CAAC;UAClED,mBAAmB,CAACE,GAAG,CAAE1H,QAAQ,CAAC2F,GAAG,CAAE1F,OAAQ,CAAE,CAAC,CAAC+D,WAAW,CAAEhE,QAAS,CAAC,CAACyH,OAAO,CAAC,CAAC,CAAC,CAAC;QAEvF;;QAEC;QACD,IAAMvE,KAAK,GAAGxE,QAAQ,CAAE,OAAO,EAAE,OAAQ,CAAC;QAC1CwE,KAAK,CAACM,MAAM,CAAE,CAAE,CAAC;QAEjB,IAAKhC,aAAa,EAAG;UAEpB,IAAMmG,UAAU,GAAGhJ,eAAe,CAAE,MAAM,EAAE,YAAa,CAAC;UAC1D,IAAMiJ,QAAQ,GAAGjJ,eAAe,CAAE,MAAM,EAAE,UAAW,CAAC;;UAEtD;UACA,IAAMkJ,MAAM,GAAGlJ,eAAe,CAAE,MAAM,EAAE,UAAW,CAAC,CAAC0E,GAAG,CAACqB,SAAS,CAAC,CAAC,CAAC1B,GAAG,CAAE,GAAI,CAAC;UAC/E,IAAM8E,OAAO,GAAGF,QAAQ,CAACzE,GAAG,CAAEwE,UAAW,CAAC;UAC1C,IAAMjH,MAAM,GAAGkF,iBAAiB,CAAE;YAAEE,EAAE,EAAE6B,UAAU;YAAE5B,EAAE,EAAE6B,QAAQ;YAAE5B,EAAE,EAAErG,IAAI,CAAE,GAAG,EAAE,GAAG,EAAE,GAAI,CAAC;YAAEsG,EAAE,EAAE4B;UAAO,CAAE,CAAC;UAE3G,IAAM/B,EAAE,GAAG6B,UAAU,CAAChC,GAAG,CAAEmC,OAAO,CAAC9E,GAAG,CAAEtC,MAAM,CAAC+D,CAAE,CAAE,CAAC;UACpD,IAAMsB,EAAE,GAAG8B,MAAM,CAAC7E,GAAG,CAAEtC,MAAM,CAACwE,CAAE,CAAC;UACjC,IAAM6C,KAAK,GAAGjC,EAAE,CAAC3C,GAAG,CAAE4C,EAAG,CAAC;UAC1B,IAAMiC,GAAG,GAAGD,KAAK,CAACnH,MAAM,CAAC,CAAC;UAC1B,IAAMqH,IAAI,GAAGD,GAAG,CAAC/E,GAAG,CAAE9D,iBAAkB,CAAC;UAEzC,IAAK,CAAEmC,OAAO,EAAG;YAEhB,IAAKH,kBAAkB,EAAG;cAEzB,IAAM+G,KAAK,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC;cAC3BjF,KAAK,CAACM,MAAM,CAAEjE,UAAU,CAAE2I,KAAK,CAAC5C,MAAM,CAAC,CAAC,CAACK,GAAG,CAAE,GAAI,CAAC,EAAEuC,KAAK,CAACvC,GAAG,CAAE,GAAI,CAAC,EAAEsC,IAAK,CAAC,CAACG,QAAQ,CAAC,CAAE,CAAC;YAE3F,CAAC,MAAM;cAENH,IAAI,CAACjE,WAAW,CAAE,GAAI,CAAC,CAACyD,OAAO,CAAC,CAAC;YAElC;UAED;QAED,CAAC,MAAM;UAEN;;UAEA,IAAKtG,kBAAkB,EAAG;YAEzB,IAAMyB,CAAC,GAAGqE,GAAG,CAACxC,CAAC;YACf,IAAM3B,CAAC,GAAGmE,GAAG,CAAC/B,CAAC,CAAClB,WAAW,CAAE,GAAI,CAAC,CAACmB,IAAI,CAAE8B,GAAG,CAAC/B,CAAC,CAAC/B,GAAG,CAAE,GAAI,CAAC,EAAE8D,GAAG,CAAC/B,CAAC,CAACS,GAAG,CAAE,GAAI,CAAE,CAAC;YAE7E,IAAM0C,IAAI,GAAGzF,CAAC,CAACI,GAAG,CAAEJ,CAAE,CAAC,CAAC+C,GAAG,CAAE7C,CAAC,CAACE,GAAG,CAAEF,CAAE,CAAE,CAAC;;YAEzC;YACA,IAAMwF,IAAI,GAAG5J,QAAQ,CAAE,OAAO,EAAE,MAAO,CAAC;YACxC4J,IAAI,CAAC9E,MAAM,CAAE6E,IAAI,CAACF,MAAM,CAAC,CAAE,CAAC;YAE5BtI,EAAE,CAAEoH,GAAG,CAAC/B,CAAC,CAACqD,GAAG,CAAC,CAAC,CAACvE,WAAW,CAAE,GAAI,CAAC,EAAE,YAAM;cAEzCd,KAAK,CAACM,MAAM,CAAEjE,UAAU,CAAE+I,IAAI,CAACF,QAAQ,CAAC,CAAC,EAAEE,IAAI,CAAC3C,GAAG,CAAE,CAAE,CAAC,EAAE0C,IAAK,CAAC,CAACD,QAAQ,CAAC,CAAE,CAAC;YAE9E,CAAE,CAAC;UAEJ,CAAC,MAAM;YAENvI,EAAE,CAAEoH,GAAG,CAAC/B,CAAC,CAACqD,GAAG,CAAC,CAAC,CAACvE,WAAW,CAAE,GAAI,CAAC,EAAE,YAAM;cAEzC,IAAMpB,CAAC,GAAGqE,GAAG,CAACxC,CAAC;cACf,IAAM3B,CAAC,GAAGmE,GAAG,CAAC/B,CAAC,CAAClB,WAAW,CAAE,GAAI,CAAC,CAACmB,IAAI,CAAE8B,GAAG,CAAC/B,CAAC,CAAC/B,GAAG,CAAE,GAAI,CAAC,EAAE8D,GAAG,CAAC/B,CAAC,CAACS,GAAG,CAAE,GAAI,CAAE,CAAC;cAC7E,IAAM0C,IAAI,GAAGzF,CAAC,CAACI,GAAG,CAAEJ,CAAE,CAAC,CAAC+C,GAAG,CAAE7C,CAAC,CAACE,GAAG,CAAEF,CAAE,CAAE,CAAC;cAEzCuF,IAAI,CAACrE,WAAW,CAAE,GAAI,CAAC,CAACyD,OAAO,CAAC,CAAC;YAElC,CAAE,CAAC;UAEJ;QAED;QAEA,IAAI9F,aAAa;QAEjB,IAAKU,MAAI,CAACV,aAAa,EAAG;UAEzBA,aAAa,GAAGU,MAAI,CAACV,aAAa;QAEnC,CAAC,MAAM;UAEN,IAAKP,QAAQ,EAAG;YAEf,IAAMoH,kBAAkB,GAAG5J,SAAS,CAAE,oBAAqB,CAAC;YAC5D,IAAM6J,gBAAgB,GAAG7J,SAAS,CAAE,kBAAmB,CAAC;YAExD,IAAM8J,aAAa,GAAGrJ,gBAAgB,CAAC6F,CAAC,CAACpB,QAAQ,CAAE,GAAI,CAAC,CAACqB,IAAI,CAAEqD,kBAAkB,EAAEC,gBAAiB,CAAC;YAErG9G,aAAa,GAAG+G,aAAa,CAAC1F,GAAG,CAAElE,aAAc,CAAC;UAEnD,CAAC,MAAM;YAEN6C,aAAa,GAAG7C,aAAa;UAE9B;QAED;QAEA,OAAOc,IAAI,CAAE+B,aAAa,EAAEuB,KAAM,CAAC;MAEpC,CAAE,CAAC,CAAC,CAAC;MAEL,IAAI,CAACyF,WAAW,GAAG,IAAI;IAExB;EAAC;IAAAxG,GAAA;IAAAyG,GAAA,EAGD,SAAAA,IAAA,EAAiB;MAEhB,OAAO,IAAI,CAACpH,aAAa;IAE1B,CAAC;IAAAqH,GAAA,EAED,SAAAA,IAAgBzG,KAAK,EAAG;MAEvB,IAAK,IAAI,CAACZ,aAAa,KAAKY,KAAK,EAAG;QAEnC,IAAI,CAACZ,aAAa,GAAGY,KAAK;QAC1B,IAAI,CAACJ,YAAY,CAAC,CAAC;MAEpB;IAED;EAAC;IAAAG,GAAA;IAAAyG,GAAA,EAGD,SAAAA,IAAA,EAAa;MAEZ,OAAO,IAAI,CAACtH,OAAO;IAEpB,CAAC;IAAAuH,GAAA,EAED,SAAAA,IAAYzG,KAAK,EAAG;MAEnB,IAAK,IAAI,CAACd,OAAO,KAAKc,KAAK,EAAG;QAE7B,IAAI,CAACd,OAAO,GAAGc,KAAK;QACpB,IAAI,CAACJ,YAAY,CAAC,CAAC;MAEpB;IAED;EAAC;IAAAG,GAAA;IAAAyG,GAAA,EAGD,SAAAA,IAAA,EAAsB;MAErB,OAAO,IAAI,CAACzH,kBAAkB;IAE/B,CAAC;IAAA0H,GAAA,EAED,SAAAA,IAAqBzG,KAAK,EAAG;MAE5B,IAAK,IAAI,CAACjB,kBAAkB,KAAKiB,KAAK,EAAG;QAExC,IAAI,CAACjB,kBAAkB,GAAGiB,KAAK;QAC/B,IAAI,CAACJ,YAAY,CAAC,CAAC;MAEpB;IAED;EAAC;EAAA,OAAA5B,iBAAA;AAAA,EA1Z8B9B,YAAY;AA8Z5C,eAAe8B,iBAAiB;AAEhC7B,eAAe,CAAE,mBAAmB,EAAE6B,iBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}