{"ast":null,"code":"import _classCallCheck from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport TempNode from '../core/TempNode.js';\nimport { nodeObject, addNodeElement, tslFn, float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport { loop } from '../utils/LoopNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { threshold } from './ColorAdjustmentNode.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { texturePass } from './PassNode.js';\nimport { Vector2, RenderTarget } from 'three';\nimport QuadMesh from '../../objects/QuadMesh.js';\nvar quadMesh = new QuadMesh();\nvar AnamorphicNode = /*#__PURE__*/function (_TempNode) {\n  _inherits(AnamorphicNode, _TempNode);\n  var _super = _createSuper(AnamorphicNode);\n  function AnamorphicNode(textureNode, tresholdNode, scaleNode, samples) {\n    var _this;\n    _classCallCheck(this, AnamorphicNode);\n    _this = _super.call(this, 'vec4');\n    _this.textureNode = textureNode;\n    _this.tresholdNode = tresholdNode;\n    _this.scaleNode = scaleNode;\n    _this.colorNode = vec3(0.1, 0.0, 1.0);\n    _this.samples = samples;\n    _this.resolution = new Vector2(1, 1);\n    _this._renderTarget = new RenderTarget();\n    _this._renderTarget.texture.name = 'anamorphic';\n    _this._invSize = uniform(new Vector2());\n    _this._textureNode = texturePass(_assertThisInitialized(_this), _this._renderTarget.texture);\n    _this.updateBeforeType = NodeUpdateType.RENDER;\n    return _this;\n  }\n  _createClass(AnamorphicNode, [{\n    key: \"getTextureNode\",\n    value: function getTextureNode() {\n      return this._textureNode;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this._invSize.value.set(1 / width, 1 / height);\n      width = Math.max(Math.round(width * this.resolution.x), 1);\n      height = Math.max(Math.round(height * this.resolution.y), 1);\n      this._renderTarget.setSize(width, height);\n    }\n  }, {\n    key: \"updateBefore\",\n    value: function updateBefore(frame) {\n      var renderer = frame.renderer;\n      var textureNode = this.textureNode;\n      var map = textureNode.value;\n      this._renderTarget.texture.type = map.type;\n      var currentRenderTarget = renderer.getRenderTarget();\n      var currentTexture = textureNode.value;\n      quadMesh.material = this._material;\n      this.setSize(map.image.width, map.image.height);\n\n      // render\n\n      renderer.setRenderTarget(this._renderTarget);\n      quadMesh.render(renderer);\n\n      // restore\n\n      renderer.setRenderTarget(currentRenderTarget);\n      textureNode.value = currentTexture;\n    }\n  }, {\n    key: \"setup\",\n    value: function setup(builder) {\n      var _this2 = this;\n      var textureNode = this.textureNode;\n      if (textureNode.isTextureNode !== true) {\n        console.error('AnamorphNode requires a TextureNode.');\n        return vec4();\n      }\n\n      //\n\n      var uvNode = textureNode.uvNode || uv();\n      var sampleTexture = function sampleTexture(uv) {\n        return textureNode.cache().context({\n          getUV: function getUV() {\n            return uv;\n          },\n          forceUVContext: true\n        });\n      };\n      var anamorph = tslFn(function () {\n        var samples = _this2.samples;\n        var halfSamples = Math.floor(samples / 2);\n        var total = vec3(0).toVar();\n        loop({\n          start: -halfSamples,\n          end: halfSamples\n        }, function (_ref) {\n          var i = _ref.i;\n          var softness = float(i).abs().div(halfSamples).oneMinus();\n          var uv = vec2(uvNode.x.add(_this2._invSize.x.mul(i).mul(_this2.scaleNode)), uvNode.y);\n          var color = sampleTexture(uv);\n          var pass = threshold(color, _this2.tresholdNode).mul(softness);\n          total.addAssign(pass);\n        });\n        return total.mul(_this2.colorNode);\n      });\n\n      //\n\n      var material = this._material || (this._material = builder.createNodeMaterial());\n      material.fragmentNode = anamorph();\n\n      //\n\n      var properties = builder.getNodeProperties(this);\n      properties.textureNode = textureNode;\n\n      //\n\n      return this._textureNode;\n    }\n  }]);\n  return AnamorphicNode;\n}(TempNode);\nexport var anamorphic = function anamorphic(node) {\n  var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .9;\n  var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  var samples = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;\n  return nodeObject(new AnamorphicNode(nodeObject(node), nodeObject(threshold), nodeObject(scale), samples));\n};\naddNodeElement('anamorphic', anamorphic);\nexport default AnamorphicNode;","map":{"version":3,"names":["TempNode","nodeObject","addNodeElement","tslFn","float","vec2","vec3","vec4","loop","uniform","NodeUpdateType","threshold","uv","texturePass","Vector2","RenderTarget","QuadMesh","quadMesh","AnamorphicNode","_TempNode","_inherits","_super","_createSuper","textureNode","tresholdNode","scaleNode","samples","_this","_classCallCheck","call","colorNode","resolution","_renderTarget","texture","name","_invSize","_textureNode","_assertThisInitialized","updateBeforeType","RENDER","_createClass","key","value","getTextureNode","setSize","width","height","set","Math","max","round","x","y","updateBefore","frame","renderer","map","type","currentRenderTarget","getRenderTarget","currentTexture","material","_material","image","setRenderTarget","render","setup","builder","_this2","isTextureNode","console","error","uvNode","sampleTexture","cache","context","getUV","forceUVContext","anamorph","halfSamples","floor","total","toVar","start","end","_ref","i","softness","abs","div","oneMinus","add","mul","color","pass","addAssign","createNodeMaterial","fragmentNode","properties","getNodeProperties","anamorphic","node","arguments","length","undefined","scale"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/display/AnamorphicNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { nodeObject, addNodeElement, tslFn, float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport { loop } from '../utils/LoopNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { threshold } from './ColorAdjustmentNode.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { texturePass } from './PassNode.js';\nimport { Vector2, RenderTarget } from 'three';\nimport QuadMesh from '../../objects/QuadMesh.js';\n\nconst quadMesh = new QuadMesh();\n\nclass AnamorphicNode extends TempNode {\n\n\tconstructor( textureNode, tresholdNode, scaleNode, samples ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.textureNode = textureNode;\n\t\tthis.tresholdNode = tresholdNode;\n\t\tthis.scaleNode = scaleNode;\n\t\tthis.colorNode = vec3( 0.1, 0.0, 1.0 );\n\t\tthis.samples = samples;\n\t\tthis.resolution = new Vector2( 1, 1 );\n\n\t\tthis._renderTarget = new RenderTarget();\n\t\tthis._renderTarget.texture.name = 'anamorphic';\n\n\t\tthis._invSize = uniform( new Vector2() );\n\n\t\tthis._textureNode = texturePass( this, this._renderTarget.texture );\n\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tgetTextureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._invSize.value.set( 1 / width, 1 / height );\n\n\t\twidth = Math.max( Math.round( width * this.resolution.x ), 1 );\n\t\theight = Math.max( Math.round( height * this.resolution.y ), 1 );\n\n\t\tthis._renderTarget.setSize( width, height );\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst map = textureNode.value;\n\n\t\tthis._renderTarget.texture.type = map.type;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentTexture = textureNode.value;\n\n\t\tquadMesh.material = this._material;\n\n\t\tthis.setSize( map.image.width, map.image.height );\n\n\t\t// render\n\n\t\trenderer.setRenderTarget( this._renderTarget );\n\n\t\tquadMesh.render( renderer );\n\n\t\t// restore\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\ttextureNode.value = currentTexture;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst textureNode = this.textureNode;\n\n\t\tif ( textureNode.isTextureNode !== true ) {\n\n\t\t\tconsole.error( 'AnamorphNode requires a TextureNode.' );\n\n\t\t\treturn vec4();\n\n\t\t}\n\n\t\t//\n\n\t\tconst uvNode = textureNode.uvNode || uv();\n\n\t\tconst sampleTexture = ( uv ) => textureNode.cache().context( { getUV: () => uv, forceUVContext: true } );\n\n\t\tconst anamorph = tslFn( () => {\n\n\t\t\tconst samples = this.samples;\n\t\t\tconst halfSamples = Math.floor( samples / 2 );\n\n\t\t\tconst total = vec3( 0 ).toVar();\n\n\t\t\tloop( { start: - halfSamples, end: halfSamples }, ( { i } ) => {\n\n\t\t\t\tconst softness = float( i ).abs().div( halfSamples ).oneMinus();\n\n\t\t\t\tconst uv = vec2( uvNode.x.add( this._invSize.x.mul( i ).mul( this.scaleNode ) ), uvNode.y );\n\t\t\t\tconst color = sampleTexture( uv );\n\t\t\t\tconst pass = threshold( color, this.tresholdNode ).mul( softness );\n\n\t\t\t\ttotal.addAssign( pass );\n\n\t\t\t} );\n\n\t\t\treturn total.mul( this.colorNode );\n\n\t\t} );\n\n\t\t//\n\n\t\tconst material = this._material || ( this._material = builder.createNodeMaterial() );\n\t\tmaterial.fragmentNode = anamorph();\n\n\t\t//\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.textureNode = textureNode;\n\n\t\t//\n\n\t\treturn this._textureNode;\n\n\t}\n\n}\n\nexport const anamorphic = ( node, threshold = .9, scale = 3, samples = 32 ) => nodeObject( new AnamorphicNode( nodeObject( node ), nodeObject( threshold ), nodeObject( scale ), samples ) );\n\naddNodeElement( 'anamorphic', anamorphic );\n\nexport default AnamorphicNode;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}