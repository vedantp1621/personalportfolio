{"ast":null,"code":"import _classCallCheck from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialRotation } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport { SpriteMaterial } from 'three';\nvar defaultValues = new SpriteMaterial();\nvar SpriteNodeMaterial = /*#__PURE__*/function (_NodeMaterial) {\n  _inherits(SpriteNodeMaterial, _NodeMaterial);\n  var _super = _createSuper(SpriteNodeMaterial);\n  function SpriteNodeMaterial(parameters) {\n    var _this;\n    _classCallCheck(this, SpriteNodeMaterial);\n    _this = _super.call(this);\n    _this.isSpriteNodeMaterial = true;\n    _this.lights = false;\n    _this.normals = false;\n    _this.positionNode = null;\n    _this.rotationNode = null;\n    _this.scaleNode = null;\n    _this.setDefaultValues(defaultValues);\n    _this.setValues(parameters);\n    return _this;\n  }\n  _createClass(SpriteNodeMaterial, [{\n    key: \"setupPosition\",\n    value: function setupPosition(_ref) {\n      var object = _ref.object,\n        context = _ref.context;\n      // < VERTEX STAGE >\n\n      var positionNode = this.positionNode,\n        rotationNode = this.rotationNode,\n        scaleNode = this.scaleNode;\n      var vertex = positionLocal;\n      var mvPosition = modelViewMatrix.mul(vec3(positionNode || 0));\n      var scale = vec2(modelWorldMatrix[0].xyz.length(), modelWorldMatrix[1].xyz.length());\n      if (scaleNode !== null) {\n        scale = scale.mul(scaleNode);\n      }\n      var alignedPosition = vertex.xy;\n      if (object.center && object.center.isVector2 === true) {\n        alignedPosition = alignedPosition.sub(uniform(object.center).sub(0.5));\n      }\n      alignedPosition = alignedPosition.mul(scale);\n      var rotation = float(rotationNode || materialRotation);\n      var rotatedPosition = alignedPosition.rotate(rotation);\n      mvPosition = vec4(mvPosition.xy.add(rotatedPosition), mvPosition.zw);\n      var modelViewProjection = cameraProjectionMatrix.mul(mvPosition);\n      context.vertex = vertex;\n      return modelViewProjection;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      this.positionNode = source.positionNode;\n      this.rotationNode = source.rotationNode;\n      this.scaleNode = source.scaleNode;\n      return _get(_getPrototypeOf(SpriteNodeMaterial.prototype), \"copy\", this).call(this, source);\n    }\n  }]);\n  return SpriteNodeMaterial;\n}(NodeMaterial);\nexport default SpriteNodeMaterial;\naddNodeMaterial('SpriteNodeMaterial', SpriteNodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","uniform","cameraProjectionMatrix","materialRotation","modelViewMatrix","modelWorldMatrix","positionLocal","float","vec2","vec3","vec4","SpriteMaterial","defaultValues","SpriteNodeMaterial","_NodeMaterial","_inherits","_super","_createSuper","parameters","_this","_classCallCheck","call","isSpriteNodeMaterial","lights","normals","positionNode","rotationNode","scaleNode","setDefaultValues","setValues","_createClass","key","value","setupPosition","_ref","object","context","vertex","mvPosition","mul","scale","xyz","length","alignedPosition","xy","center","isVector2","sub","rotation","rotatedPosition","rotate","add","zw","modelViewProjection","copy","source","_get","_getPrototypeOf","prototype"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/materials/SpriteNodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialRotation } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\n\nimport { SpriteMaterial } from 'three';\n\nconst defaultValues = new SpriteMaterial();\n\nclass SpriteNodeMaterial extends NodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteNodeMaterial = true;\n\n\t\tthis.lights = false;\n\t\tthis.normals = false;\n\n\t\tthis.positionNode = null;\n\t\tthis.rotationNode = null;\n\t\tthis.scaleNode = null;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupPosition( { object, context } ) {\n\n\t\t// < VERTEX STAGE >\n\n\t\tconst { positionNode, rotationNode, scaleNode } = this;\n\n\t\tconst vertex = positionLocal;\n\n\t\tlet mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );\n\n\t\tlet scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );\n\n\t\tif ( scaleNode !== null ) {\n\n\t\t\tscale = scale.mul( scaleNode );\n\n\t\t}\n\n\t\tlet alignedPosition = vertex.xy;\n\n\t\tif ( object.center && object.center.isVector2 === true ) {\n\n\t\t\talignedPosition = alignedPosition.sub( uniform( object.center ).sub( 0.5 ) );\n\n\t\t}\n\n\t\talignedPosition = alignedPosition.mul( scale );\n\n\t\tconst rotation = float( rotationNode || materialRotation );\n\n\t\tconst rotatedPosition = alignedPosition.rotate( rotation );\n\n\t\tmvPosition = vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );\n\n\t\tconst modelViewProjection = cameraProjectionMatrix.mul( mvPosition );\n\n\t\tcontext.vertex = vertex;\n\n\t\treturn modelViewProjection;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.positionNode = source.positionNode;\n\t\tthis.rotationNode = source.rotationNode;\n\t\tthis.scaleNode = source.scaleNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default SpriteNodeMaterial;\n\naddNodeMaterial( 'SpriteNodeMaterial', SpriteNodeMaterial );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}