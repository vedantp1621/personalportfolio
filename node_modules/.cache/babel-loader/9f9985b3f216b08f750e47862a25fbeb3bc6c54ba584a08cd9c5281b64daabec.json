{"ast":null,"code":"import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialRotation } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport { SpriteMaterial } from 'three';\nconst defaultValues = new SpriteMaterial();\nclass SpriteNodeMaterial extends NodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isSpriteNodeMaterial = true;\n    this.lights = false;\n    this.normals = false;\n    this.positionNode = null;\n    this.rotationNode = null;\n    this.scaleNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  setupPosition(_ref) {\n    let {\n      object,\n      context\n    } = _ref;\n    // < VERTEX STAGE >\n\n    const {\n      positionNode,\n      rotationNode,\n      scaleNode\n    } = this;\n    const vertex = positionLocal;\n    let mvPosition = modelViewMatrix.mul(vec3(positionNode || 0));\n    let scale = vec2(modelWorldMatrix[0].xyz.length(), modelWorldMatrix[1].xyz.length());\n    if (scaleNode !== null) {\n      scale = scale.mul(scaleNode);\n    }\n    let alignedPosition = vertex.xy;\n    if (object.center && object.center.isVector2 === true) {\n      alignedPosition = alignedPosition.sub(uniform(object.center).sub(0.5));\n    }\n    alignedPosition = alignedPosition.mul(scale);\n    const rotation = float(rotationNode || materialRotation);\n    const rotatedPosition = alignedPosition.rotate(rotation);\n    mvPosition = vec4(mvPosition.xy.add(rotatedPosition), mvPosition.zw);\n    const modelViewProjection = cameraProjectionMatrix.mul(mvPosition);\n    context.vertex = vertex;\n    return modelViewProjection;\n  }\n  copy(source) {\n    this.positionNode = source.positionNode;\n    this.rotationNode = source.rotationNode;\n    this.scaleNode = source.scaleNode;\n    return super.copy(source);\n  }\n}\nexport default SpriteNodeMaterial;\naddNodeMaterial('SpriteNodeMaterial', SpriteNodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","uniform","cameraProjectionMatrix","materialRotation","modelViewMatrix","modelWorldMatrix","positionLocal","float","vec2","vec3","vec4","SpriteMaterial","defaultValues","SpriteNodeMaterial","constructor","parameters","isSpriteNodeMaterial","lights","normals","positionNode","rotationNode","scaleNode","setDefaultValues","setValues","setupPosition","_ref","object","context","vertex","mvPosition","mul","scale","xyz","length","alignedPosition","xy","center","isVector2","sub","rotation","rotatedPosition","rotate","add","zw","modelViewProjection","copy","source"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/materials/SpriteNodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialRotation } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\n\nimport { SpriteMaterial } from 'three';\n\nconst defaultValues = new SpriteMaterial();\n\nclass SpriteNodeMaterial extends NodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteNodeMaterial = true;\n\n\t\tthis.lights = false;\n\t\tthis.normals = false;\n\n\t\tthis.positionNode = null;\n\t\tthis.rotationNode = null;\n\t\tthis.scaleNode = null;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupPosition( { object, context } ) {\n\n\t\t// < VERTEX STAGE >\n\n\t\tconst { positionNode, rotationNode, scaleNode } = this;\n\n\t\tconst vertex = positionLocal;\n\n\t\tlet mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );\n\n\t\tlet scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );\n\n\t\tif ( scaleNode !== null ) {\n\n\t\t\tscale = scale.mul( scaleNode );\n\n\t\t}\n\n\t\tlet alignedPosition = vertex.xy;\n\n\t\tif ( object.center && object.center.isVector2 === true ) {\n\n\t\t\talignedPosition = alignedPosition.sub( uniform( object.center ).sub( 0.5 ) );\n\n\t\t}\n\n\t\talignedPosition = alignedPosition.mul( scale );\n\n\t\tconst rotation = float( rotationNode || materialRotation );\n\n\t\tconst rotatedPosition = alignedPosition.rotate( rotation );\n\n\t\tmvPosition = vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );\n\n\t\tconst modelViewProjection = cameraProjectionMatrix.mul( mvPosition );\n\n\t\tcontext.vertex = vertex;\n\n\t\treturn modelViewProjection;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.positionNode = source.positionNode;\n\t\tthis.rotationNode = source.rotationNode;\n\t\tthis.scaleNode = source.scaleNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default SpriteNodeMaterial;\n\naddNodeMaterial( 'SpriteNodeMaterial', SpriteNodeMaterial );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}