{"ast":null,"code":"import AnalyticLightNode from './AnalyticLightNode.js';\nimport { addLightNode } from './LightsNode.js';\nimport { getDistanceAttenuation } from './LightUtils.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { objectViewPosition } from '../accessors/Object3DNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { PointLight } from 'three';\nclass PointLightNode extends AnalyticLightNode {\n  constructor() {\n    let light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(light);\n    this.cutoffDistanceNode = uniform(0);\n    this.decayExponentNode = uniform(0);\n  }\n  update(frame) {\n    const {\n      light\n    } = this;\n    super.update(frame);\n    this.cutoffDistanceNode.value = light.distance;\n    this.decayExponentNode.value = light.decay;\n  }\n  setup(builder) {\n    const {\n      colorNode,\n      cutoffDistanceNode,\n      decayExponentNode,\n      light\n    } = this;\n    const lightingModel = builder.context.lightingModel;\n    const lVector = objectViewPosition(light).sub(positionView); // @TODO: Add it into LightNode\n\n    const lightDirection = lVector.normalize();\n    const lightDistance = lVector.length();\n    const lightAttenuation = getDistanceAttenuation({\n      lightDistance,\n      cutoffDistance: cutoffDistanceNode,\n      decayExponent: decayExponentNode\n    });\n    const lightColor = colorNode.mul(lightAttenuation);\n    const reflectedLight = builder.context.reflectedLight;\n    lightingModel.direct({\n      lightDirection,\n      lightColor,\n      reflectedLight\n    }, builder.stack, builder);\n  }\n}\nexport default PointLightNode;\naddNodeClass('PointLightNode', PointLightNode);\naddLightNode(PointLight, PointLightNode);","map":{"version":3,"names":["AnalyticLightNode","addLightNode","getDistanceAttenuation","uniform","objectViewPosition","positionView","addNodeClass","PointLight","PointLightNode","constructor","light","arguments","length","undefined","cutoffDistanceNode","decayExponentNode","update","frame","value","distance","decay","setup","builder","colorNode","lightingModel","context","lVector","sub","lightDirection","normalize","lightDistance","lightAttenuation","cutoffDistance","decayExponent","lightColor","mul","reflectedLight","direct","stack"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/lighting/PointLightNode.js"],"sourcesContent":["import AnalyticLightNode from './AnalyticLightNode.js';\nimport { addLightNode } from './LightsNode.js';\nimport { getDistanceAttenuation } from './LightUtils.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { objectViewPosition } from '../accessors/Object3DNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { addNodeClass } from '../core/Node.js';\n\nimport { PointLight } from 'three';\n\nclass PointLightNode extends AnalyticLightNode {\n\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\tthis.cutoffDistanceNode = uniform( 0 );\n\t\tthis.decayExponentNode = uniform( 0 );\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tconst { light } = this;\n\n\t\tsuper.update( frame );\n\n\t\tthis.cutoffDistanceNode.value = light.distance;\n\t\tthis.decayExponentNode.value = light.decay;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\n\n\t\tconst lightingModel = builder.context.lightingModel;\n\n\t\tconst lVector = objectViewPosition( light ).sub( positionView ); // @TODO: Add it into LightNode\n\n\t\tconst lightDirection = lVector.normalize();\n\t\tconst lightDistance = lVector.length();\n\n\t\tconst lightAttenuation = getDistanceAttenuation( {\n\t\t\tlightDistance,\n\t\t\tcutoffDistance: cutoffDistanceNode,\n\t\t\tdecayExponent: decayExponentNode\n\t\t} );\n\n\t\tconst lightColor = colorNode.mul( lightAttenuation );\n\n\t\tconst reflectedLight = builder.context.reflectedLight;\n\n\t\tlightingModel.direct( {\n\t\t\tlightDirection,\n\t\t\tlightColor,\n\t\t\treflectedLight\n\t\t}, builder.stack, builder );\n\n\t}\n\n}\n\nexport default PointLightNode;\n\naddNodeClass( 'PointLightNode', PointLightNode );\n\naddLightNode( PointLight, PointLightNode );\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,wBAAwB;AACtD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,UAAU,QAAQ,OAAO;AAElC,MAAMC,cAAc,SAASR,iBAAiB,CAAC;EAE9CS,WAAWA,CAAA,EAAiB;IAAA,IAAfC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAExB,KAAK,CAAED,KAAM,CAAC;IAEd,IAAI,CAACI,kBAAkB,GAAGX,OAAO,CAAE,CAAE,CAAC;IACtC,IAAI,CAACY,iBAAiB,GAAGZ,OAAO,CAAE,CAAE,CAAC;EAEtC;EAEAa,MAAMA,CAAEC,KAAK,EAAG;IAEf,MAAM;MAAEP;IAAM,CAAC,GAAG,IAAI;IAEtB,KAAK,CAACM,MAAM,CAAEC,KAAM,CAAC;IAErB,IAAI,CAACH,kBAAkB,CAACI,KAAK,GAAGR,KAAK,CAACS,QAAQ;IAC9C,IAAI,CAACJ,iBAAiB,CAACG,KAAK,GAAGR,KAAK,CAACU,KAAK;EAE3C;EAEAC,KAAKA,CAAEC,OAAO,EAAG;IAEhB,MAAM;MAAEC,SAAS;MAAET,kBAAkB;MAAEC,iBAAiB;MAAEL;IAAM,CAAC,GAAG,IAAI;IAExE,MAAMc,aAAa,GAAGF,OAAO,CAACG,OAAO,CAACD,aAAa;IAEnD,MAAME,OAAO,GAAGtB,kBAAkB,CAAEM,KAAM,CAAC,CAACiB,GAAG,CAAEtB,YAAa,CAAC,CAAC,CAAC;;IAEjE,MAAMuB,cAAc,GAAGF,OAAO,CAACG,SAAS,CAAC,CAAC;IAC1C,MAAMC,aAAa,GAAGJ,OAAO,CAACd,MAAM,CAAC,CAAC;IAEtC,MAAMmB,gBAAgB,GAAG7B,sBAAsB,CAAE;MAChD4B,aAAa;MACbE,cAAc,EAAElB,kBAAkB;MAClCmB,aAAa,EAAElB;IAChB,CAAE,CAAC;IAEH,MAAMmB,UAAU,GAAGX,SAAS,CAACY,GAAG,CAAEJ,gBAAiB,CAAC;IAEpD,MAAMK,cAAc,GAAGd,OAAO,CAACG,OAAO,CAACW,cAAc;IAErDZ,aAAa,CAACa,MAAM,CAAE;MACrBT,cAAc;MACdM,UAAU;MACVE;IACD,CAAC,EAAEd,OAAO,CAACgB,KAAK,EAAEhB,OAAQ,CAAC;EAE5B;AAED;AAEA,eAAed,cAAc;AAE7BF,YAAY,CAAE,gBAAgB,EAAEE,cAAe,CAAC;AAEhDP,YAAY,CAAEM,UAAU,EAAEC,cAAe,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}