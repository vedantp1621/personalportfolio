{"ast":null,"code":"import _classCallCheck from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { normalView } from '../accessors/NormalNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { faceDirection } from './FrontFacingNode.js';\nimport { addNodeElement, tslFn, nodeProxy, float, vec2 } from '../shadernode/ShaderNode.js';\n\n// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\n\n// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\nvar dHdxy_fwd = tslFn(function (_ref) {\n  var textureNode = _ref.textureNode,\n    bumpScale = _ref.bumpScale;\n  var texNode = textureNode;\n  if (texNode.isTextureNode !== true) {\n    texNode.traverse(function (node) {\n      if (node.isTextureNode === true) texNode = node;\n    });\n  }\n  if (texNode.isTextureNode !== true) {\n    throw new Error('THREE.TSL: dHdxy_fwd() requires a TextureNode.');\n  }\n  var Hll = float(textureNode);\n  var uvNode = texNode.uvNode || uv();\n\n  // It's used to preserve the same TextureNode instance\n  var sampleTexture = function sampleTexture(uv) {\n    return textureNode.cache().context({\n      getUV: function getUV() {\n        return uv;\n      },\n      forceUVContext: true\n    });\n  };\n  return vec2(float(sampleTexture(uvNode.add(uvNode.dFdx()))).sub(Hll), float(sampleTexture(uvNode.add(uvNode.dFdy()))).sub(Hll)).mul(bumpScale);\n});\nvar perturbNormalArb = tslFn(function (inputs) {\n  var surf_pos = inputs.surf_pos,\n    surf_norm = inputs.surf_norm,\n    dHdxy = inputs.dHdxy;\n\n  // normalize is done to ensure that the bump map looks the same regardless of the texture's scale\n  var vSigmaX = surf_pos.dFdx().normalize();\n  var vSigmaY = surf_pos.dFdy().normalize();\n  var vN = surf_norm; // normalized\n\n  var R1 = vSigmaY.cross(vN);\n  var R2 = vN.cross(vSigmaX);\n  var fDet = vSigmaX.dot(R1).mul(faceDirection);\n  var vGrad = fDet.sign().mul(dHdxy.x.mul(R1).add(dHdxy.y.mul(R2)));\n  return fDet.abs().mul(surf_norm).sub(vGrad).normalize();\n});\nvar BumpMapNode = /*#__PURE__*/function (_TempNode) {\n  _inherits(BumpMapNode, _TempNode);\n  var _super = _createSuper(BumpMapNode);\n  function BumpMapNode(textureNode) {\n    var _this;\n    var scaleNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    _classCallCheck(this, BumpMapNode);\n    _this = _super.call(this, 'vec3');\n    _this.textureNode = textureNode;\n    _this.scaleNode = scaleNode;\n    return _this;\n  }\n  _createClass(BumpMapNode, [{\n    key: \"setup\",\n    value: function setup() {\n      var bumpScale = this.scaleNode !== null ? this.scaleNode : 1;\n      var dHdxy = dHdxy_fwd({\n        textureNode: this.textureNode,\n        bumpScale: bumpScale\n      });\n      return perturbNormalArb({\n        surf_pos: positionView,\n        surf_norm: normalView,\n        dHdxy: dHdxy\n      });\n    }\n  }]);\n  return BumpMapNode;\n}(TempNode);\nexport default BumpMapNode;\nexport var bumpMap = nodeProxy(BumpMapNode);\naddNodeElement('bumpMap', bumpMap);\naddNodeClass('BumpMapNode', BumpMapNode);","map":{"version":3,"names":["TempNode","addNodeClass","uv","normalView","positionView","faceDirection","addNodeElement","tslFn","nodeProxy","float","vec2","dHdxy_fwd","_ref","textureNode","bumpScale","texNode","isTextureNode","traverse","node","Error","Hll","uvNode","sampleTexture","cache","context","getUV","forceUVContext","add","dFdx","sub","dFdy","mul","perturbNormalArb","inputs","surf_pos","surf_norm","dHdxy","vSigmaX","normalize","vSigmaY","vN","R1","cross","R2","fDet","dot","vGrad","sign","x","y","abs","BumpMapNode","_TempNode","_inherits","_super","_createSuper","_this","scaleNode","arguments","length","undefined","_classCallCheck","call","_createClass","key","value","setup","bumpMap"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/display/BumpMapNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { normalView } from '../accessors/NormalNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { faceDirection } from './FrontFacingNode.js';\nimport { addNodeElement, tslFn, nodeProxy, float, vec2 } from '../shadernode/ShaderNode.js';\n\n// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\n\n// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\nconst dHdxy_fwd = tslFn( ( { textureNode, bumpScale } ) => {\n\n\tlet texNode = textureNode;\n\n\tif ( texNode.isTextureNode !== true ) {\n\n\t\ttexNode.traverse( ( node ) => {\n\n\t\t\tif ( node.isTextureNode === true ) texNode = node;\n\n\t\t} );\n\n\t}\n\n\tif ( texNode.isTextureNode !== true ) {\n\n\t\tthrow new Error( 'THREE.TSL: dHdxy_fwd() requires a TextureNode.' );\n\n\t}\n\n\tconst Hll = float( textureNode );\n\tconst uvNode = texNode.uvNode || uv();\n\n\t// It's used to preserve the same TextureNode instance\n\tconst sampleTexture = ( uv ) => textureNode.cache().context( { getUV: () => uv, forceUVContext: true } );\n\n\treturn vec2(\n\t\tfloat( sampleTexture( uvNode.add( uvNode.dFdx() ) ) ).sub( Hll ),\n\t\tfloat( sampleTexture( uvNode.add( uvNode.dFdy() ) ) ).sub( Hll )\n\t).mul( bumpScale );\n\n} );\n\nconst perturbNormalArb = tslFn( ( inputs ) => {\n\n\tconst { surf_pos, surf_norm, dHdxy } = inputs;\n\n\t// normalize is done to ensure that the bump map looks the same regardless of the texture's scale\n\tconst vSigmaX = surf_pos.dFdx().normalize();\n\tconst vSigmaY = surf_pos.dFdy().normalize();\n\tconst vN = surf_norm; // normalized\n\n\tconst R1 = vSigmaY.cross( vN );\n\tconst R2 = vN.cross( vSigmaX );\n\n\tconst fDet = vSigmaX.dot( R1 ).mul( faceDirection );\n\n\tconst vGrad = fDet.sign().mul( dHdxy.x.mul( R1 ).add( dHdxy.y.mul( R2 ) ) );\n\n\treturn fDet.abs().mul( surf_norm ).sub( vGrad ).normalize();\n\n} );\n\nclass BumpMapNode extends TempNode {\n\n\tconstructor( textureNode, scaleNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.textureNode = textureNode;\n\t\tthis.scaleNode = scaleNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst bumpScale = this.scaleNode !== null ? this.scaleNode : 1;\n\t\tconst dHdxy = dHdxy_fwd( { textureNode: this.textureNode, bumpScale } );\n\n\t\treturn perturbNormalArb( {\n\t\t\tsurf_pos: positionView,\n\t\t\tsurf_norm: normalView,\n\t\t\tdHdxy\n\t\t} );\n\n\t}\n\n}\n\nexport default BumpMapNode;\n\nexport const bumpMap = nodeProxy( BumpMapNode );\n\naddNodeElement( 'bumpMap', bumpMap );\n\naddNodeClass( 'BumpMapNode', BumpMapNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}