{"ast":null,"code":"import Node, { addNodeClass } from './Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nclass VarNode extends Node {\n  constructor(node) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n    this.node = node;\n    this.name = name;\n    this.isVarNode = true;\n  }\n  isGlobal() {\n    return true;\n  }\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n  getNodeType(builder) {\n    return this.node.getNodeType(builder);\n  }\n  generate(builder) {\n    const {\n      node,\n      name\n    } = this;\n    const nodeVar = builder.getVarFromNode(this, name, builder.getVectorType(this.getNodeType(builder)));\n    const propertyName = builder.getPropertyName(nodeVar);\n    const snippet = node.build(builder, nodeVar.type);\n    builder.addLineFlowCode(`${propertyName} = ${snippet}`);\n    return propertyName;\n  }\n}\nexport default VarNode;\nexport const temp = nodeProxy(VarNode);\naddNodeElement('temp', temp); // @TODO: Will be removed in the future\naddNodeElement('toVar', function () {\n  return temp(...arguments).append();\n});\naddNodeClass('VarNode', VarNode);","map":{"version":3,"names":["Node","addNodeClass","addNodeElement","nodeProxy","VarNode","constructor","node","name","arguments","length","undefined","isVarNode","isGlobal","getHash","builder","getNodeType","generate","nodeVar","getVarFromNode","getVectorType","propertyName","getPropertyName","snippet","build","type","addLineFlowCode","temp","append"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/core/VarNode.js"],"sourcesContent":["import Node, { addNodeClass } from './Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\n\nclass VarNode extends Node {\n\n\tconstructor( node, name = null ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.name = name;\n\n\t\tthis.isVarNode = true;\n\n\t}\n\n\tisGlobal() {\n\n\t\treturn true;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { node, name } = this;\n\n\t\tconst nodeVar = builder.getVarFromNode( this, name, builder.getVectorType( this.getNodeType( builder ) ) );\n\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\tconst snippet = node.build( builder, nodeVar.type );\n\n\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\n\n\t\treturn propertyName;\n\n\t}\n\n}\n\nexport default VarNode;\n\nexport const temp = nodeProxy( VarNode );\n\naddNodeElement( 'temp', temp ); // @TODO: Will be removed in the future\naddNodeElement( 'toVar', ( ...params ) => temp( ...params ).append() );\n\naddNodeClass( 'VarNode', VarNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,WAAW;AAC9C,SAASC,cAAc,EAAEC,SAAS,QAAQ,6BAA6B;AAEvE,MAAMC,OAAO,SAASJ,IAAI,CAAC;EAE1BK,WAAWA,CAAEC,IAAI,EAAgB;IAAA,IAAdC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAE7B,KAAK,CAAC,CAAC;IAEP,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAEhB,IAAI,CAACI,SAAS,GAAG,IAAI;EAEtB;EAEAC,QAAQA,CAAA,EAAG;IAEV,OAAO,IAAI;EAEZ;EAEAC,OAAOA,CAAEC,OAAO,EAAG;IAElB,OAAO,IAAI,CAACP,IAAI,IAAI,KAAK,CAACM,OAAO,CAAEC,OAAQ,CAAC;EAE7C;EAEAC,WAAWA,CAAED,OAAO,EAAG;IAEtB,OAAO,IAAI,CAACR,IAAI,CAACS,WAAW,CAAED,OAAQ,CAAC;EAExC;EAEAE,QAAQA,CAAEF,OAAO,EAAG;IAEnB,MAAM;MAAER,IAAI;MAAEC;IAAK,CAAC,GAAG,IAAI;IAE3B,MAAMU,OAAO,GAAGH,OAAO,CAACI,cAAc,CAAE,IAAI,EAAEX,IAAI,EAAEO,OAAO,CAACK,aAAa,CAAE,IAAI,CAACJ,WAAW,CAAED,OAAQ,CAAE,CAAE,CAAC;IAE1G,MAAMM,YAAY,GAAGN,OAAO,CAACO,eAAe,CAAEJ,OAAQ,CAAC;IAEvD,MAAMK,OAAO,GAAGhB,IAAI,CAACiB,KAAK,CAAET,OAAO,EAAEG,OAAO,CAACO,IAAK,CAAC;IAEnDV,OAAO,CAACW,eAAe,CAAG,GAAEL,YAAa,MAAKE,OAAQ,EAAE,CAAC;IAEzD,OAAOF,YAAY;EAEpB;AAED;AAEA,eAAehB,OAAO;AAEtB,OAAO,MAAMsB,IAAI,GAAGvB,SAAS,CAAEC,OAAQ,CAAC;AAExCF,cAAc,CAAE,MAAM,EAAEwB,IAAK,CAAC,CAAC,CAAC;AAChCxB,cAAc,CAAE,OAAO,EAAE;EAAA,OAAiBwB,IAAI,CAAE,GAAAlB,SAAU,CAAC,CAACmB,MAAM,CAAC,CAAC;AAAA,CAAC,CAAC;AAEtE1B,YAAY,CAAE,SAAS,EAAEG,OAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}