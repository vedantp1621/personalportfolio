{"ast":null,"code":"import { NodeUpdateType } from './constants.js';\nclass NodeFrame {\n  constructor() {\n    this.time = 0;\n    this.deltaTime = 0;\n    this.frameId = 0;\n    this.renderId = 0;\n    this.startTime = null;\n    this.updateMap = new WeakMap();\n    this.updateBeforeMap = new WeakMap();\n    this.renderer = null;\n    this.material = null;\n    this.camera = null;\n    this.object = null;\n    this.scene = null;\n  }\n  _getMaps(referenceMap, nodeRef) {\n    let maps = referenceMap.get(nodeRef);\n    if (maps === undefined) {\n      maps = {\n        renderMap: new WeakMap(),\n        frameMap: new WeakMap()\n      };\n      referenceMap.set(nodeRef, maps);\n    }\n    return maps;\n  }\n  updateBeforeNode(node) {\n    const updateType = node.getUpdateBeforeType();\n    const reference = node.updateReference(this);\n    if (updateType === NodeUpdateType.FRAME) {\n      const {\n        frameMap\n      } = this._getMaps(this.updateBeforeMap, reference);\n      if (frameMap.get(node) !== this.frameId) {\n        if (node.updateBefore(this) !== false) {\n          frameMap.set(node, this.frameId);\n        }\n      }\n    } else if (updateType === NodeUpdateType.RENDER) {\n      const {\n        renderMap\n      } = this._getMaps(this.updateBeforeMap, reference);\n      if (renderMap.get(node) !== this.renderId) {\n        if (node.updateBefore(this) !== false) {\n          renderMap.set(node, this.renderId);\n        }\n      }\n    } else if (updateType === NodeUpdateType.OBJECT) {\n      node.updateBefore(this);\n    }\n  }\n  updateNode(node) {\n    const updateType = node.getUpdateType();\n    const reference = node.updateReference(this);\n    if (updateType === NodeUpdateType.FRAME) {\n      const {\n        frameMap\n      } = this._getMaps(this.updateMap, reference);\n      if (frameMap.get(node) !== this.frameId) {\n        if (node.update(this) !== false) {\n          frameMap.set(node, this.frameId);\n        }\n      }\n    } else if (updateType === NodeUpdateType.RENDER) {\n      const {\n        renderMap\n      } = this._getMaps(this.updateMap, reference);\n      if (renderMap.get(node) !== this.renderId) {\n        if (node.update(this) !== false) {\n          renderMap.set(node, this.renderId);\n        }\n      }\n    } else if (updateType === NodeUpdateType.OBJECT) {\n      node.update(this);\n    }\n  }\n  update() {\n    this.frameId++;\n    if (this.lastTime === undefined) this.lastTime = performance.now();\n    this.deltaTime = (performance.now() - this.lastTime) / 1000;\n    this.lastTime = performance.now();\n    this.time += this.deltaTime;\n  }\n}\nexport default NodeFrame;","map":{"version":3,"names":["NodeUpdateType","NodeFrame","constructor","time","deltaTime","frameId","renderId","startTime","updateMap","WeakMap","updateBeforeMap","renderer","material","camera","object","scene","_getMaps","referenceMap","nodeRef","maps","get","undefined","renderMap","frameMap","set","updateBeforeNode","node","updateType","getUpdateBeforeType","reference","updateReference","FRAME","updateBefore","RENDER","OBJECT","updateNode","getUpdateType","update","lastTime","performance","now"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/core/NodeFrame.js"],"sourcesContent":["import { NodeUpdateType } from './constants.js';\n\nclass NodeFrame {\n\n\tconstructor() {\n\n\t\tthis.time = 0;\n\t\tthis.deltaTime = 0;\n\n\t\tthis.frameId = 0;\n\t\tthis.renderId = 0;\n\n\t\tthis.startTime = null;\n\n\t\tthis.updateMap = new WeakMap();\n\t\tthis.updateBeforeMap = new WeakMap();\n\n\t\tthis.renderer = null;\n\t\tthis.material = null;\n\t\tthis.camera = null;\n\t\tthis.object = null;\n\t\tthis.scene = null;\n\n\t}\n\n\t_getMaps( referenceMap, nodeRef ) {\n\n\t\tlet maps = referenceMap.get( nodeRef );\n\n\t\tif ( maps === undefined ) {\n\n\t\t\tmaps = {\n\t\t\t\trenderMap: new WeakMap(),\n\t\t\t\tframeMap: new WeakMap()\n\t\t\t};\n\n\t\t\treferenceMap.set( nodeRef, maps );\n\n\t\t}\n\n\t\treturn maps;\n\n\t}\n\n\tupdateBeforeNode( node ) {\n\n\t\tconst updateType = node.getUpdateBeforeType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tconst { frameMap } = this._getMaps( this.updateBeforeMap, reference );\n\n\t\t\tif ( frameMap.get( node ) !== this.frameId ) {\n\n\t\t\t\tif ( node.updateBefore( this ) !== false ) {\n\n\t\t\t\t\tframeMap.set( node, this.frameId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tconst { renderMap } = this._getMaps( this.updateBeforeMap, reference );\n\n\t\t\tif ( renderMap.get( node ) !== this.renderId ) {\n\n\t\t\t\tif ( node.updateBefore( this ) !== false ) {\n\n\t\t\t\t\trenderMap.set( node, this.renderId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.updateBefore( this );\n\n\t\t}\n\n\t}\n\n\tupdateNode( node ) {\n\n\t\tconst updateType = node.getUpdateType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tconst { frameMap } = this._getMaps( this.updateMap, reference );\n\n\t\t\tif ( frameMap.get( node ) !== this.frameId ) {\n\n\t\t\t\tif ( node.update( this ) !== false ) {\n\n\t\t\t\t\tframeMap.set( node, this.frameId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tconst { renderMap } = this._getMaps( this.updateMap, reference );\n\n\t\t\tif ( renderMap.get( node ) !== this.renderId ) {\n\n\t\t\t\tif ( node.update( this ) !== false ) {\n\n\t\t\t\t\trenderMap.set( node, this.renderId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.update( this );\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tthis.frameId ++;\n\n\t\tif ( this.lastTime === undefined ) this.lastTime = performance.now();\n\n\t\tthis.deltaTime = ( performance.now() - this.lastTime ) / 1000;\n\n\t\tthis.lastTime = performance.now();\n\n\t\tthis.time += this.deltaTime;\n\n\t}\n\n}\n\nexport default NodeFrame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}