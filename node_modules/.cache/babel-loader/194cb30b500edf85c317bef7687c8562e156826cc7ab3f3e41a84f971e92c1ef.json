{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { nodeImmutable, float } from '../shadernode/ShaderNode.js';\nconst _propertyCache = new Map();\nclass MaterialNode extends Node {\n  constructor(scope) {\n    super();\n    this.scope = scope;\n  }\n  getCache(property, type) {\n    let node = _propertyCache.get(property);\n    if (node === undefined) {\n      node = materialReference(property, type);\n      _propertyCache.set(property, node);\n    }\n    return node;\n  }\n  getFloat(property) {\n    return this.getCache(property, 'float');\n  }\n  getColor(property) {\n    return this.getCache(property, 'color');\n  }\n  getTexture(property) {\n    return this.getCache(property === 'map' ? 'map' : property + 'Map', 'texture');\n  }\n  setup(builder) {\n    const material = builder.context.material;\n    const scope = this.scope;\n    let node = null;\n    if (scope === MaterialNode.COLOR) {\n      const colorNode = this.getColor(scope);\n      if (material.map && material.map.isTexture === true) {\n        node = colorNode.mul(this.getTexture('map'));\n      } else {\n        node = colorNode;\n      }\n    } else if (scope === MaterialNode.OPACITY) {\n      const opacityNode = this.getFloat(scope);\n      if (material.alphaMap && material.alphaMap.isTexture === true) {\n        node = opacityNode.mul(this.getTexture('alpha'));\n      } else {\n        node = opacityNode;\n      }\n    } else if (scope === MaterialNode.SPECULAR_STRENGTH) {\n      if (material.specularMap && material.specularMap.isTexture === true) {\n        node = this.getTexture(scope).r;\n      } else {\n        node = float(1);\n      }\n    } else if (scope === MaterialNode.ROUGHNESS) {\n      // TODO: cleanup similar branches\n\n      const roughnessNode = this.getFloat(scope);\n      if (material.roughnessMap && material.roughnessMap.isTexture === true) {\n        node = roughnessNode.mul(this.getTexture(scope).g);\n      } else {\n        node = roughnessNode;\n      }\n    } else if (scope === MaterialNode.METALNESS) {\n      const metalnessNode = this.getFloat(scope);\n      if (material.metalnessMap && material.metalnessMap.isTexture === true) {\n        node = metalnessNode.mul(this.getTexture(scope).b);\n      } else {\n        node = metalnessNode;\n      }\n    } else if (scope === MaterialNode.EMISSIVE) {\n      const emissiveNode = this.getColor(scope);\n      if (material.emissiveMap && material.emissiveMap.isTexture === true) {\n        node = emissiveNode.mul(this.getTexture(scope));\n      } else {\n        node = emissiveNode;\n      }\n    } else if (scope === MaterialNode.NORMAL) {\n      if (material.normalMap) {\n        node = this.getTexture('normal').normalMap(this.getCache('normalScale', 'vec2'));\n      } else if (material.bumpMap) {\n        node = this.getTexture('bump').r.bumpMap(this.getFloat('bumpScale'));\n      } else {\n        node = normalView;\n      }\n    } else if (scope === MaterialNode.CLEARCOAT) {\n      const clearcoatNode = this.getFloat(scope);\n      if (material.clearcoatMap && material.clearcoatMap.isTexture === true) {\n        node = clearcoatNode.mul(this.getTexture(scope).r);\n      } else {\n        node = clearcoatNode;\n      }\n    } else if (scope === MaterialNode.CLEARCOAT_ROUGHNESS) {\n      const clearcoatRoughnessNode = this.getFloat(scope);\n      if (material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true) {\n        node = clearcoatRoughnessNode.mul(this.getTexture(scope).r);\n      } else {\n        node = clearcoatRoughnessNode;\n      }\n    } else if (scope === MaterialNode.CLEARCOAT_NORMAL) {\n      if (material.clearcoatNormalMap) {\n        node = this.getTexture(scope).normalMap(this.getCache(scope + 'Scale', 'vec2'));\n      } else {\n        node = normalView;\n      }\n    } else if (scope === MaterialNode.SHEEN) {\n      const sheenNode = this.getColor('sheenColor').mul(this.getFloat('sheen')); // Move this mul() to CPU\n\n      if (material.sheenColorMap && material.sheenColorMap.isTexture === true) {\n        node = sheenNode.mul(this.getTexture('sheenColor').rgb);\n      } else {\n        node = sheenNode;\n      }\n    } else if (scope === MaterialNode.SHEEN_ROUGHNESS) {\n      const sheenRoughnessNode = this.getFloat(scope);\n      if (material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true) {\n        node = sheenRoughnessNode.mul(this.getTexture(scope).a);\n      } else {\n        node = sheenRoughnessNode;\n      }\n      node = node.clamp(0.07, 1.0);\n    } else if (scope === MaterialNode.IRIDESCENCE_THICKNESS) {\n      const iridescenceThicknessMaximum = reference(1, 'float', material.iridescenceThicknessRange);\n      if (material.iridescenceThicknessMap) {\n        const iridescenceThicknessMinimum = reference(0, 'float', material.iridescenceThicknessRange);\n        node = iridescenceThicknessMaximum.sub(iridescenceThicknessMinimum).mul(this.getTexture(scope).g).add(iridescenceThicknessMinimum);\n      } else {\n        node = iridescenceThicknessMaximum;\n      }\n    } else {\n      const outputType = this.getNodeType(builder);\n      node = this.getCache(scope, outputType);\n    }\n    return node;\n  }\n}\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR_COLOR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.NORMAL = 'normal';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\nMaterialNode.LINE_SCALE = 'scale';\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\nMaterialNode.LINE_WIDTH = 'linewidth';\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\nMaterialNode.POINT_WIDTH = 'pointWidth';\nexport default MaterialNode;\nexport const materialAlphaTest = nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);\nexport const materialColor = nodeImmutable(MaterialNode, MaterialNode.COLOR);\nexport const materialShininess = nodeImmutable(MaterialNode, MaterialNode.SHININESS);\nexport const materialEmissive = nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);\nexport const materialOpacity = nodeImmutable(MaterialNode, MaterialNode.OPACITY);\nexport const materialSpecularColor = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);\nexport const materialSpecularStrength = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_STRENGTH);\nexport const materialReflectivity = nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);\nexport const materialRoughness = nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);\nexport const materialMetalness = nodeImmutable(MaterialNode, MaterialNode.METALNESS);\nexport const materialNormal = nodeImmutable(MaterialNode, MaterialNode.NORMAL);\nexport const materialClearcoat = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT);\nexport const materialClearcoatRoughness = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS);\nexport const materialClearcoatNormal = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_NORMAL);\nexport const materialRotation = nodeImmutable(MaterialNode, MaterialNode.ROTATION);\nexport const materialSheen = nodeImmutable(MaterialNode, MaterialNode.SHEEN);\nexport const materialSheenRoughness = nodeImmutable(MaterialNode, MaterialNode.SHEEN_ROUGHNESS);\nexport const materialIridescence = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE);\nexport const materialIridescenceIOR = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_IOR);\nexport const materialIridescenceThickness = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS);\nexport const materialLineScale = nodeImmutable(MaterialNode, MaterialNode.LINE_SCALE);\nexport const materialLineDashSize = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_SIZE);\nexport const materialLineGapSize = nodeImmutable(MaterialNode, MaterialNode.LINE_GAP_SIZE);\nexport const materialLineWidth = nodeImmutable(MaterialNode, MaterialNode.LINE_WIDTH);\nexport const materialLineDashOffset = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_OFFSET);\nexport const materialPointWidth = nodeImmutable(MaterialNode, MaterialNode.POINT_WIDTH);\naddNodeClass('MaterialNode', MaterialNode);","map":{"version":3,"names":["Node","addNodeClass","reference","materialReference","normalView","nodeImmutable","float","_propertyCache","Map","MaterialNode","constructor","scope","getCache","property","type","node","get","undefined","set","getFloat","getColor","getTexture","setup","builder","material","context","COLOR","colorNode","map","isTexture","mul","OPACITY","opacityNode","alphaMap","SPECULAR_STRENGTH","specularMap","r","ROUGHNESS","roughnessNode","roughnessMap","g","METALNESS","metalnessNode","metalnessMap","b","EMISSIVE","emissiveNode","emissiveMap","NORMAL","normalMap","bumpMap","CLEARCOAT","clearcoatNode","clearcoatMap","CLEARCOAT_ROUGHNESS","clearcoatRoughnessNode","clearcoatRoughnessMap","CLEARCOAT_NORMAL","clearcoatNormalMap","SHEEN","sheenNode","sheenColorMap","rgb","SHEEN_ROUGHNESS","sheenRoughnessNode","sheenRoughnessMap","a","clamp","IRIDESCENCE_THICKNESS","iridescenceThicknessMaximum","iridescenceThicknessRange","iridescenceThicknessMap","iridescenceThicknessMinimum","sub","add","outputType","getNodeType","ALPHA_TEST","SHININESS","SPECULAR_COLOR","REFLECTIVITY","ROTATION","IRIDESCENCE","IRIDESCENCE_IOR","LINE_SCALE","LINE_DASH_SIZE","LINE_GAP_SIZE","LINE_WIDTH","LINE_DASH_OFFSET","POINT_WIDTH","materialAlphaTest","materialColor","materialShininess","materialEmissive","materialOpacity","materialSpecularColor","materialSpecularStrength","materialReflectivity","materialRoughness","materialMetalness","materialNormal","materialClearcoat","materialClearcoatRoughness","materialClearcoatNormal","materialRotation","materialSheen","materialSheenRoughness","materialIridescence","materialIridescenceIOR","materialIridescenceThickness","materialLineScale","materialLineDashSize","materialLineGapSize","materialLineWidth","materialLineDashOffset","materialPointWidth"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/accessors/MaterialNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { nodeImmutable, float } from '../shadernode/ShaderNode.js';\n\nconst _propertyCache = new Map();\n\nclass MaterialNode extends Node {\n\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetCache( property, type ) {\n\n\t\tlet node = _propertyCache.get( property );\n\n\t\tif ( node === undefined ) {\n\n\t\t\tnode = materialReference( property, type );\n\n\t\t\t_propertyCache.set( property, node );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tgetFloat( property ) {\n\n\t\treturn this.getCache( property, 'float' );\n\n\t}\n\n\tgetColor( property ) {\n\n\t\treturn this.getCache( property, 'color' );\n\n\t}\n\n\tgetTexture( property ) {\n\n\t\treturn this.getCache( property === 'map' ? 'map' : property + 'Map', 'texture' );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst material = builder.context.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === MaterialNode.COLOR ) {\n\n\t\t\tconst colorNode = this.getColor( scope );\n\n\t\t\tif ( material.map && material.map.isTexture === true ) {\n\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = colorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\n\n\t\t\tconst opacityNode = this.getFloat( scope );\n\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\n\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alpha' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = opacityNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {\n\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\n\n\t\t\t\tnode = this.getTexture( scope ).r;\n\n\t\t\t} else {\n\n\t\t\t\tnode = float( 1 );\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) { // TODO: cleanup similar branches\n\n\t\t\tconst roughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( scope ).g );\n\n\t\t\t} else {\n\n\t\t\t\tnode = roughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\n\n\t\t\tconst metalnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\n\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( scope ).b );\n\n\t\t\t} else {\n\n\t\t\t\tnode = metalnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\tconst emissiveNode = this.getColor( scope );\n\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\n\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( scope ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = emissiveNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.NORMAL ) {\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tnode = this.getTexture( 'normal' ).normalMap( this.getCache( 'normalScale', 'vec2' ) );\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tnode = this.getTexture( 'bump' ).r.bumpMap( this.getFloat( 'bumpScale' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT ) {\n\n\t\t\tconst clearcoatNode = this.getFloat( scope );\n\n\t\t\tif ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {\n\n\t\t\tconst clearcoatRoughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatRoughnessNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatRoughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_NORMAL ) {\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tnode = this.getTexture( scope ).normalMap( this.getCache( scope + 'Scale', 'vec2' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN ) {\n\n\t\t\tconst sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU\n\n\t\t\tif ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenNode.mul( this.getTexture( 'sheenColor' ).rgb );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {\n\n\t\t\tconst sheenRoughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenRoughnessNode.mul( this.getTexture( scope ).a );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenRoughnessNode;\n\n\t\t\t}\n\n\t\t\tnode = node.clamp( 0.07, 1.0 );\n\n\t\t} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {\n\n\t\t\tconst iridescenceThicknessMaximum = reference( 1, 'float', material.iridescenceThicknessRange );\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tconst iridescenceThicknessMinimum = reference( 0, 'float', material.iridescenceThicknessRange );\n\n\t\t\t\tnode = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( scope ).g ).add( iridescenceThicknessMinimum );\n\n\t\t\t} else {\n\n\t\t\t\tnode = iridescenceThicknessMaximum;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst outputType = this.getNodeType( builder );\n\n\t\t\tnode = this.getCache( scope, outputType );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR_COLOR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.NORMAL = 'normal';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\nMaterialNode.LINE_SCALE = 'scale';\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\nMaterialNode.LINE_WIDTH = 'linewidth';\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\nMaterialNode.POINT_WIDTH = 'pointWidth';\n\nexport default MaterialNode;\n\nexport const materialAlphaTest = nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\nexport const materialColor = nodeImmutable( MaterialNode, MaterialNode.COLOR );\nexport const materialShininess = nodeImmutable( MaterialNode, MaterialNode.SHININESS );\nexport const materialEmissive = nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\nexport const materialOpacity = nodeImmutable( MaterialNode, MaterialNode.OPACITY );\nexport const materialSpecularColor = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\nexport const materialSpecularStrength = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );\nexport const materialReflectivity = nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\nexport const materialRoughness = nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\nexport const materialMetalness = nodeImmutable( MaterialNode, MaterialNode.METALNESS );\nexport const materialNormal = nodeImmutable( MaterialNode, MaterialNode.NORMAL );\nexport const materialClearcoat = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );\nexport const materialClearcoatRoughness = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );\nexport const materialClearcoatNormal = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_NORMAL );\nexport const materialRotation = nodeImmutable( MaterialNode, MaterialNode.ROTATION );\nexport const materialSheen = nodeImmutable( MaterialNode, MaterialNode.SHEEN );\nexport const materialSheenRoughness = nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );\nexport const materialIridescence = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );\nexport const materialIridescenceIOR = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );\nexport const materialIridescenceThickness = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );\nexport const materialLineScale = nodeImmutable( MaterialNode, MaterialNode.LINE_SCALE );\nexport const materialLineDashSize = nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_SIZE );\nexport const materialLineGapSize = nodeImmutable( MaterialNode, MaterialNode.LINE_GAP_SIZE );\nexport const materialLineWidth = nodeImmutable( MaterialNode, MaterialNode.LINE_WIDTH );\nexport const materialLineDashOffset = nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_OFFSET );\nexport const materialPointWidth = nodeImmutable( MaterialNode, MaterialNode.POINT_WIDTH );\n\naddNodeClass( 'MaterialNode', MaterialNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}