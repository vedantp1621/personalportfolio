{"ast":null,"code":"import _classCallCheck from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { nodeImmutable, float } from '../shadernode/ShaderNode.js';\nvar _propertyCache = new Map();\nvar MaterialNode = /*#__PURE__*/function (_Node) {\n  _inherits(MaterialNode, _Node);\n  var _super = _createSuper(MaterialNode);\n  function MaterialNode(scope) {\n    var _this;\n    _classCallCheck(this, MaterialNode);\n    _this = _super.call(this);\n    _this.scope = scope;\n    return _this;\n  }\n  _createClass(MaterialNode, [{\n    key: \"getCache\",\n    value: function getCache(property, type) {\n      var node = _propertyCache.get(property);\n      if (node === undefined) {\n        node = materialReference(property, type);\n        _propertyCache.set(property, node);\n      }\n      return node;\n    }\n  }, {\n    key: \"getFloat\",\n    value: function getFloat(property) {\n      return this.getCache(property, 'float');\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor(property) {\n      return this.getCache(property, 'color');\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(property) {\n      return this.getCache(property === 'map' ? 'map' : property + 'Map', 'texture');\n    }\n  }, {\n    key: \"setup\",\n    value: function setup(builder) {\n      var material = builder.context.material;\n      var scope = this.scope;\n      var node = null;\n      if (scope === MaterialNode.COLOR) {\n        var colorNode = this.getColor(scope);\n        if (material.map && material.map.isTexture === true) {\n          node = colorNode.mul(this.getTexture('map'));\n        } else {\n          node = colorNode;\n        }\n      } else if (scope === MaterialNode.OPACITY) {\n        var opacityNode = this.getFloat(scope);\n        if (material.alphaMap && material.alphaMap.isTexture === true) {\n          node = opacityNode.mul(this.getTexture('alpha'));\n        } else {\n          node = opacityNode;\n        }\n      } else if (scope === MaterialNode.SPECULAR_STRENGTH) {\n        if (material.specularMap && material.specularMap.isTexture === true) {\n          node = this.getTexture(scope).r;\n        } else {\n          node = float(1);\n        }\n      } else if (scope === MaterialNode.ROUGHNESS) {\n        // TODO: cleanup similar branches\n\n        var roughnessNode = this.getFloat(scope);\n        if (material.roughnessMap && material.roughnessMap.isTexture === true) {\n          node = roughnessNode.mul(this.getTexture(scope).g);\n        } else {\n          node = roughnessNode;\n        }\n      } else if (scope === MaterialNode.METALNESS) {\n        var metalnessNode = this.getFloat(scope);\n        if (material.metalnessMap && material.metalnessMap.isTexture === true) {\n          node = metalnessNode.mul(this.getTexture(scope).b);\n        } else {\n          node = metalnessNode;\n        }\n      } else if (scope === MaterialNode.EMISSIVE) {\n        var emissiveNode = this.getColor(scope);\n        if (material.emissiveMap && material.emissiveMap.isTexture === true) {\n          node = emissiveNode.mul(this.getTexture(scope));\n        } else {\n          node = emissiveNode;\n        }\n      } else if (scope === MaterialNode.NORMAL) {\n        if (material.normalMap) {\n          node = this.getTexture('normal').normalMap(this.getCache('normalScale', 'vec2'));\n        } else if (material.bumpMap) {\n          node = this.getTexture('bump').r.bumpMap(this.getFloat('bumpScale'));\n        } else {\n          node = normalView;\n        }\n      } else if (scope === MaterialNode.CLEARCOAT) {\n        var clearcoatNode = this.getFloat(scope);\n        if (material.clearcoatMap && material.clearcoatMap.isTexture === true) {\n          node = clearcoatNode.mul(this.getTexture(scope).r);\n        } else {\n          node = clearcoatNode;\n        }\n      } else if (scope === MaterialNode.CLEARCOAT_ROUGHNESS) {\n        var clearcoatRoughnessNode = this.getFloat(scope);\n        if (material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true) {\n          node = clearcoatRoughnessNode.mul(this.getTexture(scope).r);\n        } else {\n          node = clearcoatRoughnessNode;\n        }\n      } else if (scope === MaterialNode.CLEARCOAT_NORMAL) {\n        if (material.clearcoatNormalMap) {\n          node = this.getTexture(scope).normalMap(this.getCache(scope + 'Scale', 'vec2'));\n        } else {\n          node = normalView;\n        }\n      } else if (scope === MaterialNode.SHEEN) {\n        var sheenNode = this.getColor('sheenColor').mul(this.getFloat('sheen')); // Move this mul() to CPU\n\n        if (material.sheenColorMap && material.sheenColorMap.isTexture === true) {\n          node = sheenNode.mul(this.getTexture('sheenColor').rgb);\n        } else {\n          node = sheenNode;\n        }\n      } else if (scope === MaterialNode.SHEEN_ROUGHNESS) {\n        var sheenRoughnessNode = this.getFloat(scope);\n        if (material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true) {\n          node = sheenRoughnessNode.mul(this.getTexture(scope).a);\n        } else {\n          node = sheenRoughnessNode;\n        }\n        node = node.clamp(0.07, 1.0);\n      } else if (scope === MaterialNode.IRIDESCENCE_THICKNESS) {\n        var iridescenceThicknessMaximum = reference(1, 'float', material.iridescenceThicknessRange);\n        if (material.iridescenceThicknessMap) {\n          var iridescenceThicknessMinimum = reference(0, 'float', material.iridescenceThicknessRange);\n          node = iridescenceThicknessMaximum.sub(iridescenceThicknessMinimum).mul(this.getTexture(scope).g).add(iridescenceThicknessMinimum);\n        } else {\n          node = iridescenceThicknessMaximum;\n        }\n      } else {\n        var outputType = this.getNodeType(builder);\n        node = this.getCache(scope, outputType);\n      }\n      return node;\n    }\n  }]);\n  return MaterialNode;\n}(Node);\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR_COLOR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.NORMAL = 'normal';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\nMaterialNode.LINE_SCALE = 'scale';\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\nMaterialNode.LINE_WIDTH = 'linewidth';\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\nMaterialNode.POINT_WIDTH = 'pointWidth';\nexport default MaterialNode;\nexport var materialAlphaTest = nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);\nexport var materialColor = nodeImmutable(MaterialNode, MaterialNode.COLOR);\nexport var materialShininess = nodeImmutable(MaterialNode, MaterialNode.SHININESS);\nexport var materialEmissive = nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);\nexport var materialOpacity = nodeImmutable(MaterialNode, MaterialNode.OPACITY);\nexport var materialSpecularColor = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);\nexport var materialSpecularStrength = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_STRENGTH);\nexport var materialReflectivity = nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);\nexport var materialRoughness = nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);\nexport var materialMetalness = nodeImmutable(MaterialNode, MaterialNode.METALNESS);\nexport var materialNormal = nodeImmutable(MaterialNode, MaterialNode.NORMAL);\nexport var materialClearcoat = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT);\nexport var materialClearcoatRoughness = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS);\nexport var materialClearcoatNormal = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_NORMAL);\nexport var materialRotation = nodeImmutable(MaterialNode, MaterialNode.ROTATION);\nexport var materialSheen = nodeImmutable(MaterialNode, MaterialNode.SHEEN);\nexport var materialSheenRoughness = nodeImmutable(MaterialNode, MaterialNode.SHEEN_ROUGHNESS);\nexport var materialIridescence = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE);\nexport var materialIridescenceIOR = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_IOR);\nexport var materialIridescenceThickness = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS);\nexport var materialLineScale = nodeImmutable(MaterialNode, MaterialNode.LINE_SCALE);\nexport var materialLineDashSize = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_SIZE);\nexport var materialLineGapSize = nodeImmutable(MaterialNode, MaterialNode.LINE_GAP_SIZE);\nexport var materialLineWidth = nodeImmutable(MaterialNode, MaterialNode.LINE_WIDTH);\nexport var materialLineDashOffset = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_OFFSET);\nexport var materialPointWidth = nodeImmutable(MaterialNode, MaterialNode.POINT_WIDTH);\naddNodeClass('MaterialNode', MaterialNode);","map":{"version":3,"names":["Node","addNodeClass","reference","materialReference","normalView","nodeImmutable","float","_propertyCache","Map","MaterialNode","_Node","_inherits","_super","_createSuper","scope","_this","_classCallCheck","call","_createClass","key","value","getCache","property","type","node","get","undefined","set","getFloat","getColor","getTexture","setup","builder","material","context","COLOR","colorNode","map","isTexture","mul","OPACITY","opacityNode","alphaMap","SPECULAR_STRENGTH","specularMap","r","ROUGHNESS","roughnessNode","roughnessMap","g","METALNESS","metalnessNode","metalnessMap","b","EMISSIVE","emissiveNode","emissiveMap","NORMAL","normalMap","bumpMap","CLEARCOAT","clearcoatNode","clearcoatMap","CLEARCOAT_ROUGHNESS","clearcoatRoughnessNode","clearcoatRoughnessMap","CLEARCOAT_NORMAL","clearcoatNormalMap","SHEEN","sheenNode","sheenColorMap","rgb","SHEEN_ROUGHNESS","sheenRoughnessNode","sheenRoughnessMap","a","clamp","IRIDESCENCE_THICKNESS","iridescenceThicknessMaximum","iridescenceThicknessRange","iridescenceThicknessMap","iridescenceThicknessMinimum","sub","add","outputType","getNodeType","ALPHA_TEST","SHININESS","SPECULAR_COLOR","REFLECTIVITY","ROTATION","IRIDESCENCE","IRIDESCENCE_IOR","LINE_SCALE","LINE_DASH_SIZE","LINE_GAP_SIZE","LINE_WIDTH","LINE_DASH_OFFSET","POINT_WIDTH","materialAlphaTest","materialColor","materialShininess","materialEmissive","materialOpacity","materialSpecularColor","materialSpecularStrength","materialReflectivity","materialRoughness","materialMetalness","materialNormal","materialClearcoat","materialClearcoatRoughness","materialClearcoatNormal","materialRotation","materialSheen","materialSheenRoughness","materialIridescence","materialIridescenceIOR","materialIridescenceThickness","materialLineScale","materialLineDashSize","materialLineGapSize","materialLineWidth","materialLineDashOffset","materialPointWidth"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/accessors/MaterialNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { nodeImmutable, float } from '../shadernode/ShaderNode.js';\n\nconst _propertyCache = new Map();\n\nclass MaterialNode extends Node {\n\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetCache( property, type ) {\n\n\t\tlet node = _propertyCache.get( property );\n\n\t\tif ( node === undefined ) {\n\n\t\t\tnode = materialReference( property, type );\n\n\t\t\t_propertyCache.set( property, node );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tgetFloat( property ) {\n\n\t\treturn this.getCache( property, 'float' );\n\n\t}\n\n\tgetColor( property ) {\n\n\t\treturn this.getCache( property, 'color' );\n\n\t}\n\n\tgetTexture( property ) {\n\n\t\treturn this.getCache( property === 'map' ? 'map' : property + 'Map', 'texture' );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst material = builder.context.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === MaterialNode.COLOR ) {\n\n\t\t\tconst colorNode = this.getColor( scope );\n\n\t\t\tif ( material.map && material.map.isTexture === true ) {\n\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = colorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\n\n\t\t\tconst opacityNode = this.getFloat( scope );\n\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\n\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alpha' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = opacityNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {\n\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\n\n\t\t\t\tnode = this.getTexture( scope ).r;\n\n\t\t\t} else {\n\n\t\t\t\tnode = float( 1 );\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) { // TODO: cleanup similar branches\n\n\t\t\tconst roughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( scope ).g );\n\n\t\t\t} else {\n\n\t\t\t\tnode = roughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\n\n\t\t\tconst metalnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\n\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( scope ).b );\n\n\t\t\t} else {\n\n\t\t\t\tnode = metalnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\tconst emissiveNode = this.getColor( scope );\n\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\n\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( scope ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = emissiveNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.NORMAL ) {\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tnode = this.getTexture( 'normal' ).normalMap( this.getCache( 'normalScale', 'vec2' ) );\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tnode = this.getTexture( 'bump' ).r.bumpMap( this.getFloat( 'bumpScale' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT ) {\n\n\t\t\tconst clearcoatNode = this.getFloat( scope );\n\n\t\t\tif ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {\n\n\t\t\tconst clearcoatRoughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatRoughnessNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatRoughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_NORMAL ) {\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tnode = this.getTexture( scope ).normalMap( this.getCache( scope + 'Scale', 'vec2' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN ) {\n\n\t\t\tconst sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU\n\n\t\t\tif ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenNode.mul( this.getTexture( 'sheenColor' ).rgb );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {\n\n\t\t\tconst sheenRoughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenRoughnessNode.mul( this.getTexture( scope ).a );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenRoughnessNode;\n\n\t\t\t}\n\n\t\t\tnode = node.clamp( 0.07, 1.0 );\n\n\t\t} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {\n\n\t\t\tconst iridescenceThicknessMaximum = reference( 1, 'float', material.iridescenceThicknessRange );\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tconst iridescenceThicknessMinimum = reference( 0, 'float', material.iridescenceThicknessRange );\n\n\t\t\t\tnode = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( scope ).g ).add( iridescenceThicknessMinimum );\n\n\t\t\t} else {\n\n\t\t\t\tnode = iridescenceThicknessMaximum;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst outputType = this.getNodeType( builder );\n\n\t\t\tnode = this.getCache( scope, outputType );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR_COLOR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.NORMAL = 'normal';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\nMaterialNode.LINE_SCALE = 'scale';\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\nMaterialNode.LINE_WIDTH = 'linewidth';\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\nMaterialNode.POINT_WIDTH = 'pointWidth';\n\nexport default MaterialNode;\n\nexport const materialAlphaTest = nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\nexport const materialColor = nodeImmutable( MaterialNode, MaterialNode.COLOR );\nexport const materialShininess = nodeImmutable( MaterialNode, MaterialNode.SHININESS );\nexport const materialEmissive = nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\nexport const materialOpacity = nodeImmutable( MaterialNode, MaterialNode.OPACITY );\nexport const materialSpecularColor = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\nexport const materialSpecularStrength = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );\nexport const materialReflectivity = nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\nexport const materialRoughness = nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\nexport const materialMetalness = nodeImmutable( MaterialNode, MaterialNode.METALNESS );\nexport const materialNormal = nodeImmutable( MaterialNode, MaterialNode.NORMAL );\nexport const materialClearcoat = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );\nexport const materialClearcoatRoughness = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );\nexport const materialClearcoatNormal = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_NORMAL );\nexport const materialRotation = nodeImmutable( MaterialNode, MaterialNode.ROTATION );\nexport const materialSheen = nodeImmutable( MaterialNode, MaterialNode.SHEEN );\nexport const materialSheenRoughness = nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );\nexport const materialIridescence = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );\nexport const materialIridescenceIOR = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );\nexport const materialIridescenceThickness = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );\nexport const materialLineScale = nodeImmutable( MaterialNode, MaterialNode.LINE_SCALE );\nexport const materialLineDashSize = nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_SIZE );\nexport const materialLineGapSize = nodeImmutable( MaterialNode, MaterialNode.LINE_GAP_SIZE );\nexport const materialLineWidth = nodeImmutable( MaterialNode, MaterialNode.LINE_WIDTH );\nexport const materialLineDashOffset = nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_OFFSET );\nexport const materialPointWidth = nodeImmutable( MaterialNode, MaterialNode.POINT_WIDTH );\n\naddNodeClass( 'MaterialNode', MaterialNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}