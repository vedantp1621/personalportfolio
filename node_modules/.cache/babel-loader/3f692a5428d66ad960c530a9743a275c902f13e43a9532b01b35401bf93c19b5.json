{"ast":null,"code":"import _slicedToArray from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vedant/Documents/GitHub/vedantpPersWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport TempNode from '../core/TempNode.js';\nimport { nodeObject, addNodeElement, tslFn, float, vec4 } from '../shadernode/ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { texturePass } from './PassNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { RenderTarget } from 'three';\nimport { sign, max } from '../math/MathNode.js';\nimport QuadMesh from '../../objects/QuadMesh.js';\nvar quadMeshComp = new QuadMesh();\nvar AfterImageNode = /*#__PURE__*/function (_TempNode) {\n  _inherits(AfterImageNode, _TempNode);\n  var _super = _createSuper(AfterImageNode);\n  function AfterImageNode(textureNode) {\n    var _this;\n    var damp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.96;\n    _classCallCheck(this, AfterImageNode);\n    _this = _super.call(this, textureNode);\n    _this.textureNode = textureNode;\n    _this.textureNodeOld = texture();\n    _this.damp = uniform(damp);\n    _this._compRT = new RenderTarget();\n    _this._compRT.texture.name = 'AfterImageNode.comp';\n    _this._oldRT = new RenderTarget();\n    _this._oldRT.texture.name = 'AfterImageNode.old';\n    _this._textureNode = texturePass(_assertThisInitialized(_this), _this._compRT.texture);\n    _this.updateBeforeType = NodeUpdateType.RENDER;\n    return _this;\n  }\n  _createClass(AfterImageNode, [{\n    key: \"getTextureNode\",\n    value: function getTextureNode() {\n      return this._textureNode;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this._compRT.setSize(width, height);\n      this._oldRT.setSize(width, height);\n    }\n  }, {\n    key: \"updateBefore\",\n    value: function updateBefore(frame) {\n      var renderer = frame.renderer;\n      var textureNode = this.textureNode;\n      var map = textureNode.value;\n      var textureType = map.type;\n      this._compRT.texture.type = textureType;\n      this._oldRT.texture.type = textureType;\n      var currentRenderTarget = renderer.getRenderTarget();\n      var currentTexture = textureNode.value;\n      this.textureNodeOld.value = this._oldRT.texture;\n\n      // comp\n      renderer.setRenderTarget(this._compRT);\n      quadMeshComp.render(renderer);\n\n      // Swap the textures\n      var temp = this._oldRT;\n      this._oldRT = this._compRT;\n      this._compRT = temp;\n\n      // set size before swapping fails\n      this.setSize(map.image.width, map.image.height);\n      renderer.setRenderTarget(currentRenderTarget);\n      textureNode.value = currentTexture;\n    }\n  }, {\n    key: \"setup\",\n    value: function setup(builder) {\n      var _this2 = this;\n      var textureNode = this.textureNode;\n      var textureNodeOld = this.textureNodeOld;\n      if (textureNode.isTextureNode !== true) {\n        console.error('AfterImageNode requires a TextureNode.');\n        return vec4();\n      }\n\n      //\n\n      var uvNode = textureNode.uvNode || uv();\n      textureNodeOld.uvNode = uvNode;\n      var sampleTexture = function sampleTexture(uv) {\n        return textureNode.cache().context({\n          getUV: function getUV() {\n            return uv;\n          },\n          forceUVContext: true\n        });\n      };\n      var when_gt = tslFn(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          x_immutable = _ref2[0],\n          y_immutable = _ref2[1];\n        var y = float(y_immutable).toVar();\n        var x = vec4(x_immutable).toVar();\n        return max(sign(x.sub(y)), 0.0);\n      });\n      var afterImg = tslFn(function () {\n        var texelOld = vec4(textureNodeOld);\n        var texelNew = vec4(sampleTexture(uvNode));\n        texelOld.mulAssign(_this2.damp.mul(when_gt(texelOld, 0.1)));\n        return max(texelNew, texelOld);\n      });\n\n      //\n\n      var materialComposed = this._materialComposed || (this._materialComposed = builder.createNodeMaterial());\n      materialComposed.fragmentNode = afterImg();\n      quadMeshComp.material = materialComposed;\n\n      //\n\n      var properties = builder.getNodeProperties(this);\n      properties.textureNode = textureNode;\n\n      //\n\n      return this._textureNode;\n    }\n  }]);\n  return AfterImageNode;\n}(TempNode);\nexport var afterImage = function afterImage(node, damp) {\n  return nodeObject(new AfterImageNode(nodeObject(node), damp));\n};\naddNodeElement('afterImage', afterImage);\nexport default AfterImageNode;","map":{"version":3,"names":["TempNode","nodeObject","addNodeElement","tslFn","float","vec4","NodeUpdateType","uv","texture","texturePass","uniform","RenderTarget","sign","max","QuadMesh","quadMeshComp","AfterImageNode","_TempNode","_inherits","_super","_createSuper","textureNode","_this","damp","arguments","length","undefined","_classCallCheck","call","textureNodeOld","_compRT","name","_oldRT","_textureNode","_assertThisInitialized","updateBeforeType","RENDER","_createClass","key","value","getTextureNode","setSize","width","height","updateBefore","frame","renderer","map","textureType","type","currentRenderTarget","getRenderTarget","currentTexture","setRenderTarget","render","temp","image","setup","builder","_this2","isTextureNode","console","error","uvNode","sampleTexture","cache","context","getUV","forceUVContext","when_gt","_ref","_ref2","_slicedToArray","x_immutable","y_immutable","y","toVar","x","sub","afterImg","texelOld","texelNew","mulAssign","mul","materialComposed","_materialComposed","createNodeMaterial","fragmentNode","material","properties","getNodeProperties","afterImage","node"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/display/AfterImageNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { nodeObject, addNodeElement, tslFn, float, vec4 } from '../shadernode/ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { texturePass } from './PassNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { RenderTarget } from 'three';\nimport { sign, max } from '../math/MathNode.js';\nimport QuadMesh from '../../objects/QuadMesh.js';\n\nconst quadMeshComp = new QuadMesh();\n\nclass AfterImageNode extends TempNode {\n\n\tconstructor( textureNode, damp = 0.96 ) {\n\n\t\tsuper( textureNode );\n\n\t\tthis.textureNode = textureNode;\n\t\tthis.textureNodeOld = texture();\n\t\tthis.damp = uniform( damp );\n\n\t\tthis._compRT = new RenderTarget();\n\t\tthis._compRT.texture.name = 'AfterImageNode.comp';\n\n\t\tthis._oldRT = new RenderTarget();\n\t\tthis._oldRT.texture.name = 'AfterImageNode.old';\n\n\t\tthis._textureNode = texturePass( this, this._compRT.texture );\n\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tgetTextureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._compRT.setSize( width, height );\n\t\tthis._oldRT.setSize( width, height );\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst map = textureNode.value;\n\n\t\tconst textureType = map.type;\n\n\t\tthis._compRT.texture.type = textureType;\n\t\tthis._oldRT.texture.type = textureType;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentTexture = textureNode.value;\n\n\t\tthis.textureNodeOld.value = this._oldRT.texture;\n\n\t\t// comp\n\t\trenderer.setRenderTarget( this._compRT );\n\t\tquadMeshComp.render( renderer );\n\n\t\t// Swap the textures\n\t\tconst temp = this._oldRT;\n\t\tthis._oldRT = this._compRT;\n\t\tthis._compRT = temp;\n\n\t\t// set size before swapping fails\n\t\tthis.setSize( map.image.width, map.image.height );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\ttextureNode.value = currentTexture;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst textureNodeOld = this.textureNodeOld;\n\n\t\tif ( textureNode.isTextureNode !== true ) {\n\n\t\t\tconsole.error( 'AfterImageNode requires a TextureNode.' );\n\n\t\t\treturn vec4();\n\n\t\t}\n\n\t\t//\n\n\t\tconst uvNode = textureNode.uvNode || uv();\n\n\t\ttextureNodeOld.uvNode = uvNode;\n\n\t\tconst sampleTexture = ( uv ) => textureNode.cache().context( { getUV: () => uv, forceUVContext: true } );\n\n\t\tconst when_gt = tslFn( ( [ x_immutable, y_immutable ] ) => {\n\n\t\t\tconst y = float( y_immutable ).toVar();\n\t\t\tconst x = vec4( x_immutable ).toVar();\n\n\t\t\treturn max( sign( x.sub( y ) ), 0.0 );\n\n\t\t} );\n\n\t\tconst afterImg = tslFn( () => {\n\n\t\t\tconst texelOld = vec4( textureNodeOld );\n\t\t\tconst texelNew = vec4( sampleTexture( uvNode ) );\n\n\t\t\ttexelOld.mulAssign( this.damp.mul( when_gt( texelOld, 0.1 ) ) );\n\t\t\treturn max( texelNew, texelOld );\n\n\t\t} );\n\n\t\t//\n\n\t\tconst materialComposed = this._materialComposed || ( this._materialComposed = builder.createNodeMaterial() );\n\t\tmaterialComposed.fragmentNode = afterImg();\n\n\t\tquadMeshComp.material = materialComposed;\n\n\t\t//\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.textureNode = textureNode;\n\n\t\t//\n\n\t\treturn this._textureNode;\n\n\t}\n\n}\n\nexport const afterImage = ( node, damp ) => nodeObject( new AfterImageNode( nodeObject( node ), damp ) );\n\naddNodeElement( 'afterImage', afterImage );\n\nexport default AfterImageNode;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}