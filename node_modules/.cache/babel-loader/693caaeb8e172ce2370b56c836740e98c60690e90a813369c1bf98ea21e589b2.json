{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { add } from '../math/OperatorNode.js';\nimport { buffer } from './BufferNode.js';\nimport { normalLocal } from './NormalNode.js';\nimport { positionLocal } from './PositionNode.js';\nimport { tangentLocal } from './TangentNode.js';\nclass SkinningNode extends Node {\n  constructor(skinnedMesh) {\n    super('void');\n    this.skinnedMesh = skinnedMesh;\n    this.updateType = NodeUpdateType.OBJECT;\n\n    //\n\n    this.skinIndexNode = attribute('skinIndex', 'uvec4');\n    this.skinWeightNode = attribute('skinWeight', 'vec4');\n    this.bindMatrixNode = uniform(skinnedMesh.bindMatrix, 'mat4');\n    this.bindMatrixInverseNode = uniform(skinnedMesh.bindMatrixInverse, 'mat4');\n    this.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n  }\n  setup(builder) {\n    const {\n      skinIndexNode,\n      skinWeightNode,\n      bindMatrixNode,\n      bindMatrixInverseNode,\n      boneMatricesNode\n    } = this;\n    const boneMatX = boneMatricesNode.element(skinIndexNode.x);\n    const boneMatY = boneMatricesNode.element(skinIndexNode.y);\n    const boneMatZ = boneMatricesNode.element(skinIndexNode.z);\n    const boneMatW = boneMatricesNode.element(skinIndexNode.w);\n\n    // POSITION\n\n    const skinVertex = bindMatrixNode.mul(positionLocal);\n    const skinned = add(boneMatX.mul(skinWeightNode.x).mul(skinVertex), boneMatY.mul(skinWeightNode.y).mul(skinVertex), boneMatZ.mul(skinWeightNode.z).mul(skinVertex), boneMatW.mul(skinWeightNode.w).mul(skinVertex));\n    const skinPosition = bindMatrixInverseNode.mul(skinned).xyz;\n\n    // NORMAL\n\n    let skinMatrix = add(skinWeightNode.x.mul(boneMatX), skinWeightNode.y.mul(boneMatY), skinWeightNode.z.mul(boneMatZ), skinWeightNode.w.mul(boneMatW));\n    skinMatrix = bindMatrixInverseNode.mul(skinMatrix).mul(bindMatrixNode);\n    const skinNormal = skinMatrix.transformDirection(normalLocal).xyz;\n\n    // ASSIGNS\n\n    positionLocal.assign(skinPosition);\n    normalLocal.assign(skinNormal);\n    if (builder.hasGeometryAttribute('tangent')) {\n      tangentLocal.assign(skinNormal);\n    }\n  }\n  generate(builder, output) {\n    if (output !== 'void') {\n      return positionLocal.build(builder, output);\n    }\n  }\n  update() {\n    this.skinnedMesh.skeleton.update();\n  }\n}\nexport default SkinningNode;\nexport const skinning = nodeProxy(SkinningNode);\naddNodeClass('SkinningNode', SkinningNode);","map":{"version":3,"names":["Node","addNodeClass","NodeUpdateType","nodeProxy","attribute","uniform","add","buffer","normalLocal","positionLocal","tangentLocal","SkinningNode","constructor","skinnedMesh","updateType","OBJECT","skinIndexNode","skinWeightNode","bindMatrixNode","bindMatrix","bindMatrixInverseNode","bindMatrixInverse","boneMatricesNode","skeleton","boneMatrices","bones","length","setup","builder","boneMatX","element","x","boneMatY","y","boneMatZ","z","boneMatW","w","skinVertex","mul","skinned","skinPosition","xyz","skinMatrix","skinNormal","transformDirection","assign","hasGeometryAttribute","generate","output","build","update","skinning"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/accessors/SkinningNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { add } from '../math/OperatorNode.js';\nimport { buffer } from './BufferNode.js';\nimport { normalLocal } from './NormalNode.js';\nimport { positionLocal } from './PositionNode.js';\nimport { tangentLocal } from './TangentNode.js';\n\nclass SkinningNode extends Node {\n\n\tconstructor( skinnedMesh ) {\n\n\t\tsuper( 'void' );\n\n\t\tthis.skinnedMesh = skinnedMesh;\n\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t\t//\n\n\t\tthis.skinIndexNode = attribute( 'skinIndex', 'uvec4' );\n\t\tthis.skinWeightNode = attribute( 'skinWeight', 'vec4' );\n\n\t\tthis.bindMatrixNode = uniform( skinnedMesh.bindMatrix, 'mat4' );\n\t\tthis.bindMatrixInverseNode = uniform( skinnedMesh.bindMatrixInverse, 'mat4' );\n\t\tthis.boneMatricesNode = buffer( skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode, boneMatricesNode } = this;\n\n\t\tconst boneMatX = boneMatricesNode.element( skinIndexNode.x );\n\t\tconst boneMatY = boneMatricesNode.element( skinIndexNode.y );\n\t\tconst boneMatZ = boneMatricesNode.element( skinIndexNode.z );\n\t\tconst boneMatW = boneMatricesNode.element( skinIndexNode.w );\n\n\t\t// POSITION\n\n\t\tconst skinVertex = bindMatrixNode.mul( positionLocal );\n\n\t\tconst skinned = add(\n\t\t\tboneMatX.mul( skinWeightNode.x ).mul( skinVertex ),\n\t\t\tboneMatY.mul( skinWeightNode.y ).mul( skinVertex ),\n\t\t\tboneMatZ.mul( skinWeightNode.z ).mul( skinVertex ),\n\t\t\tboneMatW.mul( skinWeightNode.w ).mul( skinVertex )\n\t\t);\n\n\t\tconst skinPosition = bindMatrixInverseNode.mul( skinned ).xyz;\n\n\t\t// NORMAL\n\n\t\tlet skinMatrix = add(\n\t\t\tskinWeightNode.x.mul( boneMatX ),\n\t\t\tskinWeightNode.y.mul( boneMatY ),\n\t\t\tskinWeightNode.z.mul( boneMatZ ),\n\t\t\tskinWeightNode.w.mul( boneMatW )\n\t\t);\n\n\t\tskinMatrix = bindMatrixInverseNode.mul( skinMatrix ).mul( bindMatrixNode );\n\n\t\tconst skinNormal = skinMatrix.transformDirection( normalLocal ).xyz;\n\n\t\t// ASSIGNS\n\n\t\tpositionLocal.assign( skinPosition );\n\t\tnormalLocal.assign( skinNormal );\n\n\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\n\n\t\t\ttangentLocal.assign( skinNormal );\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( output !== 'void' ) {\n\n\t\t\treturn positionLocal.build( builder, output );\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tthis.skinnedMesh.skeleton.update();\n\n\t}\n\n}\n\nexport default SkinningNode;\n\nexport const skinning = nodeProxy( SkinningNode );\n\naddNodeClass( 'SkinningNode', SkinningNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}