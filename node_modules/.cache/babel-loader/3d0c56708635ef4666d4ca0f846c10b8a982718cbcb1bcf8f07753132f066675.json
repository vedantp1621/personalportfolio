{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { nodeProxy, float, vec2 } from '../shadernode/ShaderNode.js';\nclass SpriteSheetUVNode extends Node {\n  constructor(countNode) {\n    let uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : uv();\n    let frameNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : float(0);\n    super('vec2');\n    this.countNode = countNode;\n    this.uvNode = uvNode;\n    this.frameNode = frameNode;\n  }\n  setup() {\n    const {\n      frameNode,\n      uvNode,\n      countNode\n    } = this;\n    const {\n      width,\n      height\n    } = countNode;\n    const frameNum = frameNode.mod(width.mul(height)).floor();\n    const column = frameNum.mod(width);\n    const row = height.sub(frameNum.add(1).div(width).ceil());\n    const scale = countNode.reciprocal();\n    const uvFrameOffset = vec2(column, row);\n    return uvNode.add(uvFrameOffset).mul(scale);\n  }\n}\nexport default SpriteSheetUVNode;\nexport const spritesheetUV = nodeProxy(SpriteSheetUVNode);\naddNodeClass('SpriteSheetUVNode', SpriteSheetUVNode);","map":{"version":3,"names":["Node","addNodeClass","uv","nodeProxy","float","vec2","SpriteSheetUVNode","constructor","countNode","uvNode","arguments","length","undefined","frameNode","setup","width","height","frameNum","mod","mul","floor","column","row","sub","add","div","ceil","scale","reciprocal","uvFrameOffset","spritesheetUV"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/utils/SpriteSheetUVNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { uv } from '../accessors/UVNode.js';\nimport { nodeProxy, float, vec2 } from '../shadernode/ShaderNode.js';\n\nclass SpriteSheetUVNode extends Node {\n\n\tconstructor( countNode, uvNode = uv(), frameNode = float( 0 ) ) {\n\n\t\tsuper( 'vec2' );\n\n\t\tthis.countNode = countNode;\n\t\tthis.uvNode = uvNode;\n\t\tthis.frameNode = frameNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { frameNode, uvNode, countNode } = this;\n\n\t\tconst { width, height } = countNode;\n\n\t\tconst frameNum = frameNode.mod( width.mul( height ) ).floor();\n\n\t\tconst column = frameNum.mod( width );\n\t\tconst row = height.sub( frameNum.add( 1 ).div( width ).ceil() );\n\n\t\tconst scale = countNode.reciprocal();\n\t\tconst uvFrameOffset = vec2( column, row );\n\n\t\treturn uvNode.add( uvFrameOffset ).mul( scale );\n\n\t}\n\n}\n\nexport default SpriteSheetUVNode;\n\nexport const spritesheetUV = nodeProxy( SpriteSheetUVNode );\n\naddNodeClass( 'SpriteSheetUVNode', SpriteSheetUVNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,EAAE,QAAQ,wBAAwB;AAC3C,SAASC,SAAS,EAAEC,KAAK,EAAEC,IAAI,QAAQ,6BAA6B;AAEpE,MAAMC,iBAAiB,SAASN,IAAI,CAAC;EAEpCO,WAAWA,CAAEC,SAAS,EAA0C;IAAA,IAAxCC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,EAAE,CAAC,CAAC;IAAA,IAAEW,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,KAAK,CAAE,CAAE,CAAC;IAE5D,KAAK,CAAE,MAAO,CAAC;IAEf,IAAI,CAACI,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,SAAS,GAAGA,SAAS;EAE3B;EAEAC,KAAKA,CAAA,EAAG;IAEP,MAAM;MAAED,SAAS;MAAEJ,MAAM;MAAED;IAAU,CAAC,GAAG,IAAI;IAE7C,MAAM;MAAEO,KAAK;MAAEC;IAAO,CAAC,GAAGR,SAAS;IAEnC,MAAMS,QAAQ,GAAGJ,SAAS,CAACK,GAAG,CAAEH,KAAK,CAACI,GAAG,CAAEH,MAAO,CAAE,CAAC,CAACI,KAAK,CAAC,CAAC;IAE7D,MAAMC,MAAM,GAAGJ,QAAQ,CAACC,GAAG,CAAEH,KAAM,CAAC;IACpC,MAAMO,GAAG,GAAGN,MAAM,CAACO,GAAG,CAAEN,QAAQ,CAACO,GAAG,CAAE,CAAE,CAAC,CAACC,GAAG,CAAEV,KAAM,CAAC,CAACW,IAAI,CAAC,CAAE,CAAC;IAE/D,MAAMC,KAAK,GAAGnB,SAAS,CAACoB,UAAU,CAAC,CAAC;IACpC,MAAMC,aAAa,GAAGxB,IAAI,CAAEgB,MAAM,EAAEC,GAAI,CAAC;IAEzC,OAAOb,MAAM,CAACe,GAAG,CAAEK,aAAc,CAAC,CAACV,GAAG,CAAEQ,KAAM,CAAC;EAEhD;AAED;AAEA,eAAerB,iBAAiB;AAEhC,OAAO,MAAMwB,aAAa,GAAG3B,SAAS,CAAEG,iBAAkB,CAAC;AAE3DL,YAAY,CAAE,mBAAmB,EAAEK,iBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}