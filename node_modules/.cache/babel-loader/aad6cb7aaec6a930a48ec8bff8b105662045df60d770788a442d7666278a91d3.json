{"ast":null,"code":"import LightingNode from './LightingNode.js';\nimport { cache } from '../core/CacheNode.js';\nimport { context } from '../core/ContextNode.js';\nimport { maxMipLevel } from '../utils/MaxMipLevelNode.js';\nimport { roughness, clearcoatRoughness } from '../core/PropertyNode.js';\nimport { equirectUV } from '../utils/EquirectUVNode.js';\nimport { specularMIPLevel } from '../utils/SpecularMIPLevelNode.js';\nimport { cameraViewMatrix } from '../accessors/CameraNode.js';\nimport { transformedClearcoatNormalView, transformedNormalView, transformedNormalWorld } from '../accessors/NormalNode.js';\nimport { positionViewDirection } from '../accessors/PositionNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { vec2 } from '../shadernode/ShaderNode.js';\nimport { cubeTexture } from '../accessors/CubeTextureNode.js';\nimport { reference } from '../accessors/ReferenceNode.js';\nconst envNodeCache = new WeakMap();\nclass EnvironmentNode extends LightingNode {\n  constructor() {\n    let envNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super();\n    this.envNode = envNode;\n  }\n  setup(builder) {\n    let envNode = this.envNode;\n    if (envNode.isTextureNode && envNode.value.isCubeTexture !== true) {\n      let cacheEnvNode = envNodeCache.get(envNode.value);\n      if (cacheEnvNode === undefined) {\n        const texture = envNode.value;\n        const renderer = builder.renderer;\n\n        // @TODO: Add dispose logic here\n        const cubeRTT = builder.getCubeRenderTarget(512).fromEquirectangularTexture(renderer, texture);\n        cacheEnvNode = cubeTexture(cubeRTT.texture);\n        envNodeCache.set(envNode.value, cacheEnvNode);\n      }\n      envNode = cacheEnvNode;\n    }\n\n    //\n\n    const intensity = reference('envMapIntensity', 'float', builder.material); // @TODO: Add materialEnvIntensity in MaterialNode\n\n    const radiance = context(envNode, createRadianceContext(roughness, transformedNormalView)).mul(intensity);\n    const irradiance = context(envNode, createIrradianceContext(transformedNormalWorld)).mul(Math.PI).mul(intensity);\n    const isolateRadiance = cache(radiance);\n\n    //\n\n    builder.context.radiance.addAssign(isolateRadiance);\n    builder.context.iblIrradiance.addAssign(irradiance);\n\n    //\n\n    const clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;\n    if (clearcoatRadiance) {\n      const clearcoatRadianceContext = context(envNode, createRadianceContext(clearcoatRoughness, transformedClearcoatNormalView)).mul(intensity);\n      const isolateClearcoatRadiance = cache(clearcoatRadianceContext);\n      clearcoatRadiance.addAssign(isolateClearcoatRadiance);\n    }\n  }\n}\nconst createRadianceContext = (roughnessNode, normalViewNode) => {\n  let reflectVec = null;\n  let textureUVNode = null;\n  return {\n    getUV: textureNode => {\n      let node = null;\n      if (reflectVec === null) {\n        reflectVec = positionViewDirection.negate().reflect(normalViewNode);\n        reflectVec = roughnessNode.mul(roughnessNode).mix(reflectVec, normalViewNode).normalize();\n        reflectVec = reflectVec.transformDirection(cameraViewMatrix);\n      }\n      if (textureNode.isCubeTextureNode) {\n        node = reflectVec;\n      } else if (textureNode.isTextureNode) {\n        if (textureUVNode === null) {\n          // @TODO: Needed PMREM\n\n          textureUVNode = equirectUV(reflectVec);\n        }\n        node = textureUVNode;\n      }\n      return node;\n    },\n    getTextureLevel: () => {\n      return roughnessNode;\n    },\n    getTextureLevelAlgorithm: (textureNode, levelNode) => {\n      return specularMIPLevel(textureNode, levelNode);\n    }\n  };\n};\nconst createIrradianceContext = normalWorldNode => {\n  let textureUVNode = null;\n  return {\n    getUV: textureNode => {\n      let node = null;\n      if (textureNode.isCubeTextureNode) {\n        node = normalWorldNode;\n      } else if (textureNode.isTextureNode) {\n        if (textureUVNode === null) {\n          // @TODO: Needed PMREM\n\n          textureUVNode = equirectUV(normalWorldNode);\n          textureUVNode = vec2(textureUVNode.x, textureUVNode.y.oneMinus());\n        }\n        node = textureUVNode;\n      }\n      return node;\n    },\n    getTextureLevel: textureNode => {\n      return maxMipLevel(textureNode);\n    }\n  };\n};\nexport default EnvironmentNode;\naddNodeClass('EnvironmentNode', EnvironmentNode);","map":{"version":3,"names":["LightingNode","cache","context","maxMipLevel","roughness","clearcoatRoughness","equirectUV","specularMIPLevel","cameraViewMatrix","transformedClearcoatNormalView","transformedNormalView","transformedNormalWorld","positionViewDirection","addNodeClass","vec2","cubeTexture","reference","envNodeCache","WeakMap","EnvironmentNode","constructor","envNode","arguments","length","undefined","setup","builder","isTextureNode","value","isCubeTexture","cacheEnvNode","get","texture","renderer","cubeRTT","getCubeRenderTarget","fromEquirectangularTexture","set","intensity","material","radiance","createRadianceContext","mul","irradiance","createIrradianceContext","Math","PI","isolateRadiance","addAssign","iblIrradiance","clearcoatRadiance","lightingModel","clearcoatRadianceContext","isolateClearcoatRadiance","roughnessNode","normalViewNode","reflectVec","textureUVNode","getUV","textureNode","node","negate","reflect","mix","normalize","transformDirection","isCubeTextureNode","getTextureLevel","getTextureLevelAlgorithm","levelNode","normalWorldNode","x","y","oneMinus"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/lighting/EnvironmentNode.js"],"sourcesContent":["import LightingNode from './LightingNode.js';\nimport { cache } from '../core/CacheNode.js';\nimport { context } from '../core/ContextNode.js';\nimport { maxMipLevel } from '../utils/MaxMipLevelNode.js';\nimport { roughness, clearcoatRoughness } from '../core/PropertyNode.js';\nimport { equirectUV } from '../utils/EquirectUVNode.js';\nimport { specularMIPLevel } from '../utils/SpecularMIPLevelNode.js';\nimport { cameraViewMatrix } from '../accessors/CameraNode.js';\nimport { transformedClearcoatNormalView, transformedNormalView, transformedNormalWorld } from '../accessors/NormalNode.js';\nimport { positionViewDirection } from '../accessors/PositionNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { vec2 } from '../shadernode/ShaderNode.js';\nimport { cubeTexture } from '../accessors/CubeTextureNode.js';\nimport { reference } from '../accessors/ReferenceNode.js';\n\nconst envNodeCache = new WeakMap();\n\nclass EnvironmentNode extends LightingNode {\n\n\tconstructor( envNode = null ) {\n\n\t\tsuper();\n\n\t\tthis.envNode = envNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tlet envNode = this.envNode;\n\n\t\tif ( envNode.isTextureNode && envNode.value.isCubeTexture !== true ) {\n\n\t\t\tlet cacheEnvNode = envNodeCache.get( envNode.value );\n\n\t\t\tif ( cacheEnvNode === undefined ) {\n\n\t\t\t\tconst texture = envNode.value;\n\t\t\t\tconst renderer = builder.renderer;\n\n\t\t\t\t// @TODO: Add dispose logic here\n\t\t\t\tconst cubeRTT = builder.getCubeRenderTarget( 512 ).fromEquirectangularTexture( renderer, texture );\n\n\t\t\t\tcacheEnvNode = cubeTexture( cubeRTT.texture );\n\n\t\t\t\tenvNodeCache.set( envNode.value, cacheEnvNode );\n\n\t\t\t}\n\n\t\t\tenvNode\t= cacheEnvNode;\n\n\t\t}\n\n\t\t//\n\n\t\tconst intensity = reference( 'envMapIntensity', 'float', builder.material ); // @TODO: Add materialEnvIntensity in MaterialNode\n\n\t\tconst radiance = context( envNode, createRadianceContext( roughness, transformedNormalView ) ).mul( intensity );\n\t\tconst irradiance = context( envNode, createIrradianceContext( transformedNormalWorld ) ).mul( Math.PI ).mul( intensity );\n\n\t\tconst isolateRadiance = cache( radiance );\n\n\t\t//\n\n\t\tbuilder.context.radiance.addAssign( isolateRadiance );\n\n\t\tbuilder.context.iblIrradiance.addAssign( irradiance );\n\n\t\t//\n\n\t\tconst clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;\n\n\t\tif ( clearcoatRadiance ) {\n\n\t\t\tconst clearcoatRadianceContext = context( envNode, createRadianceContext( clearcoatRoughness, transformedClearcoatNormalView ) ).mul( intensity );\n\t\t\tconst isolateClearcoatRadiance = cache( clearcoatRadianceContext );\n\n\t\t\tclearcoatRadiance.addAssign( isolateClearcoatRadiance );\n\n\t\t}\n\n\t}\n\n}\n\nconst createRadianceContext = ( roughnessNode, normalViewNode ) => {\n\n\tlet reflectVec = null;\n\tlet textureUVNode = null;\n\n\treturn {\n\t\tgetUV: ( textureNode ) => {\n\n\t\t\tlet node = null;\n\n\t\t\tif ( reflectVec === null ) {\n\n\t\t\t\treflectVec = positionViewDirection.negate().reflect( normalViewNode );\n\t\t\t\treflectVec = roughnessNode.mul( roughnessNode ).mix( reflectVec, normalViewNode ).normalize();\n\t\t\t\treflectVec = reflectVec.transformDirection( cameraViewMatrix );\n\n\t\t\t}\n\n\t\t\tif ( textureNode.isCubeTextureNode ) {\n\n\t\t\t\tnode = reflectVec;\n\n\t\t\t} else if ( textureNode.isTextureNode ) {\n\n\t\t\t\tif ( textureUVNode === null ) {\n\n\t\t\t\t\t// @TODO: Needed PMREM\n\n\t\t\t\t\ttextureUVNode = equirectUV( reflectVec );\n\n\t\t\t\t}\n\n\t\t\t\tnode = textureUVNode;\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t},\n\t\tgetTextureLevel: () => {\n\n\t\t\treturn roughnessNode;\n\n\t\t},\n\t\tgetTextureLevelAlgorithm: ( textureNode, levelNode ) => {\n\n\t\t\treturn specularMIPLevel( textureNode, levelNode );\n\n\t\t}\n\t};\n\n};\n\nconst createIrradianceContext = ( normalWorldNode ) => {\n\n\tlet textureUVNode = null;\n\n\treturn {\n\t\tgetUV: ( textureNode ) => {\n\n\t\t\tlet node = null;\n\n\t\t\tif ( textureNode.isCubeTextureNode ) {\n\n\t\t\t\tnode = normalWorldNode;\n\n\t\t\t} else if ( textureNode.isTextureNode ) {\n\n\t\t\t\tif ( textureUVNode === null ) {\n\n\t\t\t\t\t// @TODO: Needed PMREM\n\n\t\t\t\t\ttextureUVNode = equirectUV( normalWorldNode );\n\t\t\t\t\ttextureUVNode = vec2( textureUVNode.x, textureUVNode.y.oneMinus() );\n\n\t\t\t\t}\n\n\t\t\t\tnode = textureUVNode;\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t},\n\t\tgetTextureLevel: ( textureNode ) => {\n\n\t\t\treturn maxMipLevel( textureNode );\n\n\t\t}\n\t};\n\n};\n\nexport default EnvironmentNode;\n\naddNodeClass( 'EnvironmentNode', EnvironmentNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}