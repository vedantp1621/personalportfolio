{"ast":null,"code":"import { createNodeFromType } from '../core/Node.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nimport { FileLoader, Loader } from 'three';\nclass NodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.textures = {};\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parseNodes(json) {\n    const nodes = {};\n    if (json !== undefined) {\n      for (const nodeJSON of json) {\n        const {\n          uuid,\n          type\n        } = nodeJSON;\n        nodes[uuid] = nodeObject(createNodeFromType(type)); // @TODO: Maybe nodeObjectify the node in createNodeFromType?\n        nodes[uuid].uuid = uuid;\n      }\n      const meta = {\n        nodes,\n        textures: this.textures\n      };\n      for (const nodeJSON of json) {\n        nodeJSON.meta = meta;\n        const node = nodes[nodeJSON.uuid];\n        node.deserialize(nodeJSON);\n        delete nodeJSON.meta;\n      }\n    }\n    return nodes;\n  }\n  parse(json) {\n    const node = nodeObject(createNodeFromType(json.type));\n    node.uuid = json.uuid;\n    const nodes = this.parseNodes(json.nodes);\n    const meta = {\n      nodes,\n      textures: this.textures\n    };\n    json.meta = meta;\n    node.deserialize(json);\n    delete json.meta;\n    return node;\n  }\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n}\nexport default NodeLoader;","map":{"version":3,"names":["createNodeFromType","nodeObject","FileLoader","Loader","NodeLoader","constructor","manager","textures","load","url","onLoad","onProgress","onError","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","JSON","e","console","error","itemError","parseNodes","json","nodes","undefined","nodeJSON","uuid","type","meta","node","deserialize","setTextures","value"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/loaders/NodeLoader.js"],"sourcesContent":["import { createNodeFromType } from '../core/Node.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nimport { FileLoader, Loader } from 'three';\n\nclass NodeLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, ( text ) => {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( this.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparseNodes( json ) {\n\n\t\tconst nodes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( const nodeJSON of json ) {\n\n\t\t\t\tconst { uuid, type } = nodeJSON;\n\n\t\t\t\tnodes[ uuid ] = nodeObject( createNodeFromType( type ) ); // @TODO: Maybe nodeObjectify the node in createNodeFromType?\n\t\t\t\tnodes[ uuid ].uuid = uuid;\n\n\t\t\t}\n\n\t\t\tconst meta = { nodes, textures: this.textures };\n\n\t\t\tfor ( const nodeJSON of json ) {\n\n\t\t\t\tnodeJSON.meta = meta;\n\n\t\t\t\tconst node = nodes[ nodeJSON.uuid ];\n\t\t\t\tnode.deserialize( nodeJSON );\n\n\t\t\t\tdelete nodeJSON.meta;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodes;\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst node = nodeObject( createNodeFromType( json.type ) );\n\t\tnode.uuid = json.uuid;\n\n\t\tconst nodes = this.parseNodes( json.nodes );\n\t\tconst meta = { nodes, textures: this.textures };\n\n\t\tjson.meta = meta;\n\n\t\tnode.deserialize( json );\n\n\t\tdelete json.meta;\n\n\t\treturn node;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n}\n\nexport default NodeLoader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}