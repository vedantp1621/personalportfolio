{"ast":null,"code":"import { addNodeClass } from '../core/Node.js';\nimport TempNode from '../core/TempNode.js';\nimport TextureNode from '../accessors/TextureNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { viewZToOrthographicDepth, perspectiveDepthToViewZ } from './ViewportDepthNode.js';\nimport { RenderTarget, Vector2, HalfFloatType, DepthTexture, NoToneMapping /*, FloatType*/ } from 'three';\nclass PassTextureNode extends TextureNode {\n  constructor(passNode, texture) {\n    super(texture);\n    this.passNode = passNode;\n    this.setUpdateMatrix(false);\n  }\n  setup(builder) {\n    this.passNode.build(builder);\n    return super.setup(builder);\n  }\n  clone() {\n    return new this.constructor(this.passNode, this.value);\n  }\n}\nclass PassNode extends TempNode {\n  constructor(scope, scene, camera) {\n    super('vec4');\n    this.scope = scope;\n    this.scene = scene;\n    this.camera = camera;\n    this._pixelRatio = 1;\n    this._width = 1;\n    this._height = 1;\n    const depthTexture = new DepthTexture();\n    depthTexture.isRenderTargetTexture = true;\n    //depthTexture.type = FloatType;\n    depthTexture.name = 'PostProcessingDepth';\n    const renderTarget = new RenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, {\n      type: HalfFloatType\n    });\n    renderTarget.texture.name = 'PostProcessing';\n    renderTarget.depthTexture = depthTexture;\n    this.renderTarget = renderTarget;\n    this.updateBeforeType = NodeUpdateType.FRAME;\n    this._textureNode = nodeObject(new PassTextureNode(this, renderTarget.texture));\n    this._depthTextureNode = nodeObject(new PassTextureNode(this, depthTexture));\n    this._depthNode = null;\n    this._cameraNear = uniform(0);\n    this._cameraFar = uniform(0);\n    this.isPassNode = true;\n  }\n  isGlobal() {\n    return true;\n  }\n  getTextureNode() {\n    return this._textureNode;\n  }\n  getTextureDepthNode() {\n    return this._depthTextureNode;\n  }\n  getDepthNode() {\n    if (this._depthNode === null) {\n      const cameraNear = this._cameraNear;\n      const cameraFar = this._cameraFar;\n      this._depthNode = viewZToOrthographicDepth(perspectiveDepthToViewZ(this._depthTextureNode, cameraNear, cameraFar), cameraNear, cameraFar);\n    }\n    return this._depthNode;\n  }\n  setup() {\n    return this.scope === PassNode.COLOR ? this.getTextureNode() : this.getDepthNode();\n  }\n  updateBefore(frame) {\n    const {\n      renderer\n    } = frame;\n    const {\n      scene,\n      camera\n    } = this;\n    this._pixelRatio = renderer.getPixelRatio();\n    const size = renderer.getSize(new Vector2());\n    this.setSize(size.width, size.height);\n    const currentToneMapping = renderer.toneMapping;\n    const currentToneMappingNode = renderer.toneMappingNode;\n    const currentRenderTarget = renderer.getRenderTarget();\n    this._cameraNear.value = camera.near;\n    this._cameraFar.value = camera.far;\n    renderer.toneMapping = NoToneMapping;\n    renderer.toneMappingNode = null;\n    renderer.setRenderTarget(this.renderTarget);\n    renderer.render(scene, camera);\n    renderer.toneMapping = currentToneMapping;\n    renderer.toneMappingNode = currentToneMappingNode;\n    renderer.setRenderTarget(currentRenderTarget);\n  }\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget.setSize(effectiveWidth, effectiveHeight);\n  }\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n  dispose() {\n    this.renderTarget.dispose();\n  }\n}\nPassNode.COLOR = 'color';\nPassNode.DEPTH = 'depth';\nexport default PassNode;\nexport const pass = (scene, camera) => nodeObject(new PassNode(PassNode.COLOR, scene, camera));\nexport const texturePass = (pass, texture) => nodeObject(new PassTextureNode(pass, texture));\nexport const depthPass = (scene, camera) => nodeObject(new PassNode(PassNode.DEPTH, scene, camera));\naddNodeClass('PassNode', PassNode);","map":{"version":3,"names":["addNodeClass","TempNode","TextureNode","NodeUpdateType","nodeObject","uniform","viewZToOrthographicDepth","perspectiveDepthToViewZ","RenderTarget","Vector2","HalfFloatType","DepthTexture","NoToneMapping","PassTextureNode","constructor","passNode","texture","setUpdateMatrix","setup","builder","build","clone","value","PassNode","scope","scene","camera","_pixelRatio","_width","_height","depthTexture","isRenderTargetTexture","name","renderTarget","type","updateBeforeType","FRAME","_textureNode","_depthTextureNode","_depthNode","_cameraNear","_cameraFar","isPassNode","isGlobal","getTextureNode","getTextureDepthNode","getDepthNode","cameraNear","cameraFar","COLOR","updateBefore","frame","renderer","getPixelRatio","size","getSize","setSize","width","height","currentToneMapping","toneMapping","currentToneMappingNode","toneMappingNode","currentRenderTarget","getRenderTarget","near","far","setRenderTarget","render","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","dispose","DEPTH","pass","texturePass","depthPass"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/display/PassNode.js"],"sourcesContent":["import { addNodeClass } from '../core/Node.js';\nimport TempNode from '../core/TempNode.js';\nimport TextureNode from '../accessors/TextureNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { viewZToOrthographicDepth, perspectiveDepthToViewZ } from './ViewportDepthNode.js';\nimport { RenderTarget, Vector2, HalfFloatType, DepthTexture, NoToneMapping/*, FloatType*/ } from 'three';\n\nclass PassTextureNode extends TextureNode {\n\n\tconstructor( passNode, texture ) {\n\n\t\tsuper( texture );\n\n\t\tthis.passNode = passNode;\n\n\t\tthis.setUpdateMatrix( false );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis.passNode.build( builder );\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.passNode, this.value );\n\n\t}\n\n}\n\nclass PassNode extends TempNode {\n\n\tconstructor( scope, scene, camera ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.scope = scope;\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = 1;\n\t\tthis._height = 1;\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.isRenderTargetTexture = true;\n\t\t//depthTexture.type = FloatType;\n\t\tdepthTexture.name = 'PostProcessingDepth';\n\n\t\tconst renderTarget = new RenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\n\t\trenderTarget.texture.name = 'PostProcessing';\n\t\trenderTarget.depthTexture = depthTexture;\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\n\n\t\tthis._textureNode = nodeObject( new PassTextureNode( this, renderTarget.texture ) );\n\t\tthis._depthTextureNode = nodeObject( new PassTextureNode( this, depthTexture ) );\n\n\t\tthis._depthNode = null;\n\t\tthis._cameraNear = uniform( 0 );\n\t\tthis._cameraFar = uniform( 0 );\n\n\t\tthis.isPassNode = true;\n\n\t}\n\n\tisGlobal() {\n\n\t\treturn true;\n\n\t}\n\n\tgetTextureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\tgetTextureDepthNode() {\n\n\t\treturn this._depthTextureNode;\n\n\t}\n\n\tgetDepthNode() {\n\n\t\tif ( this._depthNode === null ) {\n\n\t\t\tconst cameraNear = this._cameraNear;\n\t\t\tconst cameraFar = this._cameraFar;\n\n\t\t\tthis._depthNode = viewZToOrthographicDepth( perspectiveDepthToViewZ( this._depthTextureNode, cameraNear, cameraFar ), cameraNear, cameraFar );\n\n\t\t}\n\n\t\treturn this._depthNode;\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.scope === PassNode.COLOR ? this.getTextureNode() : this.getDepthNode();\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\t\tconst { scene, camera } = this;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tconst size = renderer.getSize( new Vector2() );\n\n\t\tthis.setSize( size.width, size.height );\n\n\t\tconst currentToneMapping = renderer.toneMapping;\n\t\tconst currentToneMappingNode = renderer.toneMappingNode;\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tthis._cameraNear.value = camera.near;\n\t\tthis._cameraFar.value = camera.far;\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.toneMappingNode = null;\n\t\trenderer.setRenderTarget( this.renderTarget );\n\n\t\trenderer.render( scene, camera );\n\n\t\trenderer.toneMapping = currentToneMapping;\n\t\trenderer.toneMappingNode = currentToneMappingNode;\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTarget.dispose();\n\n\t}\n\n\n}\n\nPassNode.COLOR = 'color';\nPassNode.DEPTH = 'depth';\n\nexport default PassNode;\n\nexport const pass = ( scene, camera ) => nodeObject( new PassNode( PassNode.COLOR, scene, camera ) );\nexport const texturePass = ( pass, texture ) => nodeObject( new PassTextureNode( pass, texture ) );\nexport const depthPass = ( scene, camera ) => nodeObject( new PassNode( PassNode.DEPTH, scene, camera ) );\n\naddNodeClass( 'PassNode', PassNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}