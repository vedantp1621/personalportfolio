{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nclass ConvertNode extends Node {\n  constructor(node, convertTo) {\n    super();\n    this.node = node;\n    this.convertTo = convertTo;\n  }\n  getNodeType(builder) {\n    const requestType = this.node.getNodeType(builder);\n    let convertTo = null;\n    for (const overloadingType of this.convertTo.split('|')) {\n      if (convertTo === null || builder.getTypeLength(requestType) === builder.getTypeLength(overloadingType)) {\n        convertTo = overloadingType;\n      }\n    }\n    return convertTo;\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.convertTo = this.convertTo;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.convertTo = data.convertTo;\n  }\n  generate(builder, output) {\n    const node = this.node;\n    const type = this.getNodeType(builder);\n    const snippet = node.build(builder, type);\n    return builder.format(snippet, type, output);\n  }\n}\nexport default ConvertNode;\naddNodeClass('ConvertNode', ConvertNode);","map":{"version":3,"names":["Node","addNodeClass","ConvertNode","constructor","node","convertTo","getNodeType","builder","requestType","overloadingType","split","getTypeLength","serialize","data","deserialize","generate","output","type","snippet","build","format"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/utils/ConvertNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\n\nclass ConvertNode extends Node {\n\n\tconstructor( node, convertTo ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.convertTo = convertTo;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst requestType = this.node.getNodeType( builder );\n\n\t\tlet convertTo = null;\n\n\t\tfor ( const overloadingType of this.convertTo.split( '|' ) ) {\n\n\t\t\tif ( convertTo === null || builder.getTypeLength( requestType ) === builder.getTypeLength( overloadingType ) ) {\n\n\t\t\t\tconvertTo = overloadingType;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn convertTo;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.convertTo = this.convertTo;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.convertTo = data.convertTo;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst node = this.node;\n\t\tconst type = this.getNodeType( builder );\n\n\t\tconst snippet = node.build( builder, type );\n\n\t\treturn builder.format( snippet, type, output );\n\n\t}\n\n}\n\nexport default ConvertNode;\n\naddNodeClass( 'ConvertNode', ConvertNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AAEpD,MAAMC,WAAW,SAASF,IAAI,CAAC;EAE9BG,WAAWA,CAAEC,IAAI,EAAEC,SAAS,EAAG;IAE9B,KAAK,CAAC,CAAC;IAEP,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAE3B;EAEAC,WAAWA,CAAEC,OAAO,EAAG;IAEtB,MAAMC,WAAW,GAAG,IAAI,CAACJ,IAAI,CAACE,WAAW,CAAEC,OAAQ,CAAC;IAEpD,IAAIF,SAAS,GAAG,IAAI;IAEpB,KAAM,MAAMI,eAAe,IAAI,IAAI,CAACJ,SAAS,CAACK,KAAK,CAAE,GAAI,CAAC,EAAG;MAE5D,IAAKL,SAAS,KAAK,IAAI,IAAIE,OAAO,CAACI,aAAa,CAAEH,WAAY,CAAC,KAAKD,OAAO,CAACI,aAAa,CAAEF,eAAgB,CAAC,EAAG;QAE9GJ,SAAS,GAAGI,eAAe;MAE5B;IAED;IAEA,OAAOJ,SAAS;EAEjB;EAEAO,SAASA,CAAEC,IAAI,EAAG;IAEjB,KAAK,CAACD,SAAS,CAAEC,IAAK,CAAC;IAEvBA,IAAI,CAACR,SAAS,GAAG,IAAI,CAACA,SAAS;EAEhC;EAEAS,WAAWA,CAAED,IAAI,EAAG;IAEnB,KAAK,CAACC,WAAW,CAAED,IAAK,CAAC;IAEzB,IAAI,CAACR,SAAS,GAAGQ,IAAI,CAACR,SAAS;EAEhC;EAEAU,QAAQA,CAAER,OAAO,EAAES,MAAM,EAAG;IAE3B,MAAMZ,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMa,IAAI,GAAG,IAAI,CAACX,WAAW,CAAEC,OAAQ,CAAC;IAExC,MAAMW,OAAO,GAAGd,IAAI,CAACe,KAAK,CAAEZ,OAAO,EAAEU,IAAK,CAAC;IAE3C,OAAOV,OAAO,CAACa,MAAM,CAAEF,OAAO,EAAED,IAAI,EAAED,MAAO,CAAC;EAE/C;AAED;AAEA,eAAed,WAAW;AAE1BD,YAAY,CAAE,aAAa,EAAEC,WAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}