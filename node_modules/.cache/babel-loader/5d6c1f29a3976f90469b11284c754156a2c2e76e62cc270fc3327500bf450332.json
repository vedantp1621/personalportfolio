{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { property } from '../core/PropertyNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { modelNormalMatrix } from './ModelNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass NormalNode extends Node {\n  constructor() {\n    let scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NormalNode.LOCAL;\n    super('vec3');\n    this.scope = scope;\n  }\n  isGlobal() {\n    return true;\n  }\n  getHash( /*builder*/\n  ) {\n    return `normal-${this.scope}`;\n  }\n  generate(builder) {\n    const scope = this.scope;\n    let outputNode = null;\n    if (scope === NormalNode.GEOMETRY) {\n      outputNode = attribute('normal', 'vec3');\n    } else if (scope === NormalNode.LOCAL) {\n      outputNode = varying(normalGeometry);\n    } else if (scope === NormalNode.VIEW) {\n      const vertexNode = modelNormalMatrix.mul(normalLocal);\n      outputNode = normalize(varying(vertexNode));\n    } else if (scope === NormalNode.WORLD) {\n      // To use inverseTransformDirection only inverse the param order like this: cameraViewMatrix.transformDirection( normalView )\n      const vertexNode = normalView.transformDirection(cameraViewMatrix);\n      outputNode = normalize(varying(vertexNode));\n    }\n    return outputNode.build(builder, this.getNodeType(builder));\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nNormalNode.GEOMETRY = 'geometry';\nNormalNode.LOCAL = 'local';\nNormalNode.VIEW = 'view';\nNormalNode.WORLD = 'world';\nexport default NormalNode;\nexport const normalGeometry = nodeImmutable(NormalNode, NormalNode.GEOMETRY);\nexport const normalLocal = nodeImmutable(NormalNode, NormalNode.LOCAL).temp('Normal');\nexport const normalView = nodeImmutable(NormalNode, NormalNode.VIEW);\nexport const normalWorld = nodeImmutable(NormalNode, NormalNode.WORLD);\nexport const transformedNormalView = property('vec3', 'TransformedNormalView');\nexport const transformedNormalWorld = transformedNormalView.transformDirection(cameraViewMatrix).normalize();\nexport const transformedClearcoatNormalView = property('vec3', 'TransformedClearcoatNormalView');\naddNodeClass('NormalNode', NormalNode);","map":{"version":3,"names":["Node","addNodeClass","attribute","varying","property","normalize","cameraViewMatrix","modelNormalMatrix","nodeImmutable","NormalNode","constructor","scope","arguments","length","undefined","LOCAL","isGlobal","getHash","generate","builder","outputNode","GEOMETRY","normalGeometry","VIEW","vertexNode","mul","normalLocal","WORLD","normalView","transformDirection","build","getNodeType","serialize","data","deserialize","temp","normalWorld","transformedNormalView","transformedNormalWorld","transformedClearcoatNormalView"],"sources":["/Users/vedant/node_modules/three/examples/jsm/nodes/accessors/NormalNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { property } from '../core/PropertyNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { modelNormalMatrix } from './ModelNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\n\nclass NormalNode extends Node {\n\n\tconstructor( scope = NormalNode.LOCAL ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tisGlobal() {\n\n\t\treturn true;\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn `normal-${this.scope}`;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet outputNode = null;\n\n\t\tif ( scope === NormalNode.GEOMETRY ) {\n\n\t\t\toutputNode = attribute( 'normal', 'vec3' );\n\n\t\t} else if ( scope === NormalNode.LOCAL ) {\n\n\t\t\toutputNode = varying( normalGeometry );\n\n\t\t} else if ( scope === NormalNode.VIEW ) {\n\n\t\t\tconst vertexNode = modelNormalMatrix.mul( normalLocal );\n\t\t\toutputNode = normalize( varying( vertexNode ) );\n\n\t\t} else if ( scope === NormalNode.WORLD ) {\n\n\t\t\t// To use inverseTransformDirection only inverse the param order like this: cameraViewMatrix.transformDirection( normalView )\n\t\t\tconst vertexNode = normalView.transformDirection( cameraViewMatrix );\n\t\t\toutputNode = normalize( varying( vertexNode ) );\n\n\t\t}\n\n\t\treturn outputNode.build( builder, this.getNodeType( builder ) );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nNormalNode.GEOMETRY = 'geometry';\nNormalNode.LOCAL = 'local';\nNormalNode.VIEW = 'view';\nNormalNode.WORLD = 'world';\n\nexport default NormalNode;\n\nexport const normalGeometry = nodeImmutable( NormalNode, NormalNode.GEOMETRY );\nexport const normalLocal = nodeImmutable( NormalNode, NormalNode.LOCAL ).temp( 'Normal' );\nexport const normalView = nodeImmutable( NormalNode, NormalNode.VIEW );\nexport const normalWorld = nodeImmutable( NormalNode, NormalNode.WORLD );\nexport const transformedNormalView = property( 'vec3', 'TransformedNormalView' );\nexport const transformedNormalWorld = transformedNormalView.transformDirection( cameraViewMatrix ).normalize();\nexport const transformedClearcoatNormalView = property( 'vec3', 'TransformedClearcoatNormalView' );\n\naddNodeClass( 'NormalNode', NormalNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,aAAa,QAAQ,6BAA6B;AAE3D,MAAMC,UAAU,SAAST,IAAI,CAAC;EAE7BU,WAAWA,CAAA,EAA6B;IAAA,IAA3BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,UAAU,CAACM,KAAK;IAEpC,KAAK,CAAE,MAAO,CAAC;IAEf,IAAI,CAACJ,KAAK,GAAGA,KAAK;EAEnB;EAEAK,QAAQA,CAAA,EAAG;IAEV,OAAO,IAAI;EAEZ;EAEAC,OAAOA,CAAA,CAAE;EAAA,EAAc;IAEtB,OAAQ,UAAS,IAAI,CAACN,KAAM,EAAC;EAE9B;EAEAO,QAAQA,CAAEC,OAAO,EAAG;IAEnB,MAAMR,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAIS,UAAU,GAAG,IAAI;IAErB,IAAKT,KAAK,KAAKF,UAAU,CAACY,QAAQ,EAAG;MAEpCD,UAAU,GAAGlB,SAAS,CAAE,QAAQ,EAAE,MAAO,CAAC;IAE3C,CAAC,MAAM,IAAKS,KAAK,KAAKF,UAAU,CAACM,KAAK,EAAG;MAExCK,UAAU,GAAGjB,OAAO,CAAEmB,cAAe,CAAC;IAEvC,CAAC,MAAM,IAAKX,KAAK,KAAKF,UAAU,CAACc,IAAI,EAAG;MAEvC,MAAMC,UAAU,GAAGjB,iBAAiB,CAACkB,GAAG,CAAEC,WAAY,CAAC;MACvDN,UAAU,GAAGf,SAAS,CAAEF,OAAO,CAAEqB,UAAW,CAAE,CAAC;IAEhD,CAAC,MAAM,IAAKb,KAAK,KAAKF,UAAU,CAACkB,KAAK,EAAG;MAExC;MACA,MAAMH,UAAU,GAAGI,UAAU,CAACC,kBAAkB,CAAEvB,gBAAiB,CAAC;MACpEc,UAAU,GAAGf,SAAS,CAAEF,OAAO,CAAEqB,UAAW,CAAE,CAAC;IAEhD;IAEA,OAAOJ,UAAU,CAACU,KAAK,CAAEX,OAAO,EAAE,IAAI,CAACY,WAAW,CAAEZ,OAAQ,CAAE,CAAC;EAEhE;EAEAa,SAASA,CAAEC,IAAI,EAAG;IAEjB,KAAK,CAACD,SAAS,CAAEC,IAAK,CAAC;IAEvBA,IAAI,CAACtB,KAAK,GAAG,IAAI,CAACA,KAAK;EAExB;EAEAuB,WAAWA,CAAED,IAAI,EAAG;IAEnB,KAAK,CAACC,WAAW,CAAED,IAAK,CAAC;IAEzB,IAAI,CAACtB,KAAK,GAAGsB,IAAI,CAACtB,KAAK;EAExB;AAED;AAEAF,UAAU,CAACY,QAAQ,GAAG,UAAU;AAChCZ,UAAU,CAACM,KAAK,GAAG,OAAO;AAC1BN,UAAU,CAACc,IAAI,GAAG,MAAM;AACxBd,UAAU,CAACkB,KAAK,GAAG,OAAO;AAE1B,eAAelB,UAAU;AAEzB,OAAO,MAAMa,cAAc,GAAGd,aAAa,CAAEC,UAAU,EAAEA,UAAU,CAACY,QAAS,CAAC;AAC9E,OAAO,MAAMK,WAAW,GAAGlB,aAAa,CAAEC,UAAU,EAAEA,UAAU,CAACM,KAAM,CAAC,CAACoB,IAAI,CAAE,QAAS,CAAC;AACzF,OAAO,MAAMP,UAAU,GAAGpB,aAAa,CAAEC,UAAU,EAAEA,UAAU,CAACc,IAAK,CAAC;AACtE,OAAO,MAAMa,WAAW,GAAG5B,aAAa,CAAEC,UAAU,EAAEA,UAAU,CAACkB,KAAM,CAAC;AACxE,OAAO,MAAMU,qBAAqB,GAAGjC,QAAQ,CAAE,MAAM,EAAE,uBAAwB,CAAC;AAChF,OAAO,MAAMkC,sBAAsB,GAAGD,qBAAqB,CAACR,kBAAkB,CAAEvB,gBAAiB,CAAC,CAACD,SAAS,CAAC,CAAC;AAC9G,OAAO,MAAMkC,8BAA8B,GAAGnC,QAAQ,CAAE,MAAM,EAAE,gCAAiC,CAAC;AAElGH,YAAY,CAAE,YAAY,EAAEQ,UAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}